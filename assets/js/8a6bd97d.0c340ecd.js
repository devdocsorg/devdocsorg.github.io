"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8115],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6261:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const a={id:"create",title:"Create",swizzle:!0},i=void 0,s={unversionedId:"api-reference/antd/components/basic-views/create",id:"version-3.xx.xx/api-reference/antd/components/basic-views/create",title:"Create",description:"`` provides us a layout to display the page. It does not contain any logic but adds extra functionalities like action buttons and giving titles to the page.",source:"@site/versioned_docs/version-3.xx.xx/api-reference/antd/components/basic-views/create.md",sourceDirName:"api-reference/antd/components/basic-views",slug:"/api-reference/antd/components/basic-views/create",permalink:"/docs/3.xx.xx/api-reference/antd/components/basic-views/create",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/versioned_docs/version-3.xx.xx/api-reference/antd/components/basic-views/create.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{id:"create",title:"Create",swizzle:!0},sidebar:"someSidebar",previous:{title:"Inferencer",permalink:"/docs/3.xx.xx/api-reference/antd/components/inferencer"},next:{title:"Edit",permalink:"/docs/3.xx.xx/api-reference/antd/components/basic-views/edit"}},p={},l=[{value:"Properties",id:"properties",level:2},{value:"<code>title</code>",id:"title",level:3},{value:"<code>saveButtonProps</code>",id:"savebuttonprops",level:3},{value:"<code>resource</code>",id:"resource",level:3},{value:"<code>goBack</code>",id:"goback",level:3},{value:"<code>isLoading</code>",id:"isloading",level:3},{value:"<code>breadcrumb</code>",id:"breadcrumb",level:3},{value:"<code>wrapperProps</code>",id:"wrapperprops",level:3},{value:"<code>headerProps</code>",id:"headerprops",level:3},{value:"<code>contentProps</code>",id:"contentprops",level:3},{value:"<code>headerButtons</code>",id:"headerbuttons",level:3},{value:"<code>headerButtonProps</code>",id:"headerbuttonprops",level:3},{value:"<code>footerButtons</code>",id:"footerbuttons",level:3},{value:"<code>footerButtonProps</code>",id:"footerbuttonprops",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Props",id:"props",level:3}],c=(d="PropsTable",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var d;const u={toc:l},m="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<Create>")," provides us a layout to display the page. It does not contain any logic but adds extra functionalities like action buttons and giving titles to the page."),(0,o.kt)("p",null,"We'll show what ",(0,o.kt)("inlineCode",{parentName:"p"},"<Create>")," does using properties with examples."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode url=http://localhost:3000/posts/create",live:!0,hideCode:!0,url:"http://localhost:3000/posts/create"},"interface ICategory {\n  id: number\n  title: string\n}\n\ninterface IPost {\n  id: number\n  title: string\n  content: string\n  status: 'published' | 'draft' | 'rejected'\n  category: { id: number }\n}\n\n// visible-block-start\nimport {\n  Create,\n  Form,\n  Input,\n  Select,\n  useForm,\n  useSelect,\n} from '@pankod/refine-antd'\n\nconst PostCreate: React.FC = () => {\n  const { formProps, saveButtonProps } = useForm<IPost>()\n\n  const { selectProps: categorySelectProps } = useSelect<ICategory>({\n    resource: 'categories',\n  })\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <Form {...formProps} layout=\"vertical\">\n        <Form.Item\n          label=\"Title\"\n          name=\"title\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label=\"Category\"\n          name={['category', 'id']}\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Select {...categorySelectProps} />\n        </Form.Item>\n        <Form.Item\n          label=\"Status\"\n          name=\"status\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Select\n            options={[\n              {\n                label: 'Published',\n                value: 'published',\n              },\n              {\n                label: 'Draft',\n                value: 'draft',\n              },\n              {\n                label: 'Rejected',\n                value: 'rejected',\n              },\n            ]}\n          />\n        </Form.Item>\n      </Form>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/create']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <CreateButton />\n          </div>\n        ),\n        create: PostCreate,\n      },\n    ]}\n  />,\n)\n")),(0,o.kt)("admonition",{title:"Swizzle",type:"info-tip"},(0,o.kt)("p",{parentName:"admonition"},"You can swizzle this component to customize it with the ",(0,o.kt)("a",{parentName:"p",href:"/docs/packages/documentation/cli"},(0,o.kt)("strong",{parentName:"a"},"refine CLI")))),(0,o.kt)("h2",{id:"properties"},"Properties"),(0,o.kt)("h3",{id:"title"},(0,o.kt)("inlineCode",{parentName:"h3"},"title")),(0,o.kt)("p",null,"It allows adding title inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Create>"),' component. if you don\'t pass title props it uses "Create" prefix and singular resource name by default. For example, for the ',(0,o.kt)("inlineCode",{parentName:"p"},"/posts/create"),' resource, it will be "Create post".'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},"const { Form, Input, Select, useForm, useSelect, CreateButton } = RefineAntd\n\n// visible-block-start\nimport { Create } from '@pankod/refine-antd'\n\nconst PostCreate: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Create title=\"Custom Title\">\n      <p>Rest of your page here</p>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/create']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <CreateButton />\n          </div>\n        ),\n        create: PostCreate,\n      },\n    ]}\n  />,\n)\n")),(0,o.kt)("h3",{id:"savebuttonprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"saveButtonProps")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<Create>")," component has a default button that submits the form. If you want to customize this button you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"saveButtonProps")," property like the code below."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/antd/components/buttons/save-button"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"<SaveButton>")," documentation for detailed usage. ","\u2192")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},"const { Form, Input, Select, useForm, useSelect, CreateButton } = RefineAntd\n\n// visible-block-start\nimport { Create } from '@pankod/refine-antd'\n\nconst PostCreate: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Create saveButtonProps={{ size: 'small' }}>\n      <p>Rest of your page here</p>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/create']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <CreateButton />\n          </div>\n        ),\n        create: PostCreate,\n      },\n    ]}\n  />,\n)\n")),(0,o.kt)("h3",{id:"resource"},(0,o.kt)("inlineCode",{parentName:"h3"},"resource")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"<Create>")," component reads the ",(0,o.kt)("inlineCode",{parentName:"p"},"resource")," information from the route by default. This default behavior will not work on custom pages. If you want to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Create>")," component in a custom page, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"resource")," prop."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/advanced-tutorials/custom-pages"},"Refer to the custom pages documentation for detailed usage. ","\u2192")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/custom",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/custom"},"// handle initial routes in new way\nsetInitialRoutes(['/custom'])\n\n// visible-block-start\nimport { Refine } from '@pankod/refine-core'\nimport { Create } from '@pankod/refine-antd'\nimport routerProvider from '@pankod/refine-react-router-v6'\nimport dataProvider from '@pankod/refine-simple-rest'\n\nconst CustomPage: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Create resource=\"posts\">\n      <p>Rest of your page here</p>\n    </Create>\n  )\n}\n\nconst App: React.FC = () => {\n  return (\n    <Refine\n      routerProvider={{\n        ...routerProvider,\n        // highlight-start\n        routes: [\n          {\n            element: <CustomPage />,\n            path: '/custom',\n          },\n        ],\n        // highlight-end\n      }}\n      dataProvider={dataProvider('https://api.fake-rest.refine.dev')}\n      resources={[{ name: 'posts' }]}\n    />\n  )\n}\n// visible-block-end\n\nrender(<App />)\n")),(0,o.kt)("h3",{id:"goback"},(0,o.kt)("inlineCode",{parentName:"h3"},"goBack")),(0,o.kt)("p",null,"To customize the back button or to disable it, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"goBack")," property."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},"const { CreateButton } = RefineAntd\n\n// visible-block-start\nimport { Create, Icons } from '@pankod/refine-antd'\n\nconst PostCreate: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Create goBack={<Icons.SmileOutlined />}>\n      <p>Rest of your page here</p>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts', '/posts/create']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <CreateButton />\n          </div>\n        ),\n        create: PostCreate,\n      },\n    ]}\n  />,\n)\n")),(0,o.kt)("h3",{id:"isloading"},(0,o.kt)("inlineCode",{parentName:"h3"},"isLoading")),(0,o.kt)("p",null,"To toggle the loading state of the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Create/>")," component, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"isLoading")," property."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},"const { CreateButton } = RefineAntd\n\n// visible-block-start\nimport { Create } from '@pankod/refine-antd'\n\nconst PostCreate: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Create isLoading={true}>\n      <p>Rest of your page here</p>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/create']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <CreateButton />\n          </div>\n        ),\n        create: PostCreate,\n      },\n    ]}\n  />,\n)\n")),(0,o.kt)("h3",{id:"breadcrumb"},(0,o.kt)("inlineCode",{parentName:"h3"},"breadcrumb")),(0,o.kt)("p",null,"To customize or disable the breadcrumb, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"breadcrumb")," property. By default it uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"Breadcrumb")," component from ",(0,o.kt)("inlineCode",{parentName:"p"},"@pankod/refine-antd")," package."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/antd/components/breadcrumb"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"Breadcrumb")," documentation for detailed usage. ","\u2192")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"This feature can be managed globally via the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Refine>")," component's ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/components/refine-config/#breadcrumb"},"options"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},"const { CreateButton } = RefineAntd\n\n// visible-block-start\nimport { Create, Breadcrumb } from '@pankod/refine-antd'\n\nconst PostCreate: React.FC = () => {\n  return (\n    <Create\n      // highlight-start\n      breadcrumb={\n        <div\n          style={{\n            padding: '3px 6px',\n            border: '2px dashed cornflowerblue',\n          }}\n        >\n          <Breadcrumb />\n        </div>\n      }\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/create']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <CreateButton />\n          </div>\n        ),\n        create: PostCreate,\n      },\n    ]}\n  />,\n)\n")),(0,o.kt)("h3",{id:"wrapperprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"wrapperProps")),(0,o.kt)("p",null,"If you want to customize the wrapper of the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Create/>")," component, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"wrapperProps")," property. For ",(0,o.kt)("inlineCode",{parentName:"p"},"@pankod/refine-antd")," wrapper elements are simple ",(0,o.kt)("inlineCode",{parentName:"p"},"<div/>"),"s and ",(0,o.kt)("inlineCode",{parentName:"p"},"wrapperProps")," can get every attribute that ",(0,o.kt)("inlineCode",{parentName:"p"},"<div/>")," can get."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},"const { CreateButton } = RefineAntd\n\n// visible-block-start\nimport { Create } from '@pankod/refine-antd'\n\nconst PostCreate: React.FC = () => {\n  return (\n    <Create\n      // highlight-start\n      wrapperProps={{\n        style: {\n          backgroundColor: 'cornflowerblue',\n          padding: '16px',\n        },\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/create']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <CreateButton />\n          </div>\n        ),\n        create: PostCreate,\n      },\n    ]}\n  />,\n)\n")),(0,o.kt)("h3",{id:"headerprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"headerProps")),(0,o.kt)("p",null,"If you want to customize the header of the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Create/>")," component, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"headerProps")," property."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://ant.design/components/page-header/"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"PageHeader")," documentation from Ant Design for detailed usage. ","\u2192")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},"const { CreateButton } = RefineAntd\n\n// visible-block-start\nimport { Create } from '@pankod/refine-antd'\n\nconst PostCreate: React.FC = () => {\n  return (\n    <Create\n      // highlight-start\n      headerProps={{\n        subTitle: 'This is a subtitle',\n        style: {\n          backgroundColor: 'cornflowerblue',\n          padding: '16px',\n        },\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/create']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <CreateButton />\n          </div>\n        ),\n        create: PostCreate,\n      },\n    ]}\n  />,\n)\n")),(0,o.kt)("h3",{id:"contentprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"contentProps")),(0,o.kt)("p",null,"If you want to customize the content of the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Create/>")," component, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"contentProps")," property."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://ant.design/components/card/"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"Card")," documentation from Ant Design for detailed usage. ","\u2192")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},"const { CreateButton } = RefineAntd\n\n// visible-block-start\nimport { Create } from '@pankod/refine-antd'\n\nconst PostCreate: React.FC = () => {\n  return (\n    <Create\n      // highlight-start\n      contentProps={{\n        style: {\n          backgroundColor: 'cornflowerblue',\n          padding: '16px',\n        },\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/create']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <CreateButton />\n          </div>\n        ),\n        create: PostCreate,\n      },\n    ]}\n  />,\n)\n")),(0,o.kt)("h3",{id:"headerbuttons"},(0,o.kt)("inlineCode",{parentName:"h3"},"headerButtons")),(0,o.kt)("p",null,"You can customize the buttons at the header by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"headerButtons")," property. It accepts ",(0,o.kt)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,o.kt)("inlineCode",{parentName:"p"},"({ defaultButtons }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},"const { CreateButton } = RefineAntd\n\n// visible-block-start\nimport { Create, Button } from '@pankod/refine-antd'\n\nconst PostCreate: React.FC = () => {\n  return (\n    <Create\n      // highlight-start\n      headerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button type=\"primary\">Custom Button</Button>\n        </>\n      )}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/create']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <CreateButton />\n          </div>\n        ),\n        create: PostCreate,\n      },\n    ]}\n  />,\n)\n")),(0,o.kt)("h3",{id:"headerbuttonprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"headerButtonProps")),(0,o.kt)("p",null,"You can customize the wrapper element of the buttons at the header by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"headerButtonProps")," property."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://ant.design/components/space/"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"Space")," documentation from Ant Design for detailed usage. ","\u2192")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},"const { CreateButton } = RefineAntd\n\n// visible-block-start\nimport { Create, Button } from '@pankod/refine-antd'\n\nconst PostCreate: React.FC = () => {\n  return (\n    <Create\n      // highlight-start\n      headerButtonProps={{\n        style: {\n          backgroundColor: 'cornflowerblue',\n          padding: '16px',\n        },\n      }}\n      // highlight-end\n      headerButtons={<Button type=\"primary\">Custom Button</Button>}\n    >\n      <p>Rest of your page here</p>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/create']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <CreateButton />\n          </div>\n        ),\n        create: PostCreate,\n      },\n    ]}\n  />,\n)\n")),(0,o.kt)("h3",{id:"footerbuttons"},(0,o.kt)("inlineCode",{parentName:"h3"},"footerButtons")),(0,o.kt)("p",null,"You can customize the buttons at the footer by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"footerButtons")," property. It accepts ",(0,o.kt)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,o.kt)("inlineCode",{parentName:"p"},"({ defaultButtons }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},"const { CreateButton } = RefineAntd\n\n// visible-block-start\nimport { Create, Button } from '@pankod/refine-antd'\n\nconst PostCreate: React.FC = () => {\n  return (\n    <Create\n      // highlight-start\n      footerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button type=\"primary\">Custom Button</Button>\n        </>\n      )}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/create']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <CreateButton />\n          </div>\n        ),\n        create: PostCreate,\n      },\n    ]}\n  />,\n)\n")),(0,o.kt)("h3",{id:"footerbuttonprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"footerButtonProps")),(0,o.kt)("p",null,"You can customize the wrapper element of the buttons at the footer by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"footerButtonProps")," property."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://ant.design/components/space/"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"Space")," documentation from Ant Design for detailed usage. ","\u2192")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},"const { CreateButton } = RefineAntd\n\n// visible-block-start\nimport { Create, Button } from '@pankod/refine-antd'\n\nconst PostCreate: React.FC = () => {\n  return (\n    <Create\n      // highlight-start\n      footerButtonProps={{\n        style: {\n          // hide-start\n          float: 'right',\n          marginRight: 24,\n          // hide-end\n          backgroundColor: 'cornflowerblue',\n          padding: '16px',\n        },\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/create']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <CreateButton />\n          </div>\n        ),\n        create: PostCreate,\n      },\n    ]}\n  />,\n)\n")),(0,o.kt)("h2",{id:"api-reference"},"API Reference"),(0,o.kt)("h3",{id:"props"},"Props"),(0,o.kt)(c,{module:"@pankod/refine-antd/Create","goBack-default":"`<ArrowLeft />`","headerProps-type":"[`PageHeaderProps`](https://procomponents.ant.design/en-US/components/page-header)",mdxType:"PropsTable"}))}h.isMDXComponent=!0}}]);