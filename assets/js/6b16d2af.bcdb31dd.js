"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[53201],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>c});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),d=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=d(e.components);return r.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=d(a),k=n,c=m["".concat(p,".").concat(k)]||m[k]||u[k]||i;return a?r.createElement(c,o(o({ref:t},s),{},{components:a})):r.createElement(c,o({ref:t},s))}));function c(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=k;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:n,o[1]=l;for(var d=2;d<i;d++)o[d]=a[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}k.displayName="MDXCreateElement"},39839:(e,t,a)=>{a.d(t,{ZP:()=>l});var r=a(87462),n=(a(67294),a(3905));const i={toc:[]},o="wrapper";function l(e){let{components:t,...a}=e;return(0,n.kt)(o,(0,r.Z)({},i,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"refine")," supports many data providers. To include them in your project, you can use ",(0,n.kt)("inlineCode",{parentName:"p"},"npm install [packageName]")," or you can select the preferred data provider with the ",(0,n.kt)("inlineCode",{parentName:"p"},"npm create refine-app@latest projectName")," during the project creation phase with CLI. This will allow you to easily use these data providers in your project."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/simple-rest"},"Simple REST API")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/graphql"},"GraphQL")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/nestjsx-crud"},"NestJS CRUD")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/airtable"},"Airtable")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/strapi"},"Strapi")," - ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/strapi-v4"},"Strapi v4")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/strapi-graphql"},"Strapi GraphQL")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/supabase"},"Supabase")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/hasura"},"Hasura")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/appwrite"},"Appwrite")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/medusa"},"Medusa"))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Community \u2764\ufe0f")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/resulturan/refine-firebase"},"Firebase")," by ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/resulturan"},"rturan29")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/tspvivek/refine-directus"},"Directus")," by ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/tspvivek"},"tspvivek")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/chirdeeptomar/refine-elide-rest"},"Elide")," by ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/chirdeeptomar"},"chirdeeptomar"))),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"If you have created a custom data provider and would like to share it with the community, please don't hesitate to get in touch with us. We would be happy to include it on this page for others to use.")))}l.isMDXComponent=!0},47772:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var r=a(87462),n=(a(67294),a(3905)),i=a(39839);const o={id:"data-provider",title:"Data Provider",sidebar_label:"Data Provider"},l=void 0,p={unversionedId:"api-reference/core/providers/data-provider",id:"api-reference/core/providers/data-provider",title:"Data Provider",description:"The\xa0data provider\xa0acts as a data layer for your app that makes the HTTP requests and encapsulates how the data is retrieved. refine consumes these methods via data hooks.",source:"@site/docs/api-reference/core/providers/data-provider.md",sourceDirName:"api-reference/core/providers",slug:"/api-reference/core/providers/data-provider",permalink:"/docs/api-reference/core/providers/data-provider",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/docs/api-reference/core/providers/data-provider.md",tags:[],version:"current",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{id:"data-provider",title:"Data Provider",sidebar_label:"Data Provider"},sidebar:"someSidebar",previous:{title:"Audit Log Provider",permalink:"/docs/api-reference/core/providers/audit-log-provider"},next:{title:"i18n Provider",permalink:"/docs/api-reference/core/providers/i18n-provider"}},d={},s=[{value:"Usage",id:"usage",level:2},{value:"Multiple Data Providers",id:"multiple-data-providers",level:2},{value:"Methods",id:"methods",level:2},{value:"getList <PropTag required />",id:"getlist-",level:3},{value:"create <PropTag required/>",id:"create-",level:3},{value:"update <PropTag required />",id:"update-",level:3},{value:"deleteOne <PropTag required />",id:"deleteone-",level:3},{value:"getOne <PropTag required />",id:"getone-",level:3},{value:"getApiUrl <PropTag required />",id:"getapiurl-",level:3},{value:"custom",id:"custom",level:3},{value:"Bulk Actions",id:"bulk-actions",level:2},{value:"getMany",id:"getmany",level:3},{value:"createMany",id:"createmany",level:3},{value:"deleteMany",id:"deletemany",level:3},{value:"updateMany",id:"updatemany",level:3},{value:"Error Format",id:"error-format",level:2},{value:"meta Usage",id:"meta-usage",level:2},{value:"Supported Data Providers",id:"supported-data-providers",level:2},{value:"Supported Hooks",id:"supported-hooks",level:2},{value:"FAQ",id:"faq",level:2},{value:"How can I create a custom data provider?",id:"how-can-i-create-a-custom-data-provider",level:3},{value:"How can I customize existing data providers?",id:"how-can-i-customize-existing-data-providers",level:3},{value:"How I can override a specific method of Data Providers?",id:"how-i-can-override-a-specific-method-of-data-providers",level:3}],m=(u="PropTag",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",e)});var u;const k={toc:s},c="wrapper";function h(e){let{components:t,...a}=e;return(0,n.kt)(c,(0,r.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"The\xa0data provider\xa0acts as a data layer for your app that makes the HTTP requests and encapsulates how the data is retrieved. ",(0,n.kt)("strong",{parentName:"p"},"refine")," consumes these methods via data hooks."),(0,n.kt)("p",null,"You don't need to worry about creating data providers from scratch. ",(0,n.kt)("strong",{parentName:"p"},"refine")," offers built-in data provider support for the most popular ",(0,n.kt)("a",{parentName:"p",href:"#supported-data-providers"},"API providers"),". So you can use one of them or you can ",(0,n.kt)("a",{parentName:"p",href:"/docs/tutorial/understanding-dataprovider/create-dataprovider/"},"create your own data provider")," according to your needs."),(0,n.kt)("div",null,(0,n.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/providers/data-provider/tutorial_dataprovider_flog.png"})),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Data hooks use ",(0,n.kt)("a",{parentName:"p",href:"https://tanstack.com/query"},"TanStack Query")," to manage data fetching. It handles important concerns like caching, invalidation, loading states, etc.")),(0,n.kt)("br",null),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("p",null,"To activate the data provider in refine, we have to pass the ",(0,n.kt)("inlineCode",{parentName:"p"},"dataProvider")," to the ",(0,n.kt)("inlineCode",{parentName:"p"},"<Refine />")," component."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { Refine } from "@refinedev/core";\n\nimport dataProvider from "./dataProvider";\n\nconst App: React.FC = () => {\n    return <Refine dataProvider={dataProvider} />;\n};\n')),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/tutorial/understanding-dataprovider/index/"},"Refer to the Data Provider tutorial for more information and usage examples \u2192")),(0,n.kt)("h2",{id:"multiple-data-providers"},"Multiple Data Providers"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"refine")," gives you the ability to use multiple data providers in your app. All you need to do is to pass key, value pairs to the ",(0,n.kt)("inlineCode",{parentName:"p"},"dataProvider")," prop of the ",(0,n.kt)("inlineCode",{parentName:"p"},"<Refine />")," component in a form of value being the data provider and the key being the name of the data provider."),(0,n.kt)("p",null,"Here is an example of using multiple data providers in your app:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode url=http://localhost:3000/posts previewHeight=420px",live:!0,hideCode:!0,url:"http://localhost:3000/posts",previewHeight:"420px"},'setInitialRoutes(["/posts"]);\nsetRefineProps({ Sider: () => null });\n\n// visible-block-start\nimport { Refine, useList } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider from "@refinedev/react-router-v6";\nimport { Layout } from "@refinedev/antd";\n\nimport { BrowserRouter, Routes, Route } from "react-router-dom";\n\nimport { Collapse, Tag } from "antd";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\nconst FINE_FOODS_API_URL = "https://api.finefoods.refine.dev";\n\ninterface IPost {\n    id: number;\n    title: string;\n    status: "published" | "draft" | "rejected";\n}\n\ninterface IProduct {\n    id: number;\n    name: string;\n    price: number;\n}\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <Refine\n                routerProvider={routerProvider}\n                // highlight-start\n                dataProvider={{\n                    default: dataProvider(API_URL),\n                    fineFoods: dataProvider(FINE_FOODS_API_URL),\n                }}\n                // highlight-end\n                resources={[\n                    {\n                        // highlight-next-line\n                        // **refine** will use the `default` data provider for this resource\n                        name: "posts",\n                        list: "/posts",\n                    },\n                    {\n                        name: "products",\n                        meta: {\n                            // highlight-start\n                            // **refine** will use the `fineFoods` data provider for this resource\n                            dataProviderName: "fineFoods",\n                            // highlight-end\n                        },\n                    },\n                ]}\n            >\n                <Routes>\n                    <Route path="/posts" element={<PostList />} />\n                </Routes>\n            </Refine>\n        </BrowserRouter>\n    );\n};\n\nconst PostList: React.FC = () => {\n    const { data: posts } = useList<IPost>({\n        resource: "posts",\n        // highlight-start\n        // Data provider can be selected through props\n        dataProviderName: "default",\n        // highlight-end\n    });\n    // highlight-start\n    // We\'ve defined the data provider for this resource as "fineFoods" in its config so we don\'t need to pass it here\n    const { data: products } = useList<IProduct>({ resource: "products" });\n    // highlight-end\n\n    console.log({\n        posts,\n        products,\n    });\n\n    return (\n        <Collapse defaultActiveKey={["products"]}>\n            <Collapse.Panel header="Posts" key="posts">\n                {posts?.data.map((post) => (\n                    <div\n                        key={post.title}\n                        style={{\n                            display: "flex",\n                            flexDirection: "row",\n                            gap: "0.5rem",\n                            marginBottom: "0.25rem",\n                        }}\n                    >\n                        {post.title}\n                        <Tag>{post.status}</Tag>\n                    </div>\n                ))}\n            </Collapse.Panel>\n            <Collapse.Panel header="Products" key="products">\n                {products?.data.map((product) => (\n                    <div\n                        key={product.name}\n                        style={{\n                            display: "flex",\n                            flexDirection: "row",\n                            gap: "0.5rem",\n                            marginBottom: "0.25rem",\n                        }}\n                    >\n                        {product.name}\n                        <Tag>{product.price / 10}</Tag>\n                    </div>\n                ))}\n            </Collapse.Panel>\n        </Collapse>\n    );\n};\n// visible-block-end\n\nrender(<App />);\n')),(0,n.kt)("admonition",{type:"caution"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("inlineCode",{parentName:"p"},"default")," key is required for the default data provider and it will be used as the default data provider."),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},"const App = () => {\n    return (\n        <Refine\n            dataProvider={{\n                default: defaultDataProvider,\n                example: exampleDataProvider,\n            }}\n        >\n            {/* ... */}\n        </Refine>\n    );\n};\n"))),(0,n.kt)("p",null,"You can pick data providers in two ways:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Using ",(0,n.kt)("inlineCode",{parentName:"strong"},"dataProviderName")," prop in the data hooks and all data-related components/functions."))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},'useTable({\n    dataProviderName: "example",\n});\n')),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Using ",(0,n.kt)("inlineCode",{parentName:"strong"},"meta.dataProviderName")," property in your resource config"))),(0,n.kt)("p",null,"This will be the default data provider for the specified resource but you can still override it in the data hooks and components."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},'const App = () => {\n    return (\n        <Refine\n            dataProvider={{\n                default: defaultDataProvider,\n                example: exampleDataProvider,\n            }}\n            resources={[\n                {\n                    // **refine** will use the `default` data provider for this resource\n                    name: "posts",\n                },\n                {\n                    name: "products",\n                    meta: {\n                        // **refine** will use the `exampleDataProvider` data provider for this resource\n                        dataProviderName: "exampleDataProvider",\n                    },\n                },\n            ]}\n        />\n    );\n};\n')),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("p",null,"Data provider's methods are expected to return a Promise. So, you can use these async methods to ",(0,n.kt)("a",{parentName:"p",href:"/docs/tutorial/understanding-dataprovider/create-dataprovider/"},"create a data provider"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},'import { DataProvider } from "@refinedev/core";\n\nconst dataProvider: DataProvider = {\n    // required methods\n     ({\n        resource,\n        pagination,\n        sorters,\n        filters,\n        meta,\n    }) => Promise,\n    create: ({ resource, variables, meta }) => Promise,\n    update: ({ resource, id, variables, meta }) => Promise,\n    deleteOne: ({ resource, id, variables, meta }) => Promise,\n    getOne: ({ resource, id, meta }) => Promise,\n    getApiUrl: () => "",\n    // optional methods\n    getMany: ({ resource, ids, meta }) => Promise,\n    createMany: ({ resource, variables, meta }) => Promise,\n    deleteMany: ({ resource, ids, variables, meta }) => Promise,\n    updateMany: ({ resource, ids, variables, meta }) => Promise,\n    custom: ({\n        url,\n        method,\n        filters,\n        sorters,\n        payload,\n        query,\n        headers,\n        meta,\n    }) => Promise,\n};\n')),(0,n.kt)("admonition",{type:"info-tip"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("strong",{parentName:"p"},"refine")," consumes data provider methods using ",(0,n.kt)("a",{parentName:"p",href:"#supported-hooks"},"data hooks"),"."),(0,n.kt)("p",{parentName:"admonition"},"Data hooks are used to operate CRUD actions like creating a new record, listing a resource or deleting a record, etc.")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/tutorial/understanding-dataprovider/index/"},"Refer to the Data Provider tutorial for more information and usage examples \u2192")),(0,n.kt)("h3",{id:"getlist-"},"getList ",(0,n.kt)(m,{required:!0,mdxType:"PropTag"})),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"getList")," method is used to get a list of resources with sorting, filtering, and pagination features.\nIt takes ",(0,n.kt)("inlineCode",{parentName:"p"},"resource"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"sorters"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"pagination"),", and, ",(0,n.kt)("inlineCode",{parentName:"p"},"filters")," as parameters and returns ",(0,n.kt)("inlineCode",{parentName:"p"},"data")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"total"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"refine")," will consume this ",(0,n.kt)("inlineCode",{parentName:"p"},"getList")," method using the ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useList/"},(0,n.kt)("inlineCode",{parentName:"a"},"useList"))," or ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useInfiniteList/"},(0,n.kt)("inlineCode",{parentName:"a"},"useInfiniteList"))," data hook."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"getList: async ({ resource, pagination, sorters, filters, meta }) => {\n    const { current, pageSize, mode } = pagination;\n    const { field, order } = sorters;\n    const { field, operator, value } = filters;\n\n    // You can handle the request according to your API requirements.\n\n    return {\n        data,\n        total,\n    };\n};\n")),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("inlineCode",{parentName:"p"},"getList")," also can support cursor-based pagination. Refer to ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useInfiniteList/#how-to-use-cursor-based-pagination"},"this example")," for more information.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameter Types:")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"resource"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"pagination?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences/#pagination"},(0,n.kt)("inlineCode",{parentName:"a"},"Pagination")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"sorters?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences/#crudsorting"},(0,n.kt)("inlineCode",{parentName:"a"},"CrudSorting")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"filters?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences/#crudfilters"},(0,n.kt)("inlineCode",{parentName:"a"},"CrudFilters")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"meta?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences/#metadataquery"},(0,n.kt)("inlineCode",{parentName:"a"},"MetaDataQuery")))))),(0,n.kt)("h3",{id:"create-"},"create ",(0,n.kt)(m,{required:!0,mdxType:"PropTag"})),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"create")," method creates a new record with the ",(0,n.kt)("inlineCode",{parentName:"p"},"resource")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"variables")," parameters."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"refine")," will consume this ",(0,n.kt)("inlineCode",{parentName:"p"},"create")," method using the ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useCreate/"},(0,n.kt)("inlineCode",{parentName:"a"},"useCreate"))," data hook."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"create: async ({ resource, variables, meta }) => {\n    // You can handle the request according to your API requirements.\n\n    return {\n        data,\n    };\n};\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameter Types")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Default"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"resource"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"variables"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"TVariables")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"{}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"meta?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences/#metadataquery"},(0,n.kt)("inlineCode",{parentName:"a"},"MetaDataQuery"))),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useCreate#type-parameters"},(0,n.kt)("inlineCode",{parentName:"a"},"useCreate"))," to type ",(0,n.kt)("inlineCode",{parentName:"p"},"variables"),".")),(0,n.kt)("h3",{id:"update-"},"update ",(0,n.kt)(m,{required:!0,mdxType:"PropTag"})),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"update")," method updates the record with the ",(0,n.kt)("inlineCode",{parentName:"p"},"resource"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"id"),", and, ",(0,n.kt)("inlineCode",{parentName:"p"},"variables")," parameters."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"refine")," will consume this ",(0,n.kt)("inlineCode",{parentName:"p"},"update")," method using the ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useUpdate/"},(0,n.kt)("inlineCode",{parentName:"a"},"useUpdate"))," data hook."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"update: async ({ resource, id, variables, meta }) => {\n    // You can handle the request according to your API requirements.\n\n    return {\n        data,\n    };\n};\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameter Types:")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Default"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"resource"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"id"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences/#basekey"},"BaseKey")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"variables"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"TVariables")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"{}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"meta?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences/#metadataquery"},(0,n.kt)("inlineCode",{parentName:"a"},"MetaDataQuery"))),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useUpdate#type-parameters"},(0,n.kt)("inlineCode",{parentName:"a"},"useUpdate"))," to type ",(0,n.kt)("inlineCode",{parentName:"p"},"variables"),".")),(0,n.kt)("h3",{id:"deleteone-"},"deleteOne ",(0,n.kt)(m,{required:!0,mdxType:"PropTag"})),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"deleteOne")," method delete the record with the ",(0,n.kt)("inlineCode",{parentName:"p"},"resource")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"id")," parameters."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"refine")," will consume this ",(0,n.kt)("inlineCode",{parentName:"p"},"deleteOne")," method using the ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useDelete/"},(0,n.kt)("inlineCode",{parentName:"a"},"useDelete"))," data hook."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"deleteOne: async ({ resource, id, variables, meta }) => {\n    // You can handle the request according to your API requirements.\n\n    return {\n        data,\n    };\n};\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameter Types:")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Default"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"resource"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"id"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences/#basekey"},"BaseKey")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"variables"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"TVariables[]")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"{}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"meta?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences/#metadataquery"},(0,n.kt)("inlineCode",{parentName:"a"},"MetaDataQuery"))),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useDelete/"},(0,n.kt)("inlineCode",{parentName:"a"},"useDelete"))," to type ",(0,n.kt)("inlineCode",{parentName:"p"},"variables"),".")),(0,n.kt)("h3",{id:"getone-"},"getOne ",(0,n.kt)(m,{required:!0,mdxType:"PropTag"})),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"getOne")," method gets the record with the ",(0,n.kt)("inlineCode",{parentName:"p"},"resource")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"id")," parameters."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"refine")," will consume this ",(0,n.kt)("inlineCode",{parentName:"p"},"getOne")," method using the ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useOne/"},(0,n.kt)("inlineCode",{parentName:"a"},"useOne"))," data hook."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"getOne: async ({ resource, id, meta }) => {\n    // You can handle the request according to your API requirements.\n\n    return {\n        data,\n    };\n};\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameter Types:")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Default"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"resource"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"id"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences/#basekey"},"BaseKey")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"meta?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences/#metadataquery"},(0,n.kt)("inlineCode",{parentName:"a"},"MetaDataQuery"))),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("h3",{id:"getapiurl-"},"getApiUrl ",(0,n.kt)(m,{required:!0,mdxType:"PropTag"})),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"getApiUrl")," method returns the ",(0,n.kt)("inlineCode",{parentName:"p"},"apiUrl")," value."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"refine")," will consume this ",(0,n.kt)("inlineCode",{parentName:"p"},"getApiUrl")," method using the ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useApiUrl/"},(0,n.kt)("inlineCode",{parentName:"a"},"useApiUrl"))," data hook."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},'import { DataProvider } from "@refinedev/core";\n\nexport const dataProvider = (apiUrl: string): DataProvider => ({\n    getApiUrl: () => apiUrl,\n    // ...\n});\n')),(0,n.kt)("h3",{id:"custom"},"custom"),(0,n.kt)("p",null,"An optional method named ",(0,n.kt)("inlineCode",{parentName:"p"},"custom")," can be added to handle requests with custom parameters like URL, CRUD methods, and configurations.\nIt's useful if you have non-standard REST API endpoints or want to make a connection with external resources."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"refine")," will consume this ",(0,n.kt)("inlineCode",{parentName:"p"},"custom")," method using the ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useCustom/"},(0,n.kt)("inlineCode",{parentName:"a"},"useCustom"))," data hook."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"custom: async ({\n    url,\n    method,\n    filters,\n    sorters,\n    payload,\n    query,\n    headers,\n    meta,\n}) => {\n    // You can handle the request according to your API requirements.\n\n    return {\n        data,\n    };\n};\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameter Types")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"url"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"method"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"get"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"delete"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"head"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"options"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"post"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"put"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"patch"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"sorters?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences/#crudsorting"},(0,n.kt)("inlineCode",{parentName:"a"},"CrudSorting")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"filters?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences/#crudfilters"},(0,n.kt)("inlineCode",{parentName:"a"},"CrudFilters")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"payload?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"{}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"query?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"{}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"headers?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"{}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"meta?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences/#metadataquery"},(0,n.kt)("inlineCode",{parentName:"a"},"MetaDataQuery")))))),(0,n.kt)("h2",{id:"bulk-actions"},"Bulk Actions"),(0,n.kt)("p",null,"Bulk actions are actions that can be performed on multiple items at once. Performing bulk actions is a common pattern in admin panels. If your API supports bulk actions, you can implement them in your data provider."),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"Bulk operations are a way to perform many database operations at once, improving speed and efficiency. They can be used for data ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/import-export/useImport/"},(0,n.kt)("inlineCode",{parentName:"a"},"import"))," and ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/import-export/useExport/"},(0,n.kt)("inlineCode",{parentName:"a"},"export")),", and have the added benefit of being atomic, meaning that they are treated as a single unit.")),(0,n.kt)("h3",{id:"getmany"},"getMany"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"getMany")," method gets the records with the ",(0,n.kt)("inlineCode",{parentName:"p"},"resource")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"ids")," parameters. Implementation of this method is optional. If you don't implement it, refine will use ",(0,n.kt)("a",{parentName:"p",href:"#getone"},(0,n.kt)("inlineCode",{parentName:"a"},"getOne"))," method to handle multiple requests."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"refine")," will consume this ",(0,n.kt)("inlineCode",{parentName:"p"},"getMany")," method using the ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useMany/"},(0,n.kt)("inlineCode",{parentName:"a"},"useMany"))," data hook."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"getMany: async ({ resource, ids, meta }) => {\n    // You can handle the request according to your API requirements.\n\n    return {\n        data,\n    };\n};\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameter Types:")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Default"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"resource"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"ids"),(0,n.kt)("td",{parentName:"tr",align:null},"[",(0,n.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences/#basekey"},"BaseKey"),"]"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"meta?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences/#metadataquery"},(0,n.kt)("inlineCode",{parentName:"a"},"MetaDataQuery"))),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("h3",{id:"createmany"},"createMany"),(0,n.kt)("p",null,"This method allows us to create multiple items in a resource. Implementation of this method is optional. If you don't implement it, refine will use ",(0,n.kt)("a",{parentName:"p",href:"#create"},(0,n.kt)("inlineCode",{parentName:"a"},"create"))," method to handle multiple requests."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"refine")," will consume this ",(0,n.kt)("inlineCode",{parentName:"p"},"createMany")," method using the ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useCreateMany/"},(0,n.kt)("inlineCode",{parentName:"a"},"useCreateMany"))," data hook."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"createMany: async ({ resource, variables, meta }) => {\n    // You can handle the request according to your API requirements.\n\n    return {\n        data,\n    };\n};\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameter Types:")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Default"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"resource"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"variables"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"TVariables[]")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"{}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"meta?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences/#metadataquery"},(0,n.kt)("inlineCode",{parentName:"a"},"MetaDataQuery"))),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useCreateMany/"},(0,n.kt)("inlineCode",{parentName:"a"},"useCreateMany"))," to type ",(0,n.kt)("inlineCode",{parentName:"p"},"variables"),".")),(0,n.kt)("h3",{id:"deletemany"},"deleteMany"),(0,n.kt)("p",null,"This method allows us to delete multiple items in a resource. Implementation of this method is optional. If you don't implement it, refine will use ",(0,n.kt)("a",{parentName:"p",href:"#deleteone"},(0,n.kt)("inlineCode",{parentName:"a"},"deleteOne"))," method to handle multiple requests."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"refine")," will consume this ",(0,n.kt)("inlineCode",{parentName:"p"},"deleteMany")," method using the ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useDeleteMany/"},(0,n.kt)("inlineCode",{parentName:"a"},"useDeleteMany"))," data hook."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"deleteMany: async ({ resource, ids, variables, meta }) => {\n    // You can handle the request according to your API requirements.\n\n    return {\n        data,\n    };\n};\n")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Default"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"resource"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"ids"),(0,n.kt)("td",{parentName:"tr",align:null},"[",(0,n.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences/#basekey"},"BaseKey"),"]"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"variables"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"TVariables[]")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"{}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"meta?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences/#metadataquery"},(0,n.kt)("inlineCode",{parentName:"a"},"MetaDataQuery"))),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useDeleteMany/"},(0,n.kt)("inlineCode",{parentName:"a"},"useDeleteMany"))," to type ",(0,n.kt)("inlineCode",{parentName:"p"},"variables"),".")),(0,n.kt)("h3",{id:"updatemany"},"updateMany"),(0,n.kt)("p",null,"This method allows us to update multiple items in a resource. Implementation of this method is optional. If you don't implement it, refine will use ",(0,n.kt)("a",{parentName:"p",href:"#update"},(0,n.kt)("inlineCode",{parentName:"a"},"update"))," method to handle multiple requests."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"refine")," will consume this ",(0,n.kt)("inlineCode",{parentName:"p"},"updateMany")," method using the ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useUpdateMany/"},(0,n.kt)("inlineCode",{parentName:"a"},"useUpdateMany"))," data hook."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"updateMany: async ({ resource, ids, variables, meta }) => {\n    // You can handle the request according to your API requirements.\n\n    return {\n        data,\n    };\n};\n")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Default"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"resource"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"ids"),(0,n.kt)("td",{parentName:"tr",align:null},"[",(0,n.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences/#basekey"},"BaseKey"),"]"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"variables"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"TVariables[]")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"{}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"meta?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences/#metadataquery"},(0,n.kt)("inlineCode",{parentName:"a"},"MetaDataQuery"))),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useUpdateMany/"},(0,n.kt)("inlineCode",{parentName:"a"},"useUpdateMany"))," to type ",(0,n.kt)("inlineCode",{parentName:"p"},"variables"),".")),(0,n.kt)("h2",{id:"error-format"},"Error Format"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"refine")," expects errors to be extended from ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences/#httperror"},(0,n.kt)("inlineCode",{parentName:"a"},"HttpError")),"."),(0,n.kt)("p",null,"Here is a basic example of how to implement error handling in your data provider."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},'import { DataProvider, HttpError } from "@refinedev/core";\n\nexport const dataProvider = (apiUrl: string): DataProvider => ({\n    getOne: async ({ resource, id }) => {\n        try {\n            const response = await fetch(\n                `https://api.example.com/${resource}/${id}`,\n            );\n\n            // highlight-start\n            if (!response.ok) {\n                const error: HttpError = {\n                    message: response.statusText,\n                    statusCode: response.status,\n                };\n                return Promise.reject(error);\n            }\n            // highlight-end\n\n            return {\n                data: response.data,\n            };\n        } catch (error) {\n            // highlight-start\n            const error: HttpError = {\n                message: error?.message || "Something went wrong",\n                statusCode: error?.status || 500,\n            };\n            return Promise.reject(error);\n            // highlight-end\n        }\n    },\n    // ...\n});\n')),(0,n.kt)("p",null,"Also, Axios interceptor can be used to transform the error from the response before Axios returns the response to your code. Interceptors are methods that are triggered before the main method."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},'// highlight-start\nimport axios from "axios";\nimport { DataProvider, HttpError } from "@refinedev/core";\n// highlight-end\nimport { stringify } from "query-string";\n\n// highlight-start\n// Error handling with axios interceptors\nconst axiosInstance = axios.create();\n\naxiosInstance.interceptors.response.use(\n    (response) => {\n        return response;\n    },\n    (error) => {\n        const customError: HttpError = {\n            ...error,\n            message: error.response?.data?.message,\n            statusCode: error.response?.status,\n        };\n\n        return Promise.reject(customError);\n    },\n);\n// highlight-end\n\nexport const dataProvider = (apiUrl: string): DataProvider => ({\n    // Methods\n});\n')),(0,n.kt)("h2",{id:"meta-usage"},"meta Usage"),(0,n.kt)("p",null,"When using APIs, you may wish to include custom parameters, such as a custom header. To accomplish this, you can utilize the ",(0,n.kt)("inlineCode",{parentName:"p"},"meta")," field, which allows the sent parameter to be easily accessed by the data provider."),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"The ",(0,n.kt)("inlineCode",{parentName:"p"},"meta")," parameter can be used in all data, form, and table hooks.")),(0,n.kt)("p",null,"Here is an example of how to send a custom header parameter to the ",(0,n.kt)("inlineCode",{parentName:"p"},"getOne")," method using ",(0,n.kt)("inlineCode",{parentName:"p"},"meta"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Send a custom header parameter to the ",(0,n.kt)("a",{parentName:"li",href:"#getone"},(0,n.kt)("inlineCode",{parentName:"a"},"getOne"))," method using ",(0,n.kt)("inlineCode",{parentName:"li"},"meta"),".")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="post/edit.tsx"',title:'"post/edit.tsx"'},'import { useOne } from "@refinedev/core";\n\nuseOne({\n    resource: "post",\n    id: "1",\n    meta: {\n        headers: {\n            "x-custom-header": "hello world",\n        },\n    },\n});\n')),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Get the ",(0,n.kt)("inlineCode",{parentName:"li"},"meta")," parameter from the data provider.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},'import { DataProvider } from "@refinedev/core";\n\nexport const dataProvider = (apiUrl: string): DataProvider => ({\n  ...\n  getOne: async ({ resource, id, variables, meta }) => {\n    // highlight-next-line\n    const { headers } = meta;\n    const url = `${apiUrl}/${resource}/${id}`;\n\n    // highlight-start\n    httpClient.defaults.headers = {\n      ...headers,\n    };\n    // highlight-end\n\n    const { data } = await httpClient.get(url, variables);\n\n    return {\n      data,\n    };\n  },\n});\n')),(0,n.kt)("h2",{id:"supported-data-providers"},"Supported Data Providers"),(0,n.kt)(i.ZP,{mdxType:"SupportedDataProviders"}),(0,n.kt)("h2",{id:"supported-hooks"},"Supported Hooks"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"refine")," will consume:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#getlist"},(0,n.kt)("inlineCode",{parentName:"a"},"getList"))," method using the ",(0,n.kt)("a",{parentName:"li",href:"/docs/api-reference/core/hooks/data/useList/"},(0,n.kt)("inlineCode",{parentName:"a"},"useList"))," or ",(0,n.kt)("a",{parentName:"li",href:"/docs/api-reference/core/hooks/data/useInfiniteList/"},(0,n.kt)("inlineCode",{parentName:"a"},"useInfiniteList"))," data hook."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#create"},(0,n.kt)("inlineCode",{parentName:"a"},"create"))," method using the ",(0,n.kt)("a",{parentName:"li",href:"/docs/api-reference/core/hooks/data/useCreate/"},(0,n.kt)("inlineCode",{parentName:"a"},"useCreate"))," data hook."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#update"},(0,n.kt)("inlineCode",{parentName:"a"},"update"))," method using the ",(0,n.kt)("a",{parentName:"li",href:"/docs/api-reference/core/hooks/data/useUpdate/"},(0,n.kt)("inlineCode",{parentName:"a"},"useUpdate"))," data hook."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#deleteone"},(0,n.kt)("inlineCode",{parentName:"a"},"deleteOne"))," method using the ",(0,n.kt)("a",{parentName:"li",href:"/docs/api-reference/core/hooks/data/useDelete/"},(0,n.kt)("inlineCode",{parentName:"a"},"useDeleteOne"))," data hook."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#getone"},(0,n.kt)("inlineCode",{parentName:"a"},"getOne"))," method using the ",(0,n.kt)("a",{parentName:"li",href:"/docs/api-reference/core/hooks/data/useOne/"},(0,n.kt)("inlineCode",{parentName:"a"},"useOne"))," data hook."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#getapiurl"},(0,n.kt)("inlineCode",{parentName:"a"},"getApiUrl"))," method using the ",(0,n.kt)("a",{parentName:"li",href:"/docs/api-reference/core/hooks/data/useApiUrl/"},(0,n.kt)("inlineCode",{parentName:"a"},"useApiUrl"))," data hook."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#custom"},(0,n.kt)("inlineCode",{parentName:"a"},"custom"))," method using the ",(0,n.kt)("a",{parentName:"li",href:"/docs/api-reference/core/hooks/data/useCustom/"},(0,n.kt)("inlineCode",{parentName:"a"},"useCustom"))," data hook."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#getmany"},(0,n.kt)("inlineCode",{parentName:"a"},"getMany"))," method using the ",(0,n.kt)("a",{parentName:"li",href:"/docs/api-reference/core/hooks/data/useMany/"},(0,n.kt)("inlineCode",{parentName:"a"},"useMany"))," data hook."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#createmany"},(0,n.kt)("inlineCode",{parentName:"a"},"createMany"))," method using the ",(0,n.kt)("a",{parentName:"li",href:"/docs/api-reference/core/hooks/data/useCreateMany/"},(0,n.kt)("inlineCode",{parentName:"a"},"useCreateMany"))," data hook."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#deletemany"},(0,n.kt)("inlineCode",{parentName:"a"},"deleteMany"))," method using the ",(0,n.kt)("a",{parentName:"li",href:"/docs/api-reference/core/hooks/data/useDeleteMany/"},(0,n.kt)("inlineCode",{parentName:"a"},"useDeleteMany"))," data hook."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#updatemany"},(0,n.kt)("inlineCode",{parentName:"a"},"updateMany"))," method using the ",(0,n.kt)("a",{parentName:"li",href:"/docs/api-reference/core/hooks/data/useUpdateMany/"},(0,n.kt)("inlineCode",{parentName:"a"},"useUpdateMany"))," data hook.")),(0,n.kt)("h2",{id:"faq"},"FAQ"),(0,n.kt)("h3",{id:"how-can-i-create-a-custom-data-provider"},"How can I create a custom data provider?"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/tutorial/understanding-dataprovider/create-dataprovider/"},'Refer to the "Create Data Provider From Scratch" section in the tutorial for more information \u2192')),(0,n.kt)("h3",{id:"how-can-i-customize-existing-data-providers"},"How can I customize existing data providers?"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/tutorial/understanding-dataprovider/swizzle/"},'Refer to the "Create Data Provider with Swizzle" section in the tutorial for more information \u2192')),(0,n.kt)("h3",{id:"how-i-can-override-a-specific-method-of-data-providers"},"How I can override a specific method of Data Providers?"),(0,n.kt)("p",null,"In some cases, you may need to override the method of ",(0,n.kt)("strong",{parentName:"p"},"refine")," data providers. The simplest way to do this is to use the ",(0,n.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"},"Spread syntax")),(0,n.kt)("p",null,"For example, Let's override the ",(0,n.kt)("inlineCode",{parentName:"p"},"update")," function of the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/next/packages/simple-rest"},(0,n.kt)("inlineCode",{parentName:"a"},"@refinedev/simple-rest")),". ",(0,n.kt)("inlineCode",{parentName:"p"},"@refinedev/simple-rest")," uses the ",(0,n.kt)("inlineCode",{parentName:"p"},"PATCH")," HTTP method for ",(0,n.kt)("inlineCode",{parentName:"p"},"update"),", let's change it to ",(0,n.kt)("inlineCode",{parentName:"p"},"PUT")," without forking the whole data provider."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},'import dataProvider from "@refinedev/simple-rest";\n\nconst simpleRestProvider = dataProvider("API_URL");\nconst myDataProvider = {\n    ...simpleRestProvider,\n    update: async ({ resource, id, variables }) => {\n        const url = `${apiUrl}/${resource}/${id}`;\n\n        const { data } = await httpClient.put(url, variables);\n\n        return {\n            data,\n        };\n    },\n};\n\n<Refine dataProvider={myDataProvider}>{/* ... */}</Refine>;\n')))}h.isMDXComponent=!0}}]);