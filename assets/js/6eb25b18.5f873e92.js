"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[83364],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,h=d["".concat(l,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(h,s(s({ref:t},p),{},{components:n})):r.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:a,s[1]=i;for(var u=2;u<o;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},45764:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>k,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const o={id:"create-authprovider",title:"2. Create Auth Provider From Scratch",tutorial:{prev:"tutorial/understanding-authprovider/index",next:"tutorial/understanding-authprovider/{preferredUI}/auth-pages"}},s=void 0,i={unversionedId:"tutorial/understanding-authprovider/create-authprovider",id:"tutorial/understanding-authprovider/create-authprovider",title:"2. Create Auth Provider From Scratch",description:"This section will show you how to create an auth provider from scratch. We'll use mock data to be able to focus on the auth provider methods. When you understand the logic of auth provider, you can easly integrate third-party authentication services or your own custom auth provider which includes many possible strategies like JWT, OAuth, etc.",source:"@site/docs/tutorial/5-understanding-authprovider/1-create-authprovider.md",sourceDirName:"tutorial/5-understanding-authprovider",slug:"/tutorial/understanding-authprovider/create-authprovider",permalink:"/docs/tutorial/understanding-authprovider/create-authprovider",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/docs/tutorial/5-understanding-authprovider/1-create-authprovider.md",tags:[],version:"current",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",sidebarPosition:1,frontMatter:{id:"create-authprovider",title:"2. Create Auth Provider From Scratch",tutorial:{prev:"tutorial/understanding-authprovider/index",next:"tutorial/understanding-authprovider/{preferredUI}/auth-pages"}}},l={},u=[{value:"Create Mock Auth Provider",id:"create-mock-auth-provider",level:2},{value:"Required Methods",id:"required-methods",level:2},{value:"login",id:"login",level:3},{value:"check",id:"check",level:3},{value:"logout",id:"logout",level:3},{value:"onError",id:"onerror",level:3},{value:"Optional Methods",id:"optional-methods",level:2},{value:"getPermissions",id:"getpermissions",level:3},{value:"getIdentity",id:"getidentity",level:3},{value:"register",id:"register",level:3},{value:"forgotPassword",id:"forgotpassword",level:3},{value:"updatePassword",id:"updatepassword",level:3},{value:"Setting Authorization Credentials",id:"setting-authorization-credentials",level:2},{value:"Implementing Refresh Token Mechanism",id:"implementing-refresh-token-mechanism",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},d=p("Checklist"),c=p("ChecklistItem"),m={toc:u},h="wrapper";function k(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This section will show you how to create an auth provider from scratch. We'll use mock data to be able to focus on the auth provider methods. When you understand the logic of auth provider, you can easly integrate third-party authentication services or your own custom auth provider which includes many possible strategies like JWT, OAuth, etc."),(0,a.kt)("h2",{id:"create-mock-auth-provider"},"Create Mock Auth Provider"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Create a new file named ",(0,a.kt)("inlineCode",{parentName:"p"},"authProvider.ts")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"src")," folder and add the following code:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},"import type { AuthBindings } from '@refinedev/core'\n\nconst authProvider: AuthBindings = {\n  login: async (params: any) => ({}),\n  check: async (params: any) => ({}),\n  logout: async (params: any) => ({}),\n  onError: async (params: any) => ({}),\n}\n\nexport default authProvider\n")),(0,a.kt)("p",{parentName:"li"},"We created a mock auth provider. It has all the required methods. But, they don't do anything. We'll add the logic to these methods in the next.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Now, we need to pass the ",(0,a.kt)("inlineCode",{parentName:"p"},"authProvider")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Refine/>")," component. Open ",(0,a.kt)("inlineCode",{parentName:"p"},"App.tsx")," file and add the related code:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},"// ---\nimport authProvider from './authProvider'\n;<Refine\n  // ---\n  authProvider={authProvider}\n/>\n")),(0,a.kt)("p",{parentName:"li"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"authProvider")," is not required for the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Refine/>")," component. If you don't pass it, your app will work without authentication. But, you won't be able to use the auth hooks."))),(0,a.kt)("br",null),(0,a.kt)("p",null,"We created a mock auth provider and passed it to the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Refine/>")," component. Now, we'll add the logic to the auth provider methods."),(0,a.kt)("h2",{id:"required-methods"},"Required Methods"),(0,a.kt)("h3",{id:"login"},"login"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"login")," method is used to authenticate users. It expects to return a resolved Promise with the following type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type AuthActionResponse = {\n  success: boolean\n  redirectTo?: string\n  error?: Error\n  [key: string]: unknown\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"success"),": Determines whether the operation is successful or not."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"redirectTo"),": The path of the page that the user will be redirected to after the operation is completed."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"error"),": An object containing details about any errors encountered during the operation."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"[key: string]"),": Any additional data you wish to include in the response, keyed by a string identifier.")),(0,a.kt)("p",null,"We'll use mock data to authenticate users. So, we'll create a mock user list and check if the user exists in the list. If the user exists, we'll save the user data to the local storage and resolve the Promise with ",(0,a.kt)("inlineCode",{parentName:"p"},"success: true"),". Otherwise, we'll resolve the Promise with ",(0,a.kt)("inlineCode",{parentName:"p"},"success: false"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},"import { AuthBindings } from '@refinedev/core'\n\nconst mockUsers = [{ email: 'john@mail.com' }, { email: 'jane@mail.com' }]\n\nconst authProvider: AuthBindings = {\n  login: async ({ email, password }) => {\n    // Suppose we actually send a request to the back end here.\n    const user = mockUsers.find((item) => item.email === email)\n\n    if (user) {\n      localStorage.setItem('auth', JSON.stringify(user))\n      return {\n        success: true,\n        redirectTo: '/',\n      }\n    }\n\n    return {\n      success: false,\n      error: {\n        message: 'Login Error',\n        name: 'Invalid email or password',\n      },\n    }\n  },\n  // ---\n}\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"Invoking the ",(0,a.kt)("inlineCode",{parentName:"p"},"useLogin")," hook's mutation will call the ",(0,a.kt)("inlineCode",{parentName:"p"},"login")," method, passing in the mutation's parameters as arguments. This means the parameters for the ",(0,a.kt)("inlineCode",{parentName:"p"},"useLogin")," hook's mutation must match the parameters of the login method."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/auth/useLogin/"},"Refer to the ",(0,a.kt)("inlineCode",{parentName:"a"},"useLogin")," documentation for more information ","\u2192")),(0,a.kt)("p",null,"For example, if we call the ",(0,a.kt)("inlineCode",{parentName:"p"},"useLogin")," hook's mutation like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useLogin } from '@refinedev/core'\n\nconst { mutate } = useLogin()\n\nmutate({ email: 'john@mail.com', password: '123456' })\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"login")," method will get the mutation's parameters as arguments."),(0,a.kt)("p",null,"At this point, we can authenticate users. But, we can't check if the user is authenticated or not when the user refreshes the page or navigates to another page. We'll add the logic to the ",(0,a.kt)("inlineCode",{parentName:"p"},"check")," method to solve this problem."),(0,a.kt)("br",null),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("strong",null,"Can I pass any parameters to the ",(0,a.kt)("code",null,"login")," method?")),(0,a.kt)("p",null,"Yes, you can pass any parameters to the ",(0,a.kt)("inlineCode",{parentName:"p"},"login")," method. ",(0,a.kt)("inlineCode",{parentName:"p"},"useLogin")," hook's mutation will pass the mutation's parameters to the ",(0,a.kt)("inlineCode",{parentName:"p"},"login")," method without any type constraints."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const { mutate } = useLogin<{\n  username: string\n  password: string\n  foo: string\n  remember: boolean\n}>()\n"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("strong",null,"How can I redirect the user to a specific page after login?")),(0,a.kt)("p",null,"If you want to redirect the user to a specific page, you can resolve the Promise with an object that has ",(0,a.kt)("inlineCode",{parentName:"p"},"redirectTo")," property."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const authProvider: AuthBindings = {\n  // ---\n  login: async () => {\n    // ---\n    if (user) {\n      return {\n        success: true,\n        redirectTo: '/custom-page',\n      }\n    } else {\n      return {\n        success: false,\n        redirectTo: '/register',\n      }\n    }\n  },\n}\n")),(0,a.kt)("p",null,"Also, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"useLogin")," hook's for this purpose."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const { mutate } = useLogin()\n\nmutate({ redirectPath: '/custom-page' })\n")),(0,a.kt)("p",null,"Then, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"redirectPath")," parameter in the ",(0,a.kt)("inlineCode",{parentName:"p"},"login")," method to redirect the user to the specific page."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const authProvider: AuthBindings = {\n  // ---\n  login: async ({ redirectPath }) => {\n    //---\n    return {\n      success: false,\n      redirectTo: redirectPath,\n    }\n  },\n}\n")),(0,a.kt)("p",null,"If you don't want to redirect the user anywhere, you can resolve the ",(0,a.kt)("inlineCode",{parentName:"p"},"login")," method's Promise with ",(0,a.kt)("inlineCode",{parentName:"p"},"redirectTo: undefined"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const authProvider: AuthBindings = {\n  // ---\n  login: async () => {\n    // ---\n    return {\n      success: false,\n      redirectTo: undefined,\n    }\n  },\n}\n"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("strong",null,"How can I customize the error message?")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," automatically displays an error notification when the ",(0,a.kt)("inlineCode",{parentName:"p"},"login")," method resolves the Promise with ",(0,a.kt)("inlineCode",{parentName:"p"},"success: false"),". If you want to customize the error message, you can resolve the Promise with an ",(0,a.kt)("inlineCode",{parentName:"p"},"error")," object that has ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"message")," properties."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},"import { AuthBindings } from '@refinedev/core'\n\nconst authProvider: AuthBindings = {\n  login: async ({ email, password }) => {\n    // ---\n    return {\n      success: false,\n      error: {\n        name: 'Login Failed!',\n        message:\n          \"The email or password that you've entered doesn't match any account.\",\n      },\n    }\n  },\n  // ---\n}\n"))),(0,a.kt)("h3",{id:"check"},"check"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"check")," method is used to check if the user is authenticated. Internally, it is called when the user navigates to a page that requires authentication."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"check")," method expects to return a resolved Promise with the following type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type CheckResponse = {\n  authenticated: boolean\n  redirectTo?: string\n  logout?: boolean\n  error?: Error\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"authenticated"),": A boolean value indicating whether the user is authenticated or not."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"redirectTo"),": A string value indicating the URL to redirect to if authentication is required."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"logout"),": A boolean value indicating whether the user should be logged out."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"error"),": An Error object representing any errors that may have occurred during the check.")),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"login")," method, we've saved the user data to the local storage when the user logs in. So, we'll check if the user data exists in the local storage to determine if the user is authenticated."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},"import { AuthBindings } from '@refinedev/core'\n\nconst authProvider: AuthBindings = {\n  // ---\n  check: async () => {\n    const user = localStorage.getItem('auth')\n\n    if (user) {\n      return {\n        authenticated: true,\n      }\n    }\n\n    return {\n      authenticated: false,\n      logout: true,\n      redirectTo: '/login',\n      error: {\n        message: 'Check failed',\n        name: 'Unauthorized',\n      },\n    }\n  },\n  // ---\n}\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"Invoking the ",(0,a.kt)("inlineCode",{parentName:"p"},"useIsAuthenticated")," hook will call the ",(0,a.kt)("inlineCode",{parentName:"p"},"check")," method. If ",(0,a.kt)("inlineCode",{parentName:"p"},"check")," method resolves a data, it will be available in the ",(0,a.kt)("inlineCode",{parentName:"p"},"useIsAuthenticated")," hook's ",(0,a.kt)("inlineCode",{parentName:"p"},"data")," property."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/auth/useIsAuthenticated/"},"Refer to the ",(0,a.kt)("inlineCode",{parentName:"a"},"useIsAuthenticated")," documentation for more information ","\u2192")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useIsAuthenticated } from '@refinedev/core'\n\nconst { data, isSuccess, isLoading, isError, refetch } = useIsAuthenticated()\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"<Authenticated>")," component makes use of the ",(0,a.kt)("inlineCode",{parentName:"p"},"useIsAuthenticated")," hook. It allows you to render components only if the user is authenticated."),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/components/auth/authenticated/"},"Refer to the ",(0,a.kt)("inlineCode",{parentName:"a"},"<Authenticated>")," documentation for more information ","\u2192"))),(0,a.kt)("br",null),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("strong",null,"How can I redirect the user if the user is not authenticated?")),(0,a.kt)("p",null,"If you want to redirect the user to a specific page, you can resolve the Promise with an object that has ",(0,a.kt)("inlineCode",{parentName:"p"},"redirectTo")," property."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const authProvider: AuthBindings = {\n  // ---\n  check: async () => {\n    // ---\n    return {\n      authenticated: false,\n      redirectTo: '/custom-page',\n    }\n  },\n}\n"))),(0,a.kt)("h3",{id:"logout"},"logout"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"logout")," method is used to log out users. It expects to return a resolved Promise with the following type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type AuthActionResponse = {\n  success: boolean\n  redirectTo?: string\n  error?: Error\n  [key: string]: unknown\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"success"),": Determines whether the operation is successful or not."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"redirectTo"),": The path of the page that the user will be redirected to after the operation is completed."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"error"),": An object containing details about any errors encountered during the operation."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"[key: string]"),": Any additional data you wish to include in the response, keyed by a string identifier.")),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"login")," method, we've saved the user data to the local storage when the user logs in. So, we'll remove the user data from the local storage when the user logs out."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},"import { AuthBindings } from '@refinedev/core'\n\nconst authProvider: AuthBindings = {\n  // ---\n  logout: async () => {\n    localStorage.removeItem('auth')\n    return {\n      success: true,\n      redirectTo: '/login',\n    }\n  },\n  // ---\n}\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"Invoking the ",(0,a.kt)("inlineCode",{parentName:"p"},"useLogout")," hook's mutation will call the ",(0,a.kt)("inlineCode",{parentName:"p"},"logout")," method. If you need to pass any parameters to the ",(0,a.kt)("inlineCode",{parentName:"p"},"logout")," method, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"useLogout")," hook's mutation."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/auth/useLogout/"},"Refer to the ",(0,a.kt)("inlineCode",{parentName:"a"},"useLogout")," documentation for more information ","\u2192")),(0,a.kt)("p",null,"For example, if we call the ",(0,a.kt)("inlineCode",{parentName:"p"},"useLogout")," hook's mutation like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useLogout } from '@refinedev/core'\n\nconst { mutate } = useLogout()\n\nmutate({ id: '1' })\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"logout")," method will get the mutation's parameters as an argument."),(0,a.kt)("br",null),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("strong",null,"Can I pass any parameters to the ",(0,a.kt)("code",null,"logout")," method?")),(0,a.kt)("p",null,"Yes, you can pass any parameters to the ",(0,a.kt)("inlineCode",{parentName:"p"},"logout")," method. ",(0,a.kt)("inlineCode",{parentName:"p"},"useLogout")," hook's mutation will pass the mutation's parameters to the ",(0,a.kt)("inlineCode",{parentName:"p"},"logout")," method without any type constraints."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const { mutate } = useLogout<{\n  id: string\n  name: string\n}>()\n"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("strong",null,"How can I redirect the user to a specific page after logout?")),(0,a.kt)("p",null,"If you want to redirect the user to a specific page, you can resolve the Promise with an object that has ",(0,a.kt)("inlineCode",{parentName:"p"},"redirectTo")," property."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const authProvider: AuthBindings = {\n  // ---\n  logout: async () => {\n    // ---\n    return {\n      success: true,\n      redirectTo: '/login',\n    }\n  },\n}\n")),(0,a.kt)("p",null,"Also, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"useLogout")," hook for this purpose."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const { mutate } = useLogout()\n\nmutate({ redirectPath: '/custom-page' })\n")),(0,a.kt)("p",null,"Then, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"redirectPath")," parameter in the ",(0,a.kt)("inlineCode",{parentName:"p"},"logout")," method to redirect the user to the specific page."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const authProvider: AuthBindings = {\n  // ---\n  logout: ({ redirectPath }) => {\n    // ---\n    return {\n      success: true,\n      redirectTo: redirectPath,\n    }\n  },\n}\n")),(0,a.kt)("p",null,"If you don't want to redirect the user to anywhere, you can resolve the ",(0,a.kt)("inlineCode",{parentName:"p"},"logout")," method's Promise with ",(0,a.kt)("inlineCode",{parentName:"p"},"redirectTo: undefined"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const authProvider: AuthBindings = {\n  // ---\n  logout: async () => {\n    // ---\n    return {\n      success: true,\n      redirectTo: undefined,\n    }\n  },\n}\n"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("strong",null,"How can I customize the error message?")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," automatically displays an error notification when the ",(0,a.kt)("inlineCode",{parentName:"p"},"logout")," method resolves the Promise with ",(0,a.kt)("inlineCode",{parentName:"p"},"success: false"),". If you want to customize the error message, you can resolve the Promise with an ",(0,a.kt)("inlineCode",{parentName:"p"},"error")," object that has ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"message")," properties."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},"import { AuthBindings } from '@refinedev/core'\n\nconst authProvider: AuthBindings = {\n  logout: async () => {\n    // ---\n    return {\n      success: false,\n      error: {\n        name: 'Logout Failed!',\n        message: 'Something went wrong.',\n      },\n    }\n  },\n  // ---\n}\n"))),(0,a.kt)("h3",{id:"onerror"},"onError"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"onError")," method is called when you get an error response from the API. You can create your own business logic to handle the error such as refreshing the token, logging out the user, etc."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"onError")," method expects to return a Promise with the following type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type OnErrorResponse = {\n  redirectTo?: string\n  logout?: boolean\n  error?: Error\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"redirectTo"),": If has a value, the app will be redirected to the given URL."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"logout"),": If is ",(0,a.kt)("inlineCode",{parentName:"li"},"true"),", useOnError calls the ",(0,a.kt)("inlineCode",{parentName:"li"},"logout")," method."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"error"),": An Error object representing any errors that may have occurred during the operation.")),(0,a.kt)("p",null,"We'll use the ",(0,a.kt)("inlineCode",{parentName:"p"},"onError")," method to log out the user if the API returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"401")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"403")," error. If ",(0,a.kt)("inlineCode",{parentName:"p"},"redirectTo")," is set, ",(0,a.kt)("inlineCode",{parentName:"p"},"logout")," method will be called with the ",(0,a.kt)("inlineCode",{parentName:"p"},"redirectTo")," value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},"import { AuthBindings } from '@refinedev/core'\n\nconst authProvider: AuthBindings = {\n  // ---\n  onError: async (error) => {\n    if (error.status === 401 || error.status === 403) {\n      return {\n        logout: true,\n        redirectTo: '/login',\n        error,\n      }\n    }\n\n    return {}\n  },\n  // ---\n}\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"Invoking the ",(0,a.kt)("inlineCode",{parentName:"p"},"useOnError")," hook's mutation will call the ",(0,a.kt)("inlineCode",{parentName:"p"},"onError")," method, passing in the mutation's parameters as arguments."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/auth/useOnError/"},"Refer to the ",(0,a.kt)("inlineCode",{parentName:"a"},"useOnError")," documentation for more information ","\u2192")),(0,a.kt)("p",null,"For example, if you want to check the error of a fetch request, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"useOnError")," hook's mutation like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useOnError } from '@refinedev/core'\n\nconst { mutate } = useOnError()\n\nfetch('http://example.com/payment')\n  .then(() => console.log('Success'))\n  .catch((error) => mutate(error))\n")),(0,a.kt)("br",null),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("strong",null,"How can I redirect the user to a specific page after logout?")),(0,a.kt)("p",null,"If you want to redirect the user to a specific page, you can resolve the Promise with an object that has ",(0,a.kt)("inlineCode",{parentName:"p"},"redirectTo")," property."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const authProvider: AuthBindings = {\n  // ---\n  onError: async (error) => {\n    if (error.status === 401 || error.status === 403) {\n      return {\n        redirectTo: '/custom-page',\n      }\n    }\n\n    return {}\n  },\n  // ---\n}\n"))),(0,a.kt)("h2",{id:"optional-methods"},"Optional Methods"),(0,a.kt)("h3",{id:"getpermissions"},"getPermissions"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"getPermissions")," method is used to get the user's permissions. It expects to return a resolved Promise."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If the Promise resolves with data, the user's permissions will be available in the ",(0,a.kt)("inlineCode",{parentName:"li"},"usePermissions")," hook's ",(0,a.kt)("inlineCode",{parentName:"li"},"data")," property.")),(0,a.kt)("p",null,"We'll use the ",(0,a.kt)("inlineCode",{parentName:"p"},"getPermissions")," method to get the user's permissions from the ",(0,a.kt)("inlineCode",{parentName:"p"},"localStorage"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},"import { AuthBindings } from '@refinedev/core'\n\nconst mockUsers = [\n  { email: 'john@mail.com', roles: ['admin'] },\n  { email: 'jane@mail.com', roles: ['editor'] },\n]\n\nconst authProvider: AuthBindings = {\n  // ---\n  getPermissions: () => {\n    const user = localStorage.getItem('auth')\n\n    if (user) {\n      const { roles } = JSON.parse(user)\n\n      return roles\n    }\n\n    return null\n  },\n  // ---\n}\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"Invoking the ",(0,a.kt)("inlineCode",{parentName:"p"},"usePermissions")," hook will call the ",(0,a.kt)("inlineCode",{parentName:"p"},"getPermissions")," method. If ",(0,a.kt)("inlineCode",{parentName:"p"},"getPermissions")," method resolves a data, it will be available in the ",(0,a.kt)("inlineCode",{parentName:"p"},"usePermissions")," hook's ",(0,a.kt)("inlineCode",{parentName:"p"},"data")," property."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/auth/usePermissions/"},"Refer to the ",(0,a.kt)("inlineCode",{parentName:"a"},"usePermissions")," documentation for more information ","\u2192")),(0,a.kt)("p",null,"For example, if you want to check if the user has a specific permission, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"usePermissions")," hook like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { usePermissions } from '@refinedev/core'\n\nconst { data } = usePermissions()\n\nif (data?.includes('admin')) {\n  console.log('User has admin permissions')\n}\n")),(0,a.kt)("br",null),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"usePermissions")," hook can be used for simply authorization purposes. If you need more complex authorization logic, we recommend using the access control provider to handle the authorization logic."),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"docs/api-reference/core/providers/accessControl-provider/"},"Refer to the ",(0,a.kt)("inlineCode",{parentName:"a"},"accessControlProvider")," documentation for more information ","\u2192"))),(0,a.kt)("h3",{id:"getidentity"},"getIdentity"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"getIdentity")," method is used to get the user's identity. It expects to return a resolved Promise."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If the Promise resolves with data, the user's identity will be available in the ",(0,a.kt)("inlineCode",{parentName:"li"},"useGetIdentity")," hook's ",(0,a.kt)("inlineCode",{parentName:"li"},"data")," property.")),(0,a.kt)("p",null,"We'll get the user's identity from the local storage and resolve the Promise."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},"import { AuthBindings } from '@refinedev/core'\n\nconst mockUsers = [\n  { email: 'john@mail.com', roles: ['admin'] },\n  { email: 'jane@mail.com', roles: ['editor'] },\n]\n\nconst authProvider: AuthBindings = {\n  // ---\n  getIdentity: async () => {\n    const user = localStorage.getItem('auth')\n\n    if (user) {\n      const { email, roles } = JSON.parse(user)\n\n      return { email, roles }\n    }\n\n    return null\n  },\n  // ---\n}\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"Invoking the ",(0,a.kt)("inlineCode",{parentName:"p"},"useGetIdentity")," hook will call the ",(0,a.kt)("inlineCode",{parentName:"p"},"getIdentity")," method. If ",(0,a.kt)("inlineCode",{parentName:"p"},"getIdentity")," method resolves a data, it will be available in the ",(0,a.kt)("inlineCode",{parentName:"p"},"useGetIdentity")," hook's ",(0,a.kt)("inlineCode",{parentName:"p"},"data")," property."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/auth/useGetIdentity/"},"Refer to the ",(0,a.kt)("inlineCode",{parentName:"a"},"useGetIdentity")," documentation for more information ","\u2192")),(0,a.kt)("p",null,"For example, if you want to get the user's email, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"useGetIdentity")," hook like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useGetIdentity } from '@refinedev/core'\n\nconst { data } = useGetIdentity()\n\nif (data) {\n  console.log(data.email)\n}\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Depending on the UI framework you use, if you resolve ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"avatar")," properties in the ",(0,a.kt)("inlineCode",{parentName:"p"},"getIdentity")," method, the user's name and avatar will be shown in the header in the default layout."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const authProvider: AuthBindings = {\n  // ---\n  getIdentity: async () => {\n    const user = localStorage.getItem('auth')\n\n    if (user) {\n      const { email, roles } = JSON.parse(user)\n\n      return {\n        email,\n        roles,\n        // highlight-start\n        name: 'John Doe',\n        avatar: 'https://i.pravatar.cc/300',\n        // highlight-end\n      }\n    }\n\n    return null\n  },\n  // ---\n}\n"))),(0,a.kt)("h3",{id:"register"},"register"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"register")," method is used to register a new user. It is similar to the ",(0,a.kt)("inlineCode",{parentName:"p"},"login")," method. It expects to return a resolved Promise with the following type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type RegisterResponse = {\n  success: boolean\n  redirectTo?: string\n  error?: Error\n  [key: string]: unknown\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"success"),": Determines whether the operation is successful or not."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"redirectTo"),": The path of the page that the user will be redirected to after the operation is completed."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"error"),": An object containing details about any errors encountered during the operation."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"[key: string]"),": Any additional data you wish to include in the response, keyed by a string identifier.")),(0,a.kt)("p",null,"We'll register a new user and resolve the Promise."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import { AuthBindings } from "@refinedev/core";\n\nconst mockUsers = [{ email: "john@mail.com" }, { email: "jane@mail.com" }];\n\nconst authProvider: AuthBindings = {\n    // ---\n    register: async async ({ email }) => {\n        const user = mockUsers.find((user) => user.email === email);\n\n        if (user) {\n            return {\n                success: false,\n                error: {\n                    name: "Register Error",\n                    message: "User already exists",\n                },\n            };\n        }\n\n        mockUsers.push({ email });\n\n        return {\n            success: true,\n            redirectTo: "/login",\n        };\n    },\n    // ---\n};\n')),(0,a.kt)("br",null),(0,a.kt)("p",null,"Invoking the ",(0,a.kt)("inlineCode",{parentName:"p"},"useRegister")," hook's mutation will call the ",(0,a.kt)("inlineCode",{parentName:"p"},"register")," method, passing in the mutation's parameters as arguments."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/auth/useRegister/"},"Refer to the ",(0,a.kt)("inlineCode",{parentName:"a"},"useRegister")," documentation for more information ","\u2192")),(0,a.kt)("p",null,"For example, if you want to register a new user, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"useRegister")," hook like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useRegister } from '@refinedev/core'\n\nconst { mutate } = useRegister()\n\nconst handleRegister = (values) => {\n  mutate(values)\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"register")," method will get the mutation's parameters as arguments."),(0,a.kt)("br",null),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("strong",null,"Can I pass any parameters to the ",(0,a.kt)("code",null,"register")," method?")),(0,a.kt)("p",null,"Yes, you can pass any parameters to the ",(0,a.kt)("inlineCode",{parentName:"p"},"register")," method. ",(0,a.kt)("inlineCode",{parentName:"p"},"useRegister")," hook's mutation will pass the mutation's parameters to the ",(0,a.kt)("inlineCode",{parentName:"p"},"register")," method without any type constraints."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const { mutate } = useRegister<{\n  username: string\n  email: string\n  password: string\n  confirmPassword: string\n  remember: boolean\n}>()\n"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("strong",null,"How can I redirect the user to a specific page after registration?")),(0,a.kt)("p",null,"If you want to redirect the user to a specific page, you can resolve the Promise with an object that has ",(0,a.kt)("inlineCode",{parentName:"p"},"redirectTo")," property."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const authProvider: AuthBindings = {\n  // ---\n  register: async () => {\n    // ---\n    return {\n      success: true, // or false\n      redirectTo: '/custom-page',\n    }\n  },\n}\n")),(0,a.kt)("p",null,"Also, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"useRegister")," hook's for this purpose."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const { mutate } = useRegister()\n\nmutate({ redirectPath: '/custom-page' })\n")),(0,a.kt)("p",null,"Then, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"redirectPath")," parameter in the ",(0,a.kt)("inlineCode",{parentName:"p"},"register")," method to redirect the user to the specific page."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const authProvider: AuthBindings = {\n  // ---\n  register: async ({ redirectPath }) => {\n    // ---\n    return {\n      success: true, // or false\n      redirectTo: redirectPath,\n    }\n  },\n}\n")),(0,a.kt)("p",null,"If you don't want to redirect the user to anywhere, you can resolve the ",(0,a.kt)("inlineCode",{parentName:"p"},"register")," method's Promise with ",(0,a.kt)("inlineCode",{parentName:"p"},"redirectTo: undefined"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const authProvider: AuthBindings = {\n  // ---\n  register: async () => {\n    // ---\n    return {\n      success: true, // or false\n      redirectTo: undefined,\n    }\n  },\n}\n"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("strong",null,"How can I customize the error message?")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," automatically displays an error notification when the ",(0,a.kt)("inlineCode",{parentName:"p"},"register")," method resolves the Promise with ",(0,a.kt)("inlineCode",{parentName:"p"},"success: false"),". If you want to customize the error message, you can resolve the Promise with an ",(0,a.kt)("inlineCode",{parentName:"p"},"error")," object that has ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"message")," properties."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},"const authProvider: AuthBindings = {\n  // ---\n  register: async () => {\n    // ---\n    return {\n      success: false,\n      error: {\n        name: 'Error',\n        message: 'Something went wrong!',\n      },\n    }\n  },\n}\n"))),(0,a.kt)("h3",{id:"forgotpassword"},"forgotPassword"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"forgotPassword")," method is used to send a password reset link to the user's email address. It expects to return a resolved Promise with the following type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type AuthActionResponse = {\n  success: boolean\n  redirectTo?: string\n  error?: Error\n  [key: string]: unknown\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"success"),": Determines whether the operation is successful or not."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"redirectTo"),": The path of the page that the user will be redirected to after the operation is completed."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"error"),": An object containing details about any errors encountered during the operation."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"[key: string]"),": Any additional data you wish to include in the response, keyed by a string identifier.")),(0,a.kt)("p",null,"We'll show how to send a password reset link to the user's email address and resolve the Promise."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},"import { AuthBindings } from '@refinedev/core'\n\nconst authProvider: AuthBindings = {\n  // ---\n  forgotPassword: async ({ email }) => {\n    // send password reset link to the user's email address here\n\n    // if request is successful\n    return {\n      success: true,\n      redirectTo: '/login',\n    }\n\n    // if request is not successful\n    return {\n      success: false,\n      error: {\n        name: 'Forgot Password Error',\n        message: 'Email address does not exist',\n      },\n    }\n  },\n  // ---\n}\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"Invoking the ",(0,a.kt)("inlineCode",{parentName:"p"},"useForgotPassword")," hook's mutation will call the ",(0,a.kt)("inlineCode",{parentName:"p"},"forgotPassword")," method, passing in the mutation's parameters as arguments."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/auth/useForgotPassword/"},"Refer to the ",(0,a.kt)("inlineCode",{parentName:"a"},"useForgotPassword")," documentation for more information ","\u2192")),(0,a.kt)("p",null,"For example, if you want to send a password reset link to the user's email address, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"useForgotPassword")," hook like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useForgotPassword } from '@refinedev/core'\n\nconst { mutate } = useForgotPassword()\n\nconst handleForgotPassword = (values) => {\n  mutate(values)\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"forgotPassword")," method will get the mutation's parameters as arguments."),(0,a.kt)("br",null),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("strong",null,"Can I pass any parameters to the ",(0,a.kt)("code",null,"forgotPassword")," method?")),(0,a.kt)("p",null,"Yes, you can pass any parameters to the ",(0,a.kt)("inlineCode",{parentName:"p"},"forgotPassword")," method. ",(0,a.kt)("inlineCode",{parentName:"p"},"useForgotPassword")," hook's mutation will pass the mutation's parameters to the ",(0,a.kt)("inlineCode",{parentName:"p"},"forgotPassword")," method without any type constraints."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const { mutate } = useForgotPassword<{\n  email: string\n}>()\n"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("strong",null,"How can I redirect the user to a specific page after sending the password reset link?")),(0,a.kt)("p",null,"If you want to redirect the user to a specific page, you can resolve the ",(0,a.kt)("inlineCode",{parentName:"p"},"forgotPassword")," method's Promise with the path of the page."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const authProvider: AuthBindings = {\n  // ---\n  forgotPassword: async () => {\n    // ---\n    return {\n      success: true,\n      redirectTo: '/login',\n    }\n  },\n}\n")),(0,a.kt)("p",null,"Also, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"useForgotPassword")," hook's for this purpose."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const { mutate } = useForgotPassword()\n\nuseForgotPassword({ redirectPath: '/custom-page' })\n")),(0,a.kt)("p",null,"Then, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"redirectPath")," parameter in the ",(0,a.kt)("inlineCode",{parentName:"p"},"forgotPassword")," method to redirect the user to the specific page."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const authProvider: AuthBindings = {\n  // ---\n  forgotPassword: async ({ redirectPath }) => {\n    // ---\n    return {\n      success: true,\n      redirectTo: redirectPath,\n    }\n  },\n}\n"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("strong",null,"How can I customize the error message?")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," automatically displays an error notification when the ",(0,a.kt)("inlineCode",{parentName:"p"},"forgotPassword")," method resolves the Promise with ",(0,a.kt)("inlineCode",{parentName:"p"},"success: false"),". If you want to customize the error message, you can resolve the Promise with an object that has ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"message")," properties."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},"const authProvider: AuthBindings = {\n  // ---\n  forgotPassword: async () => {\n    // ---\n    return {\n      success: false,\n      error: {\n        name: 'Error',\n        message: 'Something went wrong!',\n      },\n    }\n  },\n}\n"))),(0,a.kt)("h3",{id:"updatepassword"},"updatePassword"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"updatePassword")," method is used to update the user's password. It expects to return a resolved Promise with the following type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type AuthActionResponse = {\n  success: boolean\n  redirectTo?: string\n  error?: Error\n  [key: string]: unknown\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"success"),": Determines whether the operation is successful or not."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"redirectTo"),": The path of the page that the user will be redirected to after the operation is completed."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"error"),": An object containing details about any errors encountered during the operation."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"[key: string]"),": Any additional data you wish to include in the response, keyed by a string identifier.")),(0,a.kt)("p",null,"We'll show how to update the user's password and resolve the Promise."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},"import { AuthBindings } from '@refinedev/core'\n\nconst authProvider: AuthBindings = {\n  // ---\n  updatePassword: async ({ password }) => {\n    // update the user's password here\n\n    // if request is successful\n    return {\n      success: true,\n      redirectTo: '/login',\n    }\n\n    // if request is not successful\n    return {\n      success: false,\n      error: {\n        name: 'Forgot Password Error',\n        message: 'Email address does not exist',\n      },\n    }\n  },\n  // ---\n}\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"Invoking the ",(0,a.kt)("inlineCode",{parentName:"p"},"useUpdatePassword")," hook's mutation will call the ",(0,a.kt)("inlineCode",{parentName:"p"},"updatePassword")," method, passing in the mutation's parameters as arguments. Additionally, the ",(0,a.kt)("inlineCode",{parentName:"p"},"updatePassword")," method will take query parameters as arguments from the URL as well."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/auth/useUpdatePassword/"},"Refer to the ",(0,a.kt)("inlineCode",{parentName:"a"},"useUpdatePassword")," documentation for more information ","\u2192")),(0,a.kt)("p",null,"For example, if you want to update the user's password, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"useUpdatePassword")," hook like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useUpdatePassword } from "@refinedev/core";\n\nconst { mutate } = useUpdatePassword();\n\nconst handleUpdatePassword = ({ password, confirmPassword }) => {\n    mutate({ password, confirmPassword }});\n};\n')),(0,a.kt)("p",null,"If we assume that the URL is ",(0,a.kt)("inlineCode",{parentName:"p"},"http://localhost:3000/reset-password?token=123"),", the ",(0,a.kt)("inlineCode",{parentName:"p"},"updatePassword")," method will get the mutation's parameters as arguments and ",(0,a.kt)("inlineCode",{parentName:"p"},"token")," query parameter as well."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const authProvider: AuthBindings = {\n  // ---\n  updatePassword: async ({ password, confirmPassword, token }) => {\n    console.log(token) // 123\n\n    // if request is successful\n    return {\n      success: true,\n      redirectTo: '/login',\n    }\n  },\n}\n")),(0,a.kt)("br",null),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("strong",null,"Can I pass any parameters to the ",(0,a.kt)("code",null,"updatePassword")," method?")),(0,a.kt)("p",null,"Yes, you can pass any parameters to the ",(0,a.kt)("inlineCode",{parentName:"p"},"updatePassword")," method. ",(0,a.kt)("inlineCode",{parentName:"p"},"useUpdatePassword")," hook's mutation will pass the mutation's parameters to the ",(0,a.kt)("inlineCode",{parentName:"p"},"updatePassword")," method without any type constraints."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const { mutate } = useUpdatePassword<{\n  password: string\n  newPassword: string\n}>()\n"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("strong",null,"How can I redirect the user to a specific page after updating the password?")),(0,a.kt)("p",null,"If you want to redirect the user to a specific page, you can resolve the Promise with an object that has ",(0,a.kt)("inlineCode",{parentName:"p"},"redirectTo")," property."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const authProvider: AuthBindings = {\n  // ---\n  updatePassword: async () => {\n    // ---\n    return {\n      success: true,\n      redirectTo: '/login',\n    }\n  },\n}\n")),(0,a.kt)("p",null,"Also, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"useUpdatePassword")," hook's for this purpose."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const { mutate } = useUpdatePassword()\n\nuseUpdatePassword({ redirectPath: '/custom-page' })\n")),(0,a.kt)("p",null,"Then, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"redirectPath")," parameter in the ",(0,a.kt)("inlineCode",{parentName:"p"},"updatePassword")," method to redirect the user to the specific page."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const authProvider: AuthBindings = {\n  // ---\n  updatePassword: async ({ redirectPath }) => {\n    // ---\n    return {\n      success: true,\n      redirectTo: redirectPath,\n    }\n  },\n}\n"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("strong",null,"How can I customize the error message?")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," automatically displays an error notification when the ",(0,a.kt)("inlineCode",{parentName:"p"},"updatePassword")," method resolves the Promise with ",(0,a.kt)("inlineCode",{parentName:"p"},"success: false"),". If you want to customize the error message, you can resolve the Promise with an ",(0,a.kt)("inlineCode",{parentName:"p"},"error")," object that has ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"message")," properties."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},"const authProvider: AuthBindings = {\n  // ---\n  updatePassword: async () => {\n    // ---\n    return {\n      success: false,\n      error: {\n        name: 'Error',\n        message: 'Something went wrong!',\n      },\n    }\n  },\n}\n"))),(0,a.kt)("h2",{id:"setting-authorization-credentials"},"Setting Authorization Credentials"),(0,a.kt)("p",null,"After a user logs in, you can save the user's authorization credentials (such as a token) to the browser's ",(0,a.kt)("inlineCode",{parentName:"p"},"localStorage")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"sessionStorage"),". This allows you to include the credentials in API calls by configuring the ",(0,a.kt)("inlineCode",{parentName:"p"},"dataProvider"),"."),(0,a.kt)("p",null,"Here's an example using ",(0,a.kt)("inlineCode",{parentName:"p"},"axios")," and the ",(0,a.kt)("inlineCode",{parentName:"p"},"localStorage")," to add a token acquired from the ",(0,a.kt)("inlineCode",{parentName:"p"},"login")," method to the ",(0,a.kt)("inlineCode",{parentName:"p"},"Authorization")," header of API calls."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},"// ---\nimport { AuthBindings } from '@refinedev/core'\n// highlight-next-line\nimport axios from 'axios'\n\n// highlight-next-line\nconst axiosInstance = axios.create()\n\nconst mockUsers = [\n  { username: 'admin', token: '123' },\n  { username: 'editor', token: '321' },\n]\n\nconst App = () => {\n  const authProvider: AuthBindings = {\n    login: async ({ username, password }) => {\n      // Suppose we actually send a request to the back end here.\n      const user = mockUsers.find((item) => item.username === username)\n\n      if (user) {\n        localStorage.setItem('auth', JSON.stringify(user))\n        // This sets the authorization headers on Axios instance\n        // highlight-start\n        axiosInstance.defaults.headers.common = {\n          Authorization: `Bearer ${user.token}`,\n        }\n        // highlight-end\n\n        return {\n          redirectTo: '/',\n          success: true,\n        }\n      }\n      return {\n        success: false,\n        error: {\n          name: 'Login Error',\n          message: 'Username or password is incorrect',\n        },\n      }\n    },\n    // ---\n  }\n\n  return (\n    <Refine\n      authProvider={authProvider}\n      routerProvider={routerProvider}\n      // In order to use the axios instance, we need to pass it to the dataProvider\n      // highlight-next-line\n      dataProvider={dataProvider(API_URL, axiosInstance)}\n    />\n  )\n}\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"We recommend using ",(0,a.kt)("strong",{parentName:"p"},"axios")," as the ",(0,a.kt)("strong",{parentName:"p"},"HTTP")," client with the ",(0,a.kt)("strong",{parentName:"p"},"@refinedev/simple-rest")," ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/data-provider"},(0,a.kt)("inlineCode",{parentName:"a"},"dataProvider")),". Other ",(0,a.kt)("strong",{parentName:"p"},"HTTP")," clients can also be preferred.")),(0,a.kt)("br",null),(0,a.kt)("p",null,"You can also use ",(0,a.kt)("inlineCode",{parentName:"p"},"axios.interceptors.request.use")," to add the token acquired from the ",(0,a.kt)("inlineCode",{parentName:"p"},"login")," method to the ",(0,a.kt)("inlineCode",{parentName:"p"},"Authorization")," header of API calls. It is similar to the above example, but it is more flexible for more complex use cases such as refreshing tokens when they expire."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://axios-http.com/docs/interceptors"},"Refer to the axios documentation for more information about interceptors ","\u2192")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},"// ---\nimport { AuthBindings } from '@refinedev/core'\n// highlight-next-line\nimport axios, { AxiosRequestConfig } from 'axios'\n\n// highlight-next-line\nconst axiosInstance = axios.create()\n\n// highlight-start\naxiosInstance.interceptors.request.use((request: AxiosRequestConfig) => {\n  // Retrieve the token from local storage\n  const token = JSON.parse(localStorage.getItem('auth'))\n  // Check if the header property exists\n  if (request.headers) {\n    // Set the Authorization header if it exists\n    request.headers['Authorization'] = `Bearer ${token}`\n  } else {\n    // Create the headers property if it does not exist\n    request.headers = {\n      Authorization: `Bearer ${token}`,\n    }\n  }\n\n  return request\n})\n// highlight-end\n\nconst mockUsers = [\n  { username: 'admin', token: '123' },\n  { username: 'editor', token: '321' },\n]\n\nconst App = () => {\n  const authProvider: AuthBindings = {\n    //highlight-start\n    login: async ({ username, password }) => {\n      // Suppose we actually send a request to the back end here.\n      const user = mockUsers.find((item) => item.username === username)\n\n      if (user) {\n        localStorage.setItem('auth', JSON.stringify(user))\n        return {\n          redirectTo: '/',\n          success: true,\n        }\n      }\n      return {\n        success: false,\n        error: {\n          name: 'Login Error',\n          message: 'Username or password is incorrect',\n        },\n      }\n    },\n    //highlight-end\n    // ---\n  }\n\n  return (\n    <Refine\n      authProvider={authProvider}\n      routerProvider={routerProvider}\n      //highlight-next-line\n      dataProvider={dataProvider(API_URL, axiosInstance)}\n    >\n      {/* ... */}\n    </Refine>\n  )\n}\n")),(0,a.kt)("h2",{id:"implementing-refresh-token-mechanism"},"Implementing Refresh Token Mechanism"),(0,a.kt)("p",null,"Previously, we stored the token in the ",(0,a.kt)("inlineCode",{parentName:"p"},"localStorage")," and added it to the ",(0,a.kt)("inlineCode",{parentName:"p"},"Authorization")," header of API calls. However, tokens typically have a limited lifespan and expire after a certain amount of time. When the token expires, the user will be redirected to the login page. To avoid this, we'll implement a refresh token mechanism using the ",(0,a.kt)("inlineCode",{parentName:"p"},"axios-auth-refresh")," package."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/Flyrell/axios-auth-refresh"},"Refer to the ",(0,a.kt)("inlineCode",{parentName:"a"},"axios-auth-refresh")," repository for more information ","\u2192")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},"/* ... */\nimport { Refine, AuthBindings } from '@refinedev/core'\nimport axios from 'axios'\n//highlight-next-line\nimport createAuthRefreshInterceptor from 'axios-auth-refresh'\n\n//highlight-next-line\nconst axiosInstance = axios.create()\n\n// Function that will be called to refresh authorization\n//highlight-start\nconst refreshAuthLogic = (failedRequest) =>\n  axiosInstance\n    .post(`${API_URL}/auth/token/refresh`)\n    .then((tokenRefreshResponse) => {\n      localStorage.setItem('token', tokenRefreshResponse.data.token)\n\n      failedRequest.response.config.headers['Authorization'] =\n        'Bearer ' + tokenRefreshResponse.data.token\n\n      return Promise.resolve()\n    })\n//highlight-end\n\n// Instantiate the interceptor\n//highlight-next-line\ncreateAuthRefreshInterceptor(axiosInstance, refreshAuthLogic)\n\nconst App = () => {\n  const authProvider: AuthBindings = {\n    /* ... */\n  }\n\n  return (\n    <Refine\n      authProvider={authProvider}\n      //highlight-next-line\n      dataProvider={dataProvider(API_URL, axiosInstance)}\n    >\n      /* ... */\n    </Refine>\n  )\n}\n")),(0,a.kt)("p",null,"In this example, we used the ",(0,a.kt)("inlineCode",{parentName:"p"},"axios-auth-refresh")," package to refresh the token. You can use any other package or your own implementation."),(0,a.kt)("br",null),(0,a.kt)("br",null),(0,a.kt)(d,{mdxType:"Checklist"},(0,a.kt)(c,{id:"auth-provider-create-auth-provider",mdxType:"ChecklistItem"},"I understood how to create a auth provider.")))}k.isMDXComponent=!0}}]);