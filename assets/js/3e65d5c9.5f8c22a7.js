"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[82026],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),c=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return o.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||a;return n?o.createElement(h,i(i({ref:t},l),{},{components:n})):o.createElement(h,i({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},41917:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=n(87462),r=(n(67294),n(3905));const a={id:"search",title:"Search"},i=void 0,s={unversionedId:"advanced-tutorials/search/search",id:"version-3.xx.xx/advanced-tutorials/search/search",title:"Search",description:"We will create a ` component for your application with Ant Design's ` component.",source:"@site/versioned_docs/version-3.xx.xx/advanced-tutorials/search/search.md",sourceDirName:"advanced-tutorials/search",slug:"/advanced-tutorials/search/",permalink:"/docs/3.xx.xx/advanced-tutorials/search/",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/versioned_docs/version-3.xx.xx/advanced-tutorials/search/search.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{id:"search",title:"Search"},sidebar:"someSidebar",previous:{title:"List Search",permalink:"/docs/3.xx.xx/advanced-tutorials/search/list-search"},next:{title:"Table Search",permalink:"/docs/3.xx.xx/advanced-tutorials/search/table-search"}},p={},c=[{value:"Example",id:"example",level:2}],l=(d="CodeSandboxExample",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var d;const u={toc:c},m="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"We will create a ",(0,r.kt)("inlineCode",{parentName:"p"},"<Header>")," component for your application with Ant Design's ",(0,r.kt)("a",{parentName:"p",href:"https://ant.design/components/auto-complete"},(0,r.kt)("inlineCode",{parentName:"a"},"<AutoComplete>"))," component.\nWe will now examine how to search within the application with this component."),(0,r.kt)("div",{class:"img-container"},(0,r.kt)("div",{class:"window"},(0,r.kt)("div",{class:"control red"}),(0,r.kt)("div",{class:"control orange"}),(0,r.kt)("div",{class:"control green"})),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/search/search.gif",alt:"search"})),(0,r.kt)("br",null),(0,r.kt)("p",null,"To do this, let's first create our ",(0,r.kt)("inlineCode",{parentName:"p"},"<Header>")," component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/header.tsx"',title:'"src/components/header.tsx"'},"import { AntdLayout, AutoComplete, Input, Icons } from '@pankod/refine-antd'\n\nconst { SearchOutlined } = Icons\n\nexport const Header: React.FC = () => {\n  return (\n    <AntdLayout.Header\n      style={{\n        padding: '0px 24px',\n        backgroundColor: '#FFF',\n      }}\n    >\n      <AutoComplete\n        style={{ width: '100%', maxWidth: '550px' }}\n        filterOption={false}\n      >\n        <Input\n          size=\"large\"\n          placeholder=\"Search posts or categories\"\n          suffix={<SearchOutlined />}\n        />\n      </AutoComplete>\n    </AntdLayout.Header>\n  )\n}\n")),(0,r.kt)("p",null,"We created the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Header>")," component as we want it to appear. We have not done anything for any search process at this stage. We just created the UI."),(0,r.kt)("br",null),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Let's not forget to pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Header>")," component to the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Refine>")," component in ",(0,r.kt)("inlineCode",{parentName:"p"},"App.tsx")," as below."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},"import { Refine } from '@pankod/refine-core'\nimport {\n  Layout,\n  ReadyPage,\n  notificationProvider,\n  ErrorComponent,\n} from '@pankod/refine-antd'\nimport routerProvider from '@pankod/refine-react-router-v6'\nimport dataProvider from '@pankod/refine-simple-rest'\n\nimport '@pankod/refine-antd/dist/reset.css'\n\n// highlight-next-line\nimport { Header } from 'components'\n\nconst API_URL = 'https://api.fake-rest.refine.dev'\n\nconst App: React.FC = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider(API_URL)}\n      Layout={Layout}\n      ReadyPage={ReadyPage}\n      notificationProvider={notificationProvider}\n      catchAll={<ErrorComponent />}\n      // highlight-next-line\n      Header={Header}\n    />\n  )\n}\n\nexport default App\n"))),(0,r.kt)("p",null,"Now let's get our ",(0,r.kt)("a",{parentName:"p",href:"https://ant.design/components/auto-complete"},(0,r.kt)("inlineCode",{parentName:"a"},"<AutoComplete>"))," input ready to search. So, let's fetch our posts according to the value entered in our input."),(0,r.kt)("p",null,"To fetch more than one record, we will use the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useList"},(0,r.kt)("inlineCode",{parentName:"a"},"useList"))," data hook, and we will filter and fetch this data according to the search value."),(0,r.kt)("p",null,"Before we start, let's create the interfaces of our ",(0,r.kt)("a",{parentName:"p",href:"https://ant.design/components/auto-complete"},(0,r.kt)("inlineCode",{parentName:"a"},"<AutoComplete>")),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," property and the post source."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/interfaces/index.d.ts"',title:'"src/interfaces/index.d.ts"'},"export interface IPost {\n  id: number\n  title: string\n}\n\nexport interface ICategory {\n  id: number\n  title: string\n}\n\nexport interface IOptionGroup {\n  value: string\n  label: string | React.ReactNode\n}\n\nexport interface IOptions {\n  label: string | React.ReactNode\n  options: IOptionGroup[]\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/header.tsx"',title:'"src/components/header.tsx"'},"import { useState, useEffect } from 'react'\nimport { useList } from '@pankod/refine-core'\nimport {\n  AntdLayout,\n  AutoComplete,\n  Input,\n  Icons,\n  Typography,\n} from '@pankod/refine-antd'\nimport routerProvider from '@pankod/refine-react-router-v6'\n\nconst { Link } = routerProvider\nconst { Text } = Typography\nconst { SearchOutlined } = Icons\n\nimport { IOptions, IPost } from 'interfaces'\n\n// To be able to customize the option title\nconst renderTitle = (title: string) => {\n  return (\n    <Text strong style={{ fontSize: '16px' }}>\n      {title}\n    </Text>\n  )\n}\n\n// To be able to customize the option item\nconst renderItem = (title: string, resource: string, id: number) => {\n  return {\n    value: title,\n    label: (\n      <Link to={`/${resource}/show/${id}`}>\n        <Text>{title}</Text>\n      </Link>\n    ),\n  }\n}\n\nexport const Header: React.FC = () => {\n  const [value, setValue] = useState<string>('')\n  const [options, setOptions] = useState<IOptions[]>([])\n\n  const { refetch: refetchPosts } = useList<IPost>({\n    resource: 'posts',\n    config: {\n      filters: [{ field: 'title', operator: 'contains', value }],\n    },\n    queryOptions: {\n      enabled: false,\n      onSuccess: (data) => {\n        const postOptionGroup = data.data.map((item) =>\n          renderItem(item.title, 'posts', item.id),\n        )\n        if (postOptionGroup.length > 0) {\n          setOptions([\n            {\n              label: renderTitle('Posts'),\n              options: postOptionGroup,\n            },\n          ])\n        }\n      },\n    },\n  })\n\n  useEffect(() => {\n    setOptions([])\n    refetchPosts()\n  }, [value])\n\n  return (\n    <AntdLayout.Header\n      style={{\n        padding: '0px 24px',\n        backgroundColor: '#FFF',\n      }}\n    >\n      <AutoComplete\n        style={{ width: '100%', maxWidth: '550px' }}\n        filterOption={false}\n        options={options}\n        onSearch={(value: string) => setValue(value)}\n      >\n        <Input\n          size=\"large\"\n          placeholder=\"Search posts or categories\"\n          suffix={<SearchOutlined />}\n        />\n      </AutoComplete>\n    </AntdLayout.Header>\n  )\n}\n")),(0,r.kt)("p",null,"We created states to dynamically manage the ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," properties of the ",(0,r.kt)("a",{parentName:"p",href:"https://ant.design/components/auto-complete"},(0,r.kt)("inlineCode",{parentName:"a"},"<AutoComplete>"))," component. The ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useList"},(0,r.kt)("inlineCode",{parentName:"a"},"useList"))," hook is triggered whenever the value changes. Likewise, the filter used to fetch the data is updated each time the value changes."),(0,r.kt)("br",null),(0,r.kt)("p",null,"Search value is currently only searched and fetched inside posts. Let's update our code to search both posts and categories according to the search value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/header.tsx"',title:'"src/components/header.tsx"'},'...\nexport const Header: React.FC = () => {\n    const [value, setValue] = useState<string>("");\n    const [options, setOptions] = useState<IOptions[]>([]);\n\n    const { refetch: refetchPosts } = useList<IPost>({\n        resource: "posts",\n        config: {\n            filters: [{ field: "title", operator: "contains", value }],\n        },\n        queryOptions: {\n            enabled: false,\n            onSuccess: (data) => {\n                const postOptionGroup = data.data.map((item) =>\n                    renderItem(item.title, "posts", item.id),\n                );\n                if (postOptionGroup.length > 0) {\n                    setOptions((prevOptions) => [\n                        ...prevOptions\n                        {\n                            label: renderTitle("Posts"),\n                            options: postOptionGroup,\n                        },\n                    ]);\n                }\n            },\n        },\n    });\n\n    const { refetch: refetchCategories } = useList<ICategory>({\n        resource: "categories",\n        config: {\n            filters: [{ field: "q", operator: "contains", value }],\n        },\n        queryOptions: {\n            enabled: false,\n            onSuccess: (data) => {\n                const categoryOptionGroup = data.data.map((item) =>\n                    renderItem(item.title, "categories", item.id),\n                );\n                if (categoryOptionGroup.length > 0) {\n                    setOptions((prevOptions) => [\n                        ...prevOptions,\n                        {\n                            label: renderTitle("Categories"),\n                            options: categoryOptionGroup,\n                        },\n                    ]);\n                }\n            },\n        },\n    });\n\n    useEffect(() => {\n        setOptions([]);\n        refetchPosts();\n        refetchCategories();\n    }, [value]);\n\n    return (\n        <AntdLayout.Header\n            style={{\n                padding: "0px 24px",\n                backgroundColor: "#FFF",\n            }}\n        >\n            ...\n        </AntdLayout.Header>\n    );\n};\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"By doing the same implementation on your other resources, you can search for more than one resource with a value.")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)(l,{path:"search",mdxType:"CodeSandboxExample"}))}h.isMDXComponent=!0}}]);