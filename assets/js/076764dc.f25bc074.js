"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[74178],{3905:(e,n,r)=>{r.d(n,{Zo:()=>l,kt:()=>u});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=t.createContext({}),d=function(e){var n=t.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},l=function(e){var n=d(e.components);return t.createElement(p.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),c=d(r),f=o,u=c["".concat(p,".").concat(f)]||c[f]||m[f]||i;return r?t.createElement(u,a(a({ref:n},l),{},{components:r})):t.createElement(u,a({ref:n},l))}));function u(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=f;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[c]="string"==typeof e?e:o,a[1]=s;for(var d=2;d<i;d++)a[d]=r[d];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},63297:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>v,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var t=r(87462),o=r(67294),i=r(3905);const a={id:"inferencer",title:"Inferencer"},s=void 0,p={unversionedId:"api-reference/antd/components/inferencer",id:"version-3.xx.xx/api-reference/antd/components/inferencer",title:"Inferencer",description:"You can automatically generate views for your resources using @pankod/refine-inferencer. Inferencer exports AntdListInferencer, AntdShowInferencer, AntdEditInferencer, AntdCreateInferencer and AntdInferencer (which combines all in one place) components.",source:"@site/versioned_docs/version-3.xx.xx/api-reference/antd/components/inferencer.md",sourceDirName:"api-reference/antd/components",slug:"/api-reference/antd/components/inferencer",permalink:"/docs/3.xx.xx/api-reference/antd/components/inferencer",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/versioned_docs/version-3.xx.xx/api-reference/antd/components/inferencer.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{id:"inferencer",title:"Inferencer"},sidebar:"someSidebar",previous:{title:"<AuthPage>",permalink:"/docs/3.xx.xx/api-reference/antd/components/antd-auth-page"},next:{title:"Create",permalink:"/docs/3.xx.xx/api-reference/antd/components/basic-views/create"}},d={},l=[{value:"Usage",id:"usage",level:2},{value:"Views",id:"views",level:2},{value:"<code>List</code>",id:"list",level:3},{value:"<code>Show</code>",id:"show",level:3},{value:"<code>Create</code>",id:"create",level:3},{value:"<code>Edit</code>",id:"edit",level:3},{value:"Example",id:"example",level:2}],c=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)},m=c("Tabs"),f=c("TabItem"),u=c("CodeSandboxExample"),h={toc:l},k="wrapper";function v(e){let{components:n,...r}=e;return(0,i.kt)(k,(0,t.Z)({},h,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"You can automatically generate views for your resources using ",(0,i.kt)("inlineCode",{parentName:"p"},"@pankod/refine-inferencer"),". Inferencer exports ",(0,i.kt)("inlineCode",{parentName:"p"},"AntdListInferencer"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"AntdShowInferencer"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"AntdEditInferencer"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"AntdCreateInferencer")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"AntdInferencer")," (which combines all in one place) components."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Ant Design components can be imported from ",(0,i.kt)("inlineCode",{parentName:"p"},"@pankod/refine-inferencer/antd"),". You can directly use the components in ",(0,i.kt)("inlineCode",{parentName:"p"},"resources")," prop of ",(0,i.kt)("inlineCode",{parentName:"p"},"Refine")," component or you can use them in your custom components by passing the ",(0,i.kt)("inlineCode",{parentName:"p"},"resource")," prop as the resource name."),(0,i.kt)(m,{defaultValue:"resources",values:[{label:(0,i.kt)(o.Fragment,null,"In",(0,i.kt)("code",{style:{margin:"0 0.7ch"}},"resources"),"prop"),value:"resources"},{label:"In Custom Components",value:"custom"}],mdxType:"Tabs"},(0,i.kt)(f,{value:"resources",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"// highlight-next-line\nimport { AntdInferencer } from '@pankod/refine-inferencer/antd'\n\nconst App = () => {\n  return (\n    <Refine\n      resources={[\n        {\n          name: 'samples',\n          // highlight-start\n          list: AntdInferencer,\n          show: AntdInferencer,\n          create: AntdInferencer,\n          edit: AntdInferencer,\n          // highlight-end\n        },\n      ]}\n    />\n  )\n}\n"))),(0,i.kt)(f,{value:"custom",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'// highlight-next-line\nimport { AntdInferencer } from \'@pankod/refine-inferencer/antd\'\n\nconst SampleList = () => {\n  return (\n    // highlight-next-line\n    <AntdInferencer resource="samples" action="list" />\n  )\n}\n\nconst SampleShow = () => {\n  return (\n    // highlight-next-line\n    <AntdInferencer resource="samples" action="show" id="1" />\n  )\n}\n\nconst SampleCreate = () => {\n  return (\n    // highlight-next-line\n    <AntdInferencer resource="samples" action="create" />\n  )\n}\n\nconst SampleEdit = () => {\n  return (\n    // highlight-next-line\n    <AntdInferencer resource="samples" action="edit" id="1" />\n  )\n}\n')))),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"To learn more about ",(0,i.kt)("inlineCode",{parentName:"p"},"@pankod/refine-inferencer")," package, please check out ",(0,i.kt)("a",{parentName:"p",href:"/docs/packages/documentation/inferencer"},"Docs"))),(0,i.kt)("h2",{id:"views"},"Views"),(0,i.kt)("h3",{id:"list"},(0,i.kt)("inlineCode",{parentName:"h3"},"List")),(0,i.kt)("p",null,"Generates a sample list view for your resources according to the API response. It uses ",(0,i.kt)("inlineCode",{parentName:"p"},"List")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," components with ",(0,i.kt)("inlineCode",{parentName:"p"},"useTable")," hook from ",(0,i.kt)("inlineCode",{parentName:"p"},"@pankod/refine-antd"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode previewHeight=600px url=http://localhost:3000/samples",live:!0,hideCode:!0,previewHeight:"600px",url:"http://localhost:3000/samples"},"setInitialRoutes(['/'])\n\n// visible-block-start\nimport { Refine } from '@pankod/refine-core'\nimport { Layout } from '@pankod/refine-antd'\nimport routerProvider from '@pankod/refine-react-router-v6'\nimport dataProvider from '@pankod/refine-simple-rest'\n\n// highlight-next-line\nimport { AntdInferencer } from '@pankod/refine-inferencer/antd'\n\nconst API_URL = 'https://api.fake-rest.refine.dev'\n\nconst App: React.FC = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider(API_URL)}\n      Layout={Layout}\n      resources={[\n        {\n          name: 'samples',\n          // highlight-next-line\n          list: AntdInferencer,\n          show: AntdInferencer,\n          create: AntdInferencer,\n          edit: AntdInferencer,\n          canDelete: true,\n        },\n        {\n          name: 'categories',\n          // highlight-next-line\n          list: AntdInferencer,\n          show: AntdInferencer,\n        },\n        {\n          name: 'tags',\n          // highlight-next-line\n          list: AntdInferencer,\n          show: AntdInferencer,\n        },\n      ]}\n    />\n  )\n}\n\n// visible-block-end\n\nrender(<App />)\n")),(0,i.kt)("h3",{id:"show"},(0,i.kt)("inlineCode",{parentName:"h3"},"Show")),(0,i.kt)("p",null,"Generates a sample show view for your resources according to the API response. It uses ",(0,i.kt)("inlineCode",{parentName:"p"},"Show")," and field components from ",(0,i.kt)("inlineCode",{parentName:"p"},"@pankod/refine-antd")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"useShow")," hook from ",(0,i.kt)("inlineCode",{parentName:"p"},"@pankod/refine-core"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode previewHeight=600px url=http://localhost:3000/samples/show/123",live:!0,hideCode:!0,previewHeight:"600px",url:"http://localhost:3000/samples/show/123"},"setInitialRoutes(['/samples/show/123'])\n\n// visible-block-start\nimport { Refine } from '@pankod/refine-core'\nimport { Layout } from '@pankod/refine-antd'\nimport routerProvider from '@pankod/refine-react-router-v6'\nimport dataProvider from '@pankod/refine-simple-rest'\n\n// highlight-next-line\nimport { AntdInferencer } from '@pankod/refine-inferencer/antd'\n\nconst API_URL = 'https://api.fake-rest.refine.dev'\n\nconst App: React.FC = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider(API_URL)}\n      Layout={Layout}\n      resources={[\n        {\n          name: 'samples',\n          list: AntdInferencer,\n          // highlight-next-line\n          show: AntdInferencer,\n          create: AntdInferencer,\n          edit: AntdInferencer,\n          canDelete: true,\n        },\n        {\n          name: 'categories',\n          list: AntdInferencer,\n          // highlight-next-line\n          show: AntdInferencer,\n        },\n        {\n          name: 'tags',\n          list: AntdInferencer,\n          // highlight-next-line\n          show: AntdInferencer,\n        },\n      ]}\n    />\n  )\n}\n\n// visible-block-end\n\nrender(<App />)\n")),(0,i.kt)("h3",{id:"create"},(0,i.kt)("inlineCode",{parentName:"h3"},"Create")),(0,i.kt)("p",null,"Generates a sample create view for your resources according to the first record in list API response. It uses ",(0,i.kt)("inlineCode",{parentName:"p"},"Create")," component and ",(0,i.kt)("inlineCode",{parentName:"p"},"useForm")," hook from ",(0,i.kt)("inlineCode",{parentName:"p"},"@pankod/refine-antd"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode previewHeight=600px url=http://localhost:3000/samples/create",live:!0,hideCode:!0,previewHeight:"600px",url:"http://localhost:3000/samples/create"},"setInitialRoutes(['/samples/create'])\n\n// visible-block-start\nimport { Refine } from '@pankod/refine-core'\nimport { Layout } from '@pankod/refine-antd'\nimport routerProvider from '@pankod/refine-react-router-v6'\nimport dataProvider from '@pankod/refine-simple-rest'\n\n// highlight-next-line\nimport { AntdInferencer } from '@pankod/refine-inferencer/antd'\n\nconst API_URL = 'https://api.fake-rest.refine.dev'\n\nconst App: React.FC = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider(API_URL)}\n      Layout={Layout}\n      resources={[\n        {\n          name: 'samples',\n          list: AntdInferencer,\n          show: AntdInferencer,\n          // highlight-next-line\n          create: AntdInferencer,\n          edit: AntdInferencer,\n          canDelete: true,\n        },\n        {\n          name: 'categories',\n          list: AntdInferencer,\n          show: AntdInferencer,\n        },\n        {\n          name: 'tags',\n          list: AntdInferencer,\n          show: AntdInferencer,\n        },\n      ]}\n    />\n  )\n}\n\n// visible-block-end\n\nrender(<App />)\n")),(0,i.kt)("h3",{id:"edit"},(0,i.kt)("inlineCode",{parentName:"h3"},"Edit")),(0,i.kt)("p",null,"Generates a sample edit view for your resources according to the API response. It uses ",(0,i.kt)("inlineCode",{parentName:"p"},"Edit")," component and ",(0,i.kt)("inlineCode",{parentName:"p"},"useForm")," hook from ",(0,i.kt)("inlineCode",{parentName:"p"},"@pankod/refine-antd"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode previewHeight=600px url=http://localhost:3000/samples/edit/123",live:!0,hideCode:!0,previewHeight:"600px",url:"http://localhost:3000/samples/edit/123"},"setInitialRoutes(['/samples/edit/123'])\n\n// visible-block-start\nimport { Refine } from '@pankod/refine-core'\nimport { Layout } from '@pankod/refine-antd'\nimport routerProvider from '@pankod/refine-react-router-v6'\nimport dataProvider from '@pankod/refine-simple-rest'\n\n// highlight-next-line\nimport { AntdInferencer } from '@pankod/refine-inferencer/antd'\n\nconst API_URL = 'https://api.fake-rest.refine.dev'\n\nconst App: React.FC = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider(API_URL)}\n      Layout={Layout}\n      resources={[\n        {\n          name: 'samples',\n          list: AntdInferencer,\n          show: AntdInferencer,\n          create: AntdInferencer,\n          // highlight-next-line\n          edit: AntdInferencer,\n          canDelete: true,\n        },\n        {\n          name: 'categories',\n          list: AntdInferencer,\n          show: AntdInferencer,\n        },\n        {\n          name: 'tags',\n          list: AntdInferencer,\n          show: AntdInferencer,\n        },\n      ]}\n    />\n  )\n}\n\n// visible-block-end\n\nrender(<App />)\n")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Below you'll find a Live CodeSandbox Example displaying a fully setup ",(0,i.kt)("inlineCode",{parentName:"p"},"Refine")," app with ",(0,i.kt)("inlineCode",{parentName:"p"},"@pankod/refine-inferencer/antd")," components."),(0,i.kt)(u,{path:"inferencer-antd",mdxType:"CodeSandboxExample"}))}v.isMDXComponent=!0}}]);