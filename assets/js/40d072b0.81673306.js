"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3428],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var o=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=o.createContext({}),p=function(e){var t=o.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return o.createElement(d.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,h=u["".concat(d,".").concat(m)]||u[m]||c[m]||r;return n?o.createElement(h,a(a({ref:t},l),{},{components:n})):o.createElement(h,a({ref:t},l))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=m;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[u]="string"==typeof e?e:i,a[1]=s;for(var p=2;p<r;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},79272:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var o=n(87462),i=(n(67294),n(3905));const r={id:"edit",title:"Edit",swizzle:!0},a=void 0,s={unversionedId:"api-reference/antd/components/basic-views/edit",id:"version-3.xx.xx/api-reference/antd/components/basic-views/edit",title:"Edit",description:"`` provides us a layout for displaying the page. It does not contain any logic but adds extra functionalities like a refresh button.",source:"@site/versioned_docs/version-3.xx.xx/api-reference/antd/components/basic-views/edit.md",sourceDirName:"api-reference/antd/components/basic-views",slug:"/api-reference/antd/components/basic-views/edit",permalink:"/docs/3.xx.xx/api-reference/antd/components/basic-views/edit",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/versioned_docs/version-3.xx.xx/api-reference/antd/components/basic-views/edit.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{id:"edit",title:"Edit",swizzle:!0},sidebar:"someSidebar",previous:{title:"Create",permalink:"/docs/3.xx.xx/api-reference/antd/components/basic-views/create"},next:{title:"List",permalink:"/docs/3.xx.xx/api-reference/antd/components/basic-views/list"}},d={},p=[{value:"Properties",id:"properties",level:2},{value:"<code>title</code>",id:"title",level:3},{value:"<code>saveButtonProps</code>",id:"savebuttonprops",level:3},{value:"<code>canDelete</code> and <code>deleteButtonProps</code>",id:"candelete-and-deletebuttonprops",level:3},{value:"<code>resource</code>",id:"resource",level:3},{value:"<code>recordItemId</code>",id:"recorditemid",level:3},{value:"<code>mutationMode</code>",id:"mutationmode",level:3},{value:"<code>dataProviderName</code>",id:"dataprovidername",level:3},{value:"<code>goBack</code>",id:"goback",level:3},{value:"<code>isLoading</code>",id:"isloading",level:3},{value:"<code>breadcrumb</code>",id:"breadcrumb",level:3},{value:"<code>wrapperProps</code>",id:"wrapperprops",level:3},{value:"<code>headerProps</code>",id:"headerprops",level:3},{value:"<code>contentProps</code>",id:"contentprops",level:3},{value:"<code>headerButtons</code>",id:"headerbuttons",level:3},{value:"<code>headerButtonProps</code>",id:"headerbuttonprops",level:3},{value:"<code>footerButtons</code>",id:"footerbuttons",level:3},{value:"<code>footerButtonProps</code>",id:"footerbuttonprops",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3}],l=(u="PropsTable",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var u;const c={toc:p},m="wrapper";function h(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"<Edit>")," provides us a layout for displaying the page. It does not contain any logic but adds extra functionalities like a refresh button."),(0,i.kt)("p",null,"We will show what ",(0,i.kt)("inlineCode",{parentName:"p"},"<Edit>")," does using properties with examples."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode url=http://localhost:3000/posts/edit/123",live:!0,hideCode:!0,url:"http://localhost:3000/posts/edit/123"},"const { EditButton } = RefineAntd\n\ninterface ICategory {\n  id: number\n  title: string\n}\n\n// visible-block-start\n\ninterface IPost {\n  id: number\n  title: string\n  content: string\n  status: 'published' | 'draft' | 'rejected'\n  category: { id: number }\n}\n\nimport {\n  Edit,\n  Form,\n  Input,\n  Select,\n  useForm,\n  useSelect,\n} from '@pankod/refine-antd'\n\nconst PostEdit: React.FC<IResourceComponentsProps> = () => {\n  const { formProps, saveButtonProps, queryResult } = useForm<IPost>({\n    warnWhenUnsavedChanges: true,\n  })\n\n  const postData = queryResult?.data?.data\n  const { selectProps: categorySelectProps } = useSelect<ICategory>({\n    resource: 'categories',\n    defaultValue: postData?.category.id,\n  })\n\n  return (\n    <Edit saveButtonProps={saveButtonProps}>\n      <Form {...formProps} layout=\"vertical\">\n        <Form.Item\n          label=\"Title\"\n          name=\"title\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label=\"Category\"\n          name={['category', 'id']}\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Select {...categorySelectProps} />\n        </Form.Item>\n        <Form.Item\n          label=\"Status\"\n          name=\"status\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Select\n            options={[\n              {\n                label: 'Published',\n                value: 'published',\n              },\n              {\n                label: 'Draft',\n                value: 'draft',\n              },\n              {\n                label: 'Rejected',\n                value: 'rejected',\n              },\n            ]}\n          />\n        </Form.Item>\n      </Form>\n    </Edit>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/edit/123']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <EditButton recordItemId=\"123\">Edit Item 123</EditButton>\n          </div>\n        ),\n        edit: PostEdit,\n      },\n    ]}\n  />,\n)\n")),(0,i.kt)("admonition",{title:"Swizzle",type:"info-tip"},(0,i.kt)("p",{parentName:"admonition"},"You can swizzle this component to customize it with the ",(0,i.kt)("a",{parentName:"p",href:"/docs/packages/documentation/cli"},(0,i.kt)("strong",{parentName:"a"},"refine CLI")))),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("h3",{id:"title"},(0,i.kt)("inlineCode",{parentName:"h3"},"title")),(0,i.kt)("p",null,"It allows adding titles inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"<Edit>"),' component. if you don\'t pass title props it uses the "Edit" prefix and singular resource name by default. For example, for the "posts" resource, it will be "Edit post".'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},"const { EditButton } = RefineAntd\nconst { default: simpleRest } = RefineSimpleRest\n\nconst dataProvider = simpleRest('https://api.fake-rest.refine.dev')\n\nconst customDataProvider = {\n  ...dataProvider,\n  deleteOne: async ({ resource, id, variables }) => {\n    return {\n      data: {},\n    }\n  },\n}\n\n// visible-block-start\nimport { Edit } from '@pankod/refine-antd'\n\nconst PostEdit: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit title=\"Custom Title\">\n      <p>Rest of your page here</p>\n    </Edit>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/edit/2']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <EditButton recordItemId=\"2\">Edit Item 2</EditButton>\n          </div>\n        ),\n        edit: PostEdit,\n      },\n    ]}\n  />,\n)\n")),(0,i.kt)("h3",{id:"savebuttonprops"},(0,i.kt)("inlineCode",{parentName:"h3"},"saveButtonProps")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"<Edit>")," component has a save button by default. If you want to customize this button you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"saveButtonProps")," property like the code below."),(0,i.kt)("p",null,"Clicking on the save button will submit your form."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/antd/components/buttons/save-button"},"Refer to the ",(0,i.kt)("inlineCode",{parentName:"a"},"<SaveButton>")," documentation for detailed usage. ","\u2192")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},"const { EditButton } = RefineAntd\n\n// visible-block-start\nimport { Edit } from '@pankod/refine-antd'\n\nconst PostEdit: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit saveButtonProps={{ size: 'small' }}>\n      <p>Rest of your page here</p>\n    </Edit>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/edit/2']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <EditButton />\n          </div>\n        ),\n        edit: PostEdit,\n      },\n    ]}\n  />,\n)\n")),(0,i.kt)("h3",{id:"candelete-and-deletebuttonprops"},(0,i.kt)("inlineCode",{parentName:"h3"},"canDelete")," and ",(0,i.kt)("inlineCode",{parentName:"h3"},"deleteButtonProps")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"canDelete")," allows us to add the delete button inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"<Edit>")," component. If the resource has the ",(0,i.kt)("inlineCode",{parentName:"p"},"canDelete")," property,refine adds the delete button by default. If you want to customize this button you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"deleteButtonProps")," property like the code below."),(0,i.kt)("p",null,"When clicked on, the delete button executes the ",(0,i.kt)("inlineCode",{parentName:"p"},"useDelete")," method provided by the ",(0,i.kt)("inlineCode",{parentName:"p"},"dataProvider"),"."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/antd/components/buttons/delete-button"},"Refer to the ",(0,i.kt)("inlineCode",{parentName:"a"},"<DeleteButton>")," documentation for detailed usage. ","\u2192")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},"const { EditButton } = RefineAntd\nconst { default: simpleRest } = RefineSimpleRest\n\nconst dataProvider = simpleRest('https://api.fake-rest.refine.dev')\n\nconst customDataProvider = {\n  ...dataProvider,\n  deleteOne: async ({ resource, id, variables }) => {\n    return {\n      data: {},\n    }\n  },\n}\n\nconst authProvider = {\n  login: () => Promise.resolve(),\n  logout: () => Promise.resolve(),\n  checkAuth: () => Promise.resolve(),\n  checkError: () => Promise.resolve(),\n  getPermissions: () => Promise.resolve('admin'),\n  getUserIdentity: () => Promise.resolve(),\n}\n\n// visible-block-start\nimport { Edit } from '@pankod/refine-antd'\nimport { usePermissions } from '@pankod/refine-core'\n\nconst PostEdit: React.FC = () => {\n  const { data: permissionsData } = usePermissions()\n  return (\n    <Edit\n      /* highlight-start */\n      canDelete={permissionsData?.includes('admin')}\n      deleteButtonProps={{ size: 'small' }}\n      /* highlight-end */\n      saveButtonProps={{ size: 'small' }}\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    authProvider={authProvider}\n    dataProvider={customDataProvider}\n    initialRoutes={['/posts/edit/123']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <EditButton recordItemId=\"123\">Edit Item 123</EditButton>\n          </div>\n        ),\n        edit: PostEdit,\n      },\n    ]}\n  />,\n)\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/auth/usePermissions"},"Refer to the ",(0,i.kt)("inlineCode",{parentName:"a"},"usePermission")," documentation for detailed usage. ","\u2192")),(0,i.kt)("h3",{id:"resource"},(0,i.kt)("inlineCode",{parentName:"h3"},"resource")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"<Edit>")," component reads the ",(0,i.kt)("inlineCode",{parentName:"p"},"resource")," information from the route by default. This default behavior will not work on custom pages. If you want to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"<Edit>")," component in a custom page, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"resource")," property."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/advanced-tutorials/custom-pages"},"Refer to the custom pages documentation for detailed usage. ","\u2192")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/custom/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/custom/2"},"setInitialRoutes(['/custom/2'])\n\n// visible-block-start\nimport { Refine } from '@pankod/refine-core'\nimport { Edit } from '@pankod/refine-antd'\nimport routerProvider from '@pankod/refine-react-router-v6'\nimport dataProvider from '@pankod/refine-simple-rest'\n\nconst CustomPage: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit resource=\"posts\">\n      <p>Rest of your page here</p>\n    </Edit>\n  )\n}\n\nconst App: React.FC = () => {\n  return (\n    <Refine\n      routerProvider={{\n        ...routerProvider,\n        // highlight-start\n        routes: [\n          {\n            element: <CustomPage />,\n            path: '/custom/:id',\n          },\n        ],\n        // highlight-end\n      }}\n      dataProvider={dataProvider('https://api.fake-rest.refine.dev')}\n      resources={[{ name: 'posts' }]}\n    />\n  )\n}\n// visible-block-end\n\nrender(<App />)\n")),(0,i.kt)("h3",{id:"recorditemid"},(0,i.kt)("inlineCode",{parentName:"h3"},"recordItemId")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"<Edit>")," component reads the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," information from the route by default. ",(0,i.kt)("inlineCode",{parentName:"p"},"recordItemId")," is used when it cannot read from the URL(when used on a custom page, modal or drawer)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},"const { EditButton } = RefineAntd\n\n// visible-block-start\nimport { Edit, useModalForm, Modal, Button } from '@pankod/refine-antd'\n\nconst PostEdit: React.FC = () => {\n  const { modalProps, id, show } = useModalForm({\n    action: 'edit',\n  })\n\n  return (\n    <div>\n      <Button onClick={() => show()}>Edit Button</Button>\n      <Modal {...modalProps}>\n        {/* highlight-next-line */}\n        <Edit recordItemId={id}>\n          <p>Rest of your page here</p>\n        </Edit>\n      </Modal>\n    </div>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/edit/2']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <EditButton recordItemId=\"2\">Edit Item 2</EditButton>\n          </div>\n        ),\n        edit: PostEdit,\n      },\n    ]}\n  />,\n)\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"<Edit>")," component needs the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," information for the ",(0,i.kt)("inlineCode",{parentName:"p"},"<RefreshButton>")," to work properly.")),(0,i.kt)("h3",{id:"mutationmode"},(0,i.kt)("inlineCode",{parentName:"h3"},"mutationMode")),(0,i.kt)("p",null,"Determines which mode mutation will have while executing ",(0,i.kt)("inlineCode",{parentName:"p"},"<DeleteButton>")," ."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/advanced-tutorials/mutation-mode"},"Refer to the mutation mode docs for further information. ","\u2192")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode url=http://localhost:3000/posts/edit/2",live:!0,hideCode:!0,url:"http://localhost:3000/posts/edit/2"},"const { EditButton } = RefineAntd\n\ninterface ICategory {\n  id: number\n  title: string\n}\n\n// visible-block-start\n\ninterface IPost {\n  id: number\n  title: string\n  content: string\n  status: 'published' | 'draft' | 'rejected'\n  category: { id: number }\n}\n\nimport {\n  Edit,\n  Form,\n  Input,\n  Select,\n  useForm,\n  useSelect,\n} from '@pankod/refine-antd'\n\nconst PostEdit: React.FC<IResourceComponentsProps> = () => {\n  const { formProps, saveButtonProps, queryResult } = useForm<IPost>({\n    warnWhenUnsavedChanges: true,\n  })\n\n  const postData = queryResult?.data?.data\n  const { selectProps: categorySelectProps } = useSelect<ICategory>({\n    resource: 'categories',\n    defaultValue: postData?.category.id,\n  })\n\n  return (\n    <Edit\n      /* highlight-next-line */\n      mutationMode=\"undoable\"\n      canDelete\n      saveButtonProps={saveButtonProps}\n    >\n      <Form {...formProps} layout=\"vertical\">\n        <Form.Item\n          label=\"Title\"\n          name=\"title\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label=\"Category\"\n          name={['category', 'id']}\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Select {...categorySelectProps} />\n        </Form.Item>\n        <Form.Item\n          label=\"Status\"\n          name=\"status\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Select\n            options={[\n              {\n                label: 'Published',\n                value: 'published',\n              },\n              {\n                label: 'Draft',\n                value: 'draft',\n              },\n              {\n                label: 'Rejected',\n                value: 'rejected',\n              },\n            ]}\n          />\n        </Form.Item>\n      </Form>\n    </Edit>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/edit/2']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <EditButton recordItemId=\"2\">Edit Item 2</EditButton>\n          </div>\n        ),\n        edit: PostEdit,\n      },\n    ]}\n  />,\n)\n")),(0,i.kt)("h3",{id:"dataprovidername"},(0,i.kt)("inlineCode",{parentName:"h3"},"dataProviderName")),(0,i.kt)("p",null,"If not specified, Refine will use the default data provider. If you have multiple data providers and want to use a different one, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"dataProviderName")," property."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Refine } from '@pankod/refine-core'\nimport { Edit } from '@pankod/refine-antd'\nimport routerProvider from '@pankod/refine-react-router-v6'\nimport dataProvider from '@pankod/refine-simple-rest'\n\n// highlight-start\nconst PostEdit = () => {\n  return <Edit dataProviderName=\"other\">...</Edit>\n}\n// highlight-end\n\nexport const App: React.FC = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      // highlight-start\n      dataProvider={{\n        default: dataProvider('https://api.fake-rest.refine.dev/'),\n        other: dataProvider('https://other-api.fake-rest.refine.dev/'),\n      }}\n      // highlight-end\n      resources={[{ name: 'posts', edit: PostEdit }]}\n    />\n  )\n}\n")),(0,i.kt)("h3",{id:"goback"},(0,i.kt)("inlineCode",{parentName:"h3"},"goBack")),(0,i.kt)("p",null,"To customize the back button or to disable it, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"goBack")," property."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},"const { EditButton } = RefineAntd\n\n// visible-block-start\nimport { Edit, Icons } from '@pankod/refine-antd'\n\nconst PostEdit: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit goBack={<Icons.SmileOutlined />}>\n      <p>Rest of your page here</p>\n    </Edit>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts', '/posts/edit/123']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <EditButton recordItemId=\"123\">Edit Item 123</EditButton>\n          </div>\n        ),\n        edit: PostEdit,\n      },\n    ]}\n  />,\n)\n")),(0,i.kt)("h3",{id:"isloading"},(0,i.kt)("inlineCode",{parentName:"h3"},"isLoading")),(0,i.kt)("p",null,"To toggle the loading state of the ",(0,i.kt)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"isLoading")," property."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},"const { EditButton } = RefineAntd\n\n// visible-block-start\nimport { Edit } from '@pankod/refine-antd'\n\nconst PostEdit: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit isLoading={true}>\n      <p>Rest of your page here</p>\n    </Edit>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/edit/2']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <EditButton />\n          </div>\n        ),\n        edit: PostEdit,\n      },\n    ]}\n  />,\n)\n")),(0,i.kt)("h3",{id:"breadcrumb"},(0,i.kt)("inlineCode",{parentName:"h3"},"breadcrumb")),(0,i.kt)("p",null,"To customize or disable the breadcrumb, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"breadcrumb")," property. By default it uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"Breadcrumb")," component from ",(0,i.kt)("inlineCode",{parentName:"p"},"@pankod/refine-antd")," package."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/antd/components/breadcrumb"},"Refer to the ",(0,i.kt)("inlineCode",{parentName:"a"},"Breadcrumb")," documentation for detailed usage. ","\u2192")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"This feature can be managed globally via the ",(0,i.kt)("inlineCode",{parentName:"p"},"<Refine>")," component's ",(0,i.kt)("a",{parentName:"p",href:"/docs/api-reference/core/components/refine-config/#breadcrumb"},"options"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},"const { EditButton } = RefineAntd\n\n// visible-block-start\nimport { Edit, Breadcrumb } from '@pankod/refine-antd'\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      breadcrumb={\n        <div\n          style={{\n            padding: '3px 6px',\n            border: '2px dashed cornflowerblue',\n          }}\n        >\n          <Breadcrumb />\n        </div>\n      }\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/edit']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <EditButton />\n          </div>\n        ),\n        edit: PostEdit,\n      },\n    ]}\n  />,\n)\n")),(0,i.kt)("h3",{id:"wrapperprops"},(0,i.kt)("inlineCode",{parentName:"h3"},"wrapperProps")),(0,i.kt)("p",null,"If you want to customize the wrapper of the ",(0,i.kt)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"wrapperProps")," property. For ",(0,i.kt)("inlineCode",{parentName:"p"},"@pankod/refine-antd")," wrapper elements are simple ",(0,i.kt)("inlineCode",{parentName:"p"},"<div/>"),"s and ",(0,i.kt)("inlineCode",{parentName:"p"},"wrapperProps")," can get every attribute that ",(0,i.kt)("inlineCode",{parentName:"p"},"<div/>")," can get."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},"const { EditButton } = RefineAntd\n\n// visible-block-start\nimport { Edit } from '@pankod/refine-antd'\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      wrapperProps={{\n        style: {\n          backgroundColor: 'cornflowerblue',\n          padding: '16px',\n        },\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/edit']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <EditButton />\n          </div>\n        ),\n        edit: PostEdit,\n      },\n    ]}\n  />,\n)\n")),(0,i.kt)("h3",{id:"headerprops"},(0,i.kt)("inlineCode",{parentName:"h3"},"headerProps")),(0,i.kt)("p",null,"If you want to customize the header of the ",(0,i.kt)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"headerProps")," property."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://ant.design/components/page-header/"},"Refer to the ",(0,i.kt)("inlineCode",{parentName:"a"},"PageHeader")," documentation from Ant Design for detailed usage. ","\u2192")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},"const { EditButton } = RefineAntd\n\n// visible-block-start\nimport { Edit } from '@pankod/refine-antd'\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      headerProps={{\n        subTitle: 'This is a subtitle',\n        style: {\n          backgroundColor: 'cornflowerblue',\n          padding: '16px',\n        },\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/edit/2']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <EditButton />\n          </div>\n        ),\n        edit: PostEdit,\n      },\n    ]}\n  />,\n)\n")),(0,i.kt)("h3",{id:"contentprops"},(0,i.kt)("inlineCode",{parentName:"h3"},"contentProps")),(0,i.kt)("p",null,"If you want to customize the content of the ",(0,i.kt)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"contentProps")," property."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://ant.design/components/card/"},"Refer to the ",(0,i.kt)("inlineCode",{parentName:"a"},"Card")," documentation from Ant Design for detailed usage. ","\u2192")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},"const { EditButton } = RefineAntd\n\n// visible-block-start\nimport { Edit } from '@pankod/refine-antd'\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      contentProps={{\n        style: {\n          backgroundColor: 'cornflowerblue',\n          padding: '16px',\n        },\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/edit']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <EditButton />\n          </div>\n        ),\n        edit: PostEdit,\n      },\n    ]}\n  />,\n)\n")),(0,i.kt)("h3",{id:"headerbuttons"},(0,i.kt)("inlineCode",{parentName:"h3"},"headerButtons")),(0,i.kt)("p",null,"You can customize the buttons at the header by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"headerButtons")," property. It accepts ",(0,i.kt)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,i.kt)("inlineCode",{parentName:"p"},"({ defaultButtons }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},"const { EditButton } = RefineAntd\n\n// visible-block-start\nimport { Edit, Button } from '@pankod/refine-antd'\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      headerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button type=\"primary\">Custom Button</Button>\n        </>\n      )}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/edit/2']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <EditButton />\n          </div>\n        ),\n        edit: PostEdit,\n      },\n    ]}\n  />,\n)\n")),(0,i.kt)("h3",{id:"headerbuttonprops"},(0,i.kt)("inlineCode",{parentName:"h3"},"headerButtonProps")),(0,i.kt)("p",null,"You can customize the wrapper element of the buttons at the header by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"headerButtonProps")," property."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://ant.design/components/space/"},"Refer to the ",(0,i.kt)("inlineCode",{parentName:"a"},"Space")," documentation from Ant Design for detailed usage. ","\u2192")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},"const { EditButton } = RefineAntd\n\n// visible-block-start\nimport { Edit, Button } from '@pankod/refine-antd'\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      headerButtonProps={{\n        style: {\n          backgroundColor: 'cornflowerblue',\n          padding: '16px',\n        },\n      }}\n      // highlight-end\n      headerButtons={<Button type=\"primary\">Custom Button</Button>}\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/edit']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <EditButton />\n          </div>\n        ),\n        edit: PostEdit,\n      },\n    ]}\n  />,\n)\n")),(0,i.kt)("h3",{id:"footerbuttons"},(0,i.kt)("inlineCode",{parentName:"h3"},"footerButtons")),(0,i.kt)("p",null,"You can customize the buttons at the footer by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"footerButtons")," property. It accepts ",(0,i.kt)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,i.kt)("inlineCode",{parentName:"p"},"({ defaultButtons }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},"const { EditButton } = RefineAntd\n\n// visible-block-start\nimport { Edit, Button } from '@pankod/refine-antd'\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      footerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button type=\"primary\">Custom Button</Button>\n        </>\n      )}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/edit']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <EditButton />\n          </div>\n        ),\n        edit: PostEdit,\n      },\n    ]}\n  />,\n)\n")),(0,i.kt)("h3",{id:"footerbuttonprops"},(0,i.kt)("inlineCode",{parentName:"h3"},"footerButtonProps")),(0,i.kt)("p",null,"You can customize the wrapper element of the buttons at the footer by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"footerButtonProps")," property."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://ant.design/components/space/"},"Refer to the ",(0,i.kt)("inlineCode",{parentName:"a"},"Space")," documentation from Ant Design for detailed usage. ","\u2192")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},"const { EditButton } = RefineAntd\n\n// visible-block-start\nimport { Edit, Button } from '@pankod/refine-antd'\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      footerButtonProps={{\n        style: {\n          // hide-start\n          float: 'right',\n          marginRight: 24,\n          // hide-end\n          backgroundColor: 'cornflowerblue',\n          padding: '16px',\n        },\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={['/posts/edit']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <EditButton />\n          </div>\n        ),\n        edit: PostEdit,\n      },\n    ]}\n  />,\n)\n")),(0,i.kt)("h2",{id:"api-reference"},"API Reference"),(0,i.kt)("h3",{id:"properties-1"},"Properties"),(0,i.kt)(l,{module:"@pankod/refine-antd/Edit","contentProps-type":"[`CardProps`](https://ant.design/components/card/#API)","headerProps-type":"[`PageHeaderProps`](https://procomponents.ant.design/en-US/components/page-header)","headerButtons-default":"[`ListButton`](https://refine.dev/docs/api-reference/antd/components/buttons/list-button/) and [`RefreshButton`](https://refine.dev/docs/api-reference/antd/components/buttons/refresh-button/)","headerButtonProps-type":"[`SpaceProps`](https://ant.design/components/space/)","deleteButtonProps-type":"[`DeleteButtonProps`](/docs/api-reference/antd/components/buttons/delete-button/)","saveButtonProps-type":"[`SaveButtonProps`](https://refine.dev/docs/api-reference/antd/components/buttons/save-button/)","footerButtons-default":"[`SaveButton`](https://refine.dev/docs/api-reference/antd/components/buttons/save-button/) and [`DeleteButton`](https://refine.dev/docs/api-reference/antd/components/buttons/delete-button/)","footerButtonsProps-type":"[`SpaceProps`](https://ant.design/components/space/)","breadcrumb-default":"[`<Breadcrumb>`](https://ant.design/components/breadcrumb/)","goBack-default":"`<ArrowLeft />`","goBack-type":"`ReactNode`",mdxType:"PropsTable"}),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"*"),": These properties have default values in ",(0,i.kt)("inlineCode",{parentName:"p"},"RefineContext")," and can also be set on the ",(0,i.kt)("strong",{parentName:"p"},"<",(0,i.kt)("a",{parentName:"strong",href:"/docs/3.xx.xx/api-reference/core/components/refine-config"},"Refine"),">")," component.")))}h.isMDXComponent=!0}}]);