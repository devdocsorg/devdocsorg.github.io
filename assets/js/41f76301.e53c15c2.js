"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7995],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=d(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var d=2;d<o;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.r(t),n.d(t,{default:()=>l});var a=n(67294),r=n(86010);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,l),hidden:n},t)}},74866:(e,t,n)=>{n.r(t),n.d(t,{default:()=>y});var a=n(87462),r=n(67294),o=n(86010),l=n(12466),i=n(16550),s=n(91980),d=n(67392),p=n(50012);function u(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function c(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,d.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=c(e),[l,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[s,d]=h({queryString:n,groupId:a}),[u,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,p.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),f=(()=>{const e=s??u;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),d(e),g(e)}),[d,g,o]),tabValues:o}}var f=n(72389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:n,selectedValue:i,selectValue:s,tabValues:d}=e;const p=[],{blockElementScrollPositionUntilNextRender:u}=(0,l.o5)(),c=e=>{const t=e.currentTarget,n=p.indexOf(t),a=d[n].value;a!==i&&(u(t),s(a))},m=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},d.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>p.push(e),onKeyDown:m,onClick:c},l,{className:(0,o.Z)("tabs__item",k.tabItem,l?.className,{"tabs__item--active":i===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function N(e){const t=g(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",k.tabList)},r.createElement(b,(0,a.Z)({},e,t)),r.createElement(v,(0,a.Z)({},e,t)))}function y(e){const t=(0,f.Z)();return r.createElement(N,(0,a.Z)({key:String(t)},e))}},54364:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>f,frontMatter:()=>i,metadata:()=>d,toc:()=>u});var a=n(87462),r=(n(67294),n(3905)),o=n(74866),l=n(85162);const i={id:"strapi-v4",title:"Strapi-v4",sidebar_label:"Strapi-v4"},s=void 0,d={unversionedId:"advanced-tutorials/data-provider/strapi-v4",id:"advanced-tutorials/data-provider/strapi-v4",title:"Strapi-v4",description:"refine supports the features that come with Strapi-v4.",source:"@site/docs/advanced-tutorials/data-provider/strapi-v4.md",sourceDirName:"advanced-tutorials/data-provider",slug:"/advanced-tutorials/data-provider/strapi-v4",permalink:"/docs/advanced-tutorials/data-provider/strapi-v4",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/docs/advanced-tutorials/data-provider/strapi-v4.md",tags:[],version:"current",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{id:"strapi-v4",title:"Strapi-v4",sidebar_label:"Strapi-v4"},sidebar:"someSidebar",previous:{title:"Handling Filters",permalink:"/docs/advanced-tutorials/data-provider/handling-filters"},next:{title:"Supabase",permalink:"/docs/advanced-tutorials/data-provider/supabase"}},p={},u=[{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:2},{value:"API Parameters",id:"api-parameters",level:2},{value:"Create Collections",id:"create-collections",level:3},{value:"Fields Selection",id:"fields-selection",level:3},{value:"Relations Population",id:"relations-population",level:3},{value:"Relations Population for <code>/me</code> request",id:"relations-population-for-me-request",level:5},{value:"Publication State",id:"publication-state",level:3},{value:"Locale",id:"locale",level:3},{value:"<code>meta</code> Usages",id:"meta-usages",level:2},{value:"Example",id:"example",level:2}],c=(m="CodeSandboxExample",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var m;const h={toc:u},g="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(g,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"refine")," supports the features that come with ",(0,r.kt)("a",{parentName:"p",href:"https://docs.strapi.io/developer-docs/latest/getting-started/introduction.html"},"Strapi-v4"),"."),(0,r.kt)("p",null,"A few of the Strapi-v4 API features are as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Fields Selection"),(0,r.kt)("li",{parentName:"ul"},"Relations Population"),(0,r.kt)("li",{parentName:"ul"},"Publication State"),(0,r.kt)("li",{parentName:"ul"},"Locale")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"meta")," allows us to use the above features in hooks. Thus, we can fetch the data according to the parameters we want."),(0,r.kt)("p",null,"Hooks and components that support ",(0,r.kt)("inlineCode",{parentName:"p"},"meta"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Supported data hooks"),(0,r.kt)("th",{parentName:"tr",align:null},"Supported other hooks"),(0,r.kt)("th",{parentName:"tr",align:null},"Supported components"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/data/useUpdate/"},(0,r.kt)("inlineCode",{parentName:"a"},"useUpdate")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/useForm"},(0,r.kt)("inlineCode",{parentName:"a"},"useForm")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/antd/components/buttons/delete-button"},(0,r.kt)("inlineCode",{parentName:"a"},"DeleteButton")," ","\u2192"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/data/useUpdateMany/"},(0,r.kt)("inlineCode",{parentName:"a"},"useUpdateMany")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/antd/hooks/form/useModalForm"},(0,r.kt)("inlineCode",{parentName:"a"},"useModalForm")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/antd/components/buttons/refresh-button"},(0,r.kt)("inlineCode",{parentName:"a"},"RefreshButton")," ","\u2192"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/data/useDelete/"},(0,r.kt)("inlineCode",{parentName:"a"},"useDelete")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/antd/hooks/form/useDrawerForm"},(0,r.kt)("inlineCode",{parentName:"a"},"useDrawerForm")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/data/useDeleteMany/"},(0,r.kt)("inlineCode",{parentName:"a"},"useDeleteMany")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/antd/hooks/form/useStepsForm"},(0,r.kt)("inlineCode",{parentName:"a"},"useStepsForm")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/data/useCreate/"},(0,r.kt)("inlineCode",{parentName:"a"},"useCreate")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/useTable"},(0,r.kt)("inlineCode",{parentName:"a"},"useTable")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/data/useCreateMany/"},(0,r.kt)("inlineCode",{parentName:"a"},"useCreateMany")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/antd/hooks/table/useEditableTable"},(0,r.kt)("inlineCode",{parentName:"a"},"useEditableTable")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/data/useList/"},(0,r.kt)("inlineCode",{parentName:"a"},"useList")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/antd/hooks/list/useSimpleList"},(0,r.kt)("inlineCode",{parentName:"a"},"useSimpleList")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/data/useOne/"},(0,r.kt)("inlineCode",{parentName:"a"},"useOne")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/show/useShow"},(0,r.kt)("inlineCode",{parentName:"a"},"useShow")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/data/useMany/"},(0,r.kt)("inlineCode",{parentName:"a"},"useMany")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/import-export/useExport"},(0,r.kt)("inlineCode",{parentName:"a"},"useExport")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/data/useCustom/"},(0,r.kt)("inlineCode",{parentName:"a"},"useCustom")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/antd/hooks/field/useCheckboxGroup"},(0,r.kt)("inlineCode",{parentName:"a"},"useCheckboxGroup")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/useSelect/"},(0,r.kt)("inlineCode",{parentName:"a"},"useSelect")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/antd/hooks/field/useRadioGroup"},(0,r.kt)("inlineCode",{parentName:"a"},"useRadioGroup")," ","\u2192")),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"There is no need to use ",(0,r.kt)("inlineCode",{parentName:"p"},"meta")," for sorting, pagination, and, filters. Sorting, pagination, and, filters will be handled automatically by the strapi-v4 dataProvider.")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Normally, strapi-v4 backend returns data in the following format:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": 1,\n    "attributes": {\n        "title": "My title",\n        "content": "Long content...",\n}\n')),(0,r.kt)("p",{parentName:"admonition"},"However, we can use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/27a55320ada61a0624ed2f5b29331946334f7727/packages/strapi-v4/src/dataProvider.ts#L80"},"normalizeData")," to customize the data returned by the backend. So, our data will look like:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": 1,\n  "title": "My title",\n  "content": "Long content..."\n}\n'))),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @refinedev/strapi-v4\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"To make this example more visual, we used the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/master/packages/refine-antd"},(0,r.kt)("inlineCode",{parentName:"a"},"@refinedev/antd"))," package. If you are using Refine headless, you need to provide the components, hooks, or helpers imported from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/master/packages/refine-antd"},(0,r.kt)("inlineCode",{parentName:"a"},"@refinedev/antd"))," package.")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},"import { Refine } from '@refinedev/core'\n//highlight-next-line\nimport { DataProvider } from '@refinedev/strapi-v4'\n\nconst App: React.FC = () => {\n  return (\n    <Refine\n      //highlight-next-line\n      dataProvider={DataProvider('API_URL')}\n      /* ... */\n    >\n      {/* ... */}\n    </Refine>\n  )\n}\n")),(0,r.kt)("h2",{id:"api-parameters"},"API Parameters"),(0,r.kt)("p",null,"Let's examine how API parameters that come with Strapi-v4 are used with ",(0,r.kt)("inlineCode",{parentName:"p"},"meta"),". Then, let's see how it is used in the application."),(0,r.kt)("h3",{id:"create-collections"},"Create Collections"),(0,r.kt)("p",null,"We created two collections on ",(0,r.kt)("a",{parentName:"p",href:"https://strapi.io/"},"Strapi")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"posts")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"categories")," and added a relation between them. For detailed information on how to create a collection, you can check ",(0,r.kt)("a",{parentName:"p",href:"https://strapi.io/documentation/developer-docs/latest/getting-started/quick-start.html"},"here"),"."),(0,r.kt)(o.default,{defaultValue:"posts",values:[{label:"posts",value:"posts"},{label:"categories",value:"categories"}],mdxType:"Tabs"},(0,r.kt)(l.default,{value:"posts",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"posts")," has the following fields:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"id")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"title")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"content")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"category")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"createdAt")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"locale")))),(0,r.kt)(l.default,{value:"categories",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"categories")," has the following fields:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"id")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"title"))))),(0,r.kt)("h3",{id:"fields-selection"},"Fields Selection"),(0,r.kt)("p",null,"To select only some fields, we must specify these fields with `meta``."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.strapi.io/developer-docs/latest/developer-resources/database-apis-reference/rest-api.html#fields-selection"},"Refer to the Fields Selection documentation for detailed information. \u2192")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Get only id and title of all posts"',title:!0,only:!0,id:!0,and:!0,of:!0,all:!0,'posts"':!0},"const { tableProps } = useTable<IPost>({\n  meta: {\n    fields: ['id', 'title'],\n  },\n})\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Get all fields of all posts(id, title, category, content ...)"',title:'"Get',all:!0,fields:!0,of:!0,"posts(id,":!0,"title,":!0,"category,":!0,content:!0,'...)"':!0},"const { tableProps } = useTable<IPost>({\n  meta: {\n    fields: '*',\n  },\n})\n")),(0,r.kt)("p",null,"When sending the request, we can specify which fields will come, so we send ",(0,r.kt)("inlineCode",{parentName:"p"},"fields")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"meta")," to hooks that we will fetch data from. In this way, you can perform the queries of only the fields you want."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="PostList.tsx"',title:'"PostList.tsx"'},"import { useState } from 'react'\nimport {\n  List,\n  useTable,\n  getDefaultSortOrder,\n  FilterDropdown,\n  useSelect,\n  EditButton,\n  DeleteButton,\n} from '@refinedev/antd'\nimport { Table, Select, Space } from 'antd'\n\nimport { IPost } from 'interfaces'\n\nimport { API_URL } from '../../constants'\n\nexport const PostList: React.FC = () => {\n  const { tableProps, sorter } = useTable<IPost>({\n    meta: {\n      // highlight-start\n      fields: ['id', 'title'],\n      // highlight-end\n    },\n  })\n\n  return (\n    <List>\n      <Table\n        {...tableProps}\n        rowKey=\"id\"\n        pagination={{\n          ...tableProps.pagination,\n          showSizeChanger: true,\n        }}\n      >\n        <Table.Column\n          dataIndex=\"id\"\n          title=\"ID\"\n          defaultSortOrder={getDefaultSortOrder('id', sorter)}\n          sorter={{ multiple: 3 }}\n        />\n        <Table.Column\n          dataIndex=\"title\"\n          title=\"Title\"\n          defaultSortOrder={getDefaultSortOrder('title', sorter)}\n          sorter={{ multiple: 2 }}\n        />\n\n        <Table.Column<{ id: string }>\n          title=\"Actions\"\n          render={(_, record) => (\n            <Space>\n              <EditButton hideText size=\"small\" recordItemId={record.id} />\n              <DeleteButton hideText size=\"small\" recordItemId={record.id} />\n            </Space>\n          )}\n        />\n      </Table>\n    </List>\n  )\n}\n")),(0,r.kt)("div",{class:"img-container"},(0,r.kt)("div",{class:"window"},(0,r.kt)("div",{class:"control red"}),(0,r.kt)("div",{class:"control orange"}),(0,r.kt)("div",{class:"control green"})),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/strapi-v4/selection.png",alt:"Fields Selection Metadata"})),(0,r.kt)("h3",{id:"relations-population"},"Relations Population"),(0,r.kt)("p",null,"By default, relations are not populated when fetching entries."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"populate")," parameter is used to define which fields will be populated."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.strapi.io/developer-docs/latest/developer-resources/database-apis-reference/rest/populating-fields.html#population"},"Refer to the Relations Population documentation for detailed information. \u2192")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Get all the posts and populate the selected relations"',title:'"Get',all:!0,the:!0,posts:!0,and:!0,populate:!0,selected:!0,'relations"':!0},"const { tableProps } = useTable<IPost>({\n  meta: {\n    populate: ['category', 'cover'],\n  },\n})\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Get all posts and populate all their first-level relations"',title:'"Get',all:!0,posts:!0,and:!0,populate:!0,their:!0,"first-level":!0,'relations"':!0},"const { tableProps } = useTable<IPost>({\n  meta: {\n    populate: '*',\n  },\n})\n")),(0,r.kt)("p",null,"It should be noted that Strapi-V4 allows populating relations more than 1 level."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Get all posts and populate one second-level relation and first-level relation"',title:'"Get',all:!0,posts:!0,and:!0,populate:!0,one:!0,"second-level":!0,relation:!0,"first-level":!0,'relation"':!0},"const { tableProps } = useTable<IPost>({\n  meta: {\n    populate: {\n      category: {\n        populate: ['cover'],\n      },\n      cover: {\n        populate: [''],\n      },\n    },\n  },\n})\n")),(0,r.kt)("p",null,"In order to pull the ",(0,r.kt)("inlineCode",{parentName:"p"},"categories")," related to the posts, we can now show the categories in our list by defining the ",(0,r.kt)("inlineCode",{parentName:"p"},"meta")," ",(0,r.kt)("inlineCode",{parentName:"p"},"populate")," parameter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="PostList.tsx"',title:'"PostList.tsx"'},"import {\n  List,\n  useTable,\n  getDefaultSortOrder,\n  FilterDropdown,\n  useSelect,\n  EditButton,\n  DeleteButton,\n} from '@refinedev/antd'\nimport { Table, Select, Space } from 'antd'\n\nimport { IPost } from 'interfaces'\n\nimport { API_URL } from '../../constants'\n\nexport const PostList: React.FC = () => {\n  const { tableProps, sorter } = useTable<IPost>({\n    meta: {\n      fields: ['id', 'title'],\n      // highlight-start\n      populate: ['category'],\n      // highlight-end\n    },\n  })\n\n  // highlight-start\n  const { selectProps } = useSelect({\n    resource: 'categories',\n    optionLabel: 'title',\n    optionValue: 'id',\n  })\n  // highlight-end\n\n  return (\n    <List>\n      <Table\n        {...tableProps}\n        rowKey=\"id\"\n        pagination={{\n          ...tableProps.pagination,\n          showSizeChanger: true,\n        }}\n      >\n        <Table.Column\n          dataIndex=\"id\"\n          title=\"ID\"\n          defaultSortOrder={getDefaultSortOrder('id', sorter)}\n          sorter={{ multiple: 3 }}\n        />\n        <Table.Column\n          dataIndex=\"title\"\n          title=\"Title\"\n          defaultSortOrder={getDefaultSortOrder('title', sorter)}\n          sorter={{ multiple: 2 }}\n        />\n        //highlight-start\n        <Table.Column\n          dataIndex={['category', 'title']}\n          title=\"Category\"\n          filterDropdown={(props) => (\n            <FilterDropdown {...props}>\n              <Select\n                style={{ minWidth: 200 }}\n                mode=\"multiple\"\n                placeholder=\"Select Category\"\n                {...selectProps}\n              />\n            </FilterDropdown>\n          )}\n        />\n        //highlight-end\n        <Table.Column<{ id: string }>\n          title=\"Actions\"\n          render={(_, record) => (\n            <Space>\n              <EditButton hideText size=\"small\" recordItemId={record.id} />\n              <DeleteButton hideText size=\"small\" recordItemId={record.id} />\n            </Space>\n          )}\n        />\n      </Table>\n    </List>\n  )\n}\n")),(0,r.kt)("div",{class:"img-container"},(0,r.kt)("div",{class:"window"},(0,r.kt)("div",{class:"control red"}),(0,r.kt)("div",{class:"control orange"}),(0,r.kt)("div",{class:"control green"})),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/strapi-v4/category.png",alt:"category"})),(0,r.kt)("h5",{id:"relations-population-for-me-request"},"Relations Population for ",(0,r.kt)("inlineCode",{parentName:"h5"},"/me")," request"),(0,r.kt)("p",null,"If you need to the population for the ",(0,r.kt)("inlineCode",{parentName:"p"},"/me")," request you can use it like this in your ",(0,r.kt)("inlineCode",{parentName:"p"},"authProvider"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const strapiAuthHelper = AuthHelper(API_URL + '/api')\n\nstrapiAuthHelper.me('token', {\n  meta: {\n    populate: ['role'],\n  },\n})\n")),(0,r.kt)("h3",{id:"publication-state"},"Publication State"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The Draft & Publish feature should be enabled on Strapi.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.strapi.io/developer-docs/latest/developer-resources/database-apis-reference/rest-api.html#publication-state"},"Refer to the Publication State documentation for detailed information. \u2192")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"live"),": returns only published entries"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"preview"),": returns draft and published entries"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const { tableProps } = useTable<IPost>({\n  meta: {\n    publicationState: 'preview',\n  },\n})\n")),(0,r.kt)("p",null,"We can list the posts separately according to the ",(0,r.kt)("inlineCode",{parentName:"p"},"published")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"draft")," information."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="PostList"',title:'"PostList"'},"// highlight-next-line\nimport { useState } from 'react'\n\nimport {\n  List,\n  useTable,\n  getDefaultSortOrder,\n  FilterDropdown,\n  useSelect,\n  DateField,\n  EditButton,\n  DeleteButton,\n} from '@refinedev/antd'\nimport {\n  Table,\n  Select,\n  Space,\n  // highlight-start\n  Form,\n  Radio,\n  Tag,\n  // highlight-end\n} from 'antd'\n\nimport { IPost } from 'interfaces'\n\nimport { API_URL } from '../../constants'\n\nexport const PostList: React.FC = () => {\n  // highlight-start\n  const [publicationState, setPublicationState] = useState('live')\n  // highlight-end\n\n  const { tableProps, sorter } = useTable<IPost>({\n    meta: {\n      fields: ['id', 'title'],\n      populate: ['category'],\n      // highlight-start\n      publicationState,\n      // highlight-end\n    },\n  })\n\n  const { selectProps } = useSelect({\n    resource: 'categories',\n    optionLabel: 'title',\n    optionValue: 'id',\n  })\n\n  return (\n    <List>\n      //highlight-start\n      <Form\n        layout=\"inline\"\n        initialValues={{\n          publicationState,\n        }}\n      >\n        <Form.Item label=\"Publication State\" name=\"publicationState\">\n          <Radio.Group onChange={(e) => setPublicationState(e.target.value)}>\n            <Radio.Button value=\"live\">Published</Radio.Button>\n            <Radio.Button value=\"preview\">Draft and Published</Radio.Button>\n          </Radio.Group>\n        </Form.Item>\n      </Form>\n      //highlight-end\n      <br />\n      <Table\n        {...tableProps}\n        rowKey=\"id\"\n        pagination={{\n          ...tableProps.pagination,\n          showSizeChanger: true,\n        }}\n      >\n        <Table.Column\n          dataIndex=\"id\"\n          title=\"ID\"\n          defaultSortOrder={getDefaultSortOrder('id', sorter)}\n          sorter={{ multiple: 3 }}\n        />\n        <Table.Column\n          dataIndex=\"title\"\n          title=\"Title\"\n          defaultSortOrder={getDefaultSortOrder('title', sorter)}\n          sorter={{ multiple: 2 }}\n        />\n        <Table.Column\n          dataIndex={['category', 'title']}\n          title=\"Category\"\n          filterDropdown={(props) => (\n            <FilterDropdown {...props}>\n              <Select\n                style={{ minWidth: 200 }}\n                mode=\"multiple\"\n                placeholder=\"Select Category\"\n                {...selectProps}\n              />\n            </FilterDropdown>\n          )}\n        />\n        //highlight-start\n        <Table.Column\n          dataIndex=\"publishedAt\"\n          title=\"Status\"\n          render={(value) => {\n            return (\n              <Tag color={value ? 'green' : 'blue'}>\n                {value ? 'Published' : 'Draft'}\n              </Tag>\n            )\n          }}\n        />\n        //highlight-end\n        <Table.Column<{ id: string }>\n          title=\"Actions\"\n          render={(_, record) => (\n            <Space>\n              <EditButton hideText size=\"small\" recordItemId={record.id} />\n              <DeleteButton hideText size=\"small\" recordItemId={record.id} />\n            </Space>\n          )}\n        />\n      </Table>\n    </List>\n  )\n}\n")),(0,r.kt)("div",{class:"img-container"},(0,r.kt)("div",{class:"window"},(0,r.kt)("div",{class:"control red"}),(0,r.kt)("div",{class:"control orange"}),(0,r.kt)("div",{class:"control green"})),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/strapi-v4/publication.gif",alt:"publication"})),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"locale"},"Locale"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"To fetch content for a locale, make sure it has been already ",(0,r.kt)("a",{parentName:"p",href:"https://docs.strapi.io/user-docs/latest/settings/managing-global-settings.html#configuring-internationalization-locales"},"added to Strapi in the admin panel"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.strapi.io/developer-docs/latest/developer-resources/database-apis-reference/rest-api.html#locale"},"Refer to the Locale documentation for detailed information. \u2192")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const { tableProps } = useTable<IPost>({\n  meta: {\n    locale: 'de',\n  },\n})\n")),(0,r.kt)("p",null,"With the local parameter feature, we can fetch posts and categories created according to different languages."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useState } from \'react\'\n\nimport {\n  List,\n  useTable,\n  getDefaultSortOrder,\n  FilterDropdown,\n  useSelect,\n  EditButton,\n  DeleteButton,\n} from \'@refinedev/antd\'\nimport { Table, Select, Space, Form, Radio, Tag } from \'antd\'\n\nimport { IPost } from \'interfaces\'\n\nimport { API_URL } from \'../../constants\'\n\nexport const PostList: React.FC = () => {\n  //highlight-start\n  const [locale, setLocale] = useState(\'en\')\n  //highlight-end\n  const [publicationState, setPublicationState] = useState(\'live\')\n\n  const { tableProps, sorter } = useTable<IPost>({\n    meta: {\n      populate: [\'category\', \'cover\'],\n      //highlight-start\n      locale,\n      //highlight-end\n      publicationState,\n    },\n  })\n\n  const { selectProps } = useSelect({\n    resource: \'categories\',\n    optionLabel: \'title\',\n    optionValue: \'id\',\n    //highlight-start\n    meta: { locale },\n    //highlight-end\n  })\n\n  return (\n    <List>\n      <Form\n        layout="inline"\n        //highlight-start\n        initialValues={{\n          locale,\n          publicationState,\n        }}\n        //highlight-end\n      >\n        //highlight-start\n        <Form.Item label="Locale" name="locale">\n          <Radio.Group onChange={(e) => setLocale(e.target.value)}>\n            <Radio.Button value="en">English</Radio.Button>\n            <Radio.Button value="de">Deutsch</Radio.Button>\n          </Radio.Group>\n        </Form.Item>\n        //highlight-end\n        <Form.Item label="Publication State" name="publicationState">\n          <Radio.Group onChange={(e) => setPublicationState(e.target.value)}>\n            <Radio.Button value="live">Published</Radio.Button>\n            <Radio.Button value="preview">Draft and Published</Radio.Button>\n          </Radio.Group>\n        </Form.Item>\n      </Form>\n      <br />\n      <Table\n        {...tableProps}\n        rowKey="id"\n        pagination={{\n          ...tableProps.pagination,\n          showSizeChanger: true,\n        }}\n      >\n        <Table.Column\n          dataIndex="id"\n          title="ID"\n          defaultSortOrder={getDefaultSortOrder(\'id\', sorter)}\n          sorter={{ multiple: 3 }}\n        />\n        <Table.Column\n          dataIndex="title"\n          title="Title"\n          defaultSortOrder={getDefaultSortOrder(\'title\', sorter)}\n          sorter={{ multiple: 2 }}\n        />\n        <Table.Column\n          dataIndex={[\'category\', \'title\']}\n          title="Category"\n          filterDropdown={(props) => (\n            <FilterDropdown {...props}>\n              <Select\n                style={{ minWidth: 200 }}\n                mode="multiple"\n                placeholder="Select Category"\n                {...selectProps}\n              />\n            </FilterDropdown>\n          )}\n        />\n        <Table.Column\n          dataIndex="publishedAt"\n          title="Status"\n          render={(value) => {\n            return (\n              <Tag color={value ? \'green\' : \'blue\'}>\n                {value ? \'Published\' : \'Draft\'}\n              </Tag>\n            )\n          }}\n        />\n        <Table.Column<{ id: string }>\n          title="Actions"\n          render={(_, record) => (\n            <Space>\n              <EditButton hideText size="small" recordItemId={record.id} />\n              <DeleteButton hideText size="small" recordItemId={record.id} />\n            </Space>\n          )}\n        />\n      </Table>\n    </List>\n  )\n}\n')),(0,r.kt)("div",{class:"img-container"},(0,r.kt)("div",{class:"window"},(0,r.kt)("div",{class:"control red"}),(0,r.kt)("div",{class:"control orange"}),(0,r.kt)("div",{class:"control green"})),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/strapi-v4/locale.gif",alt:"locale"})),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"meta-usages"},(0,r.kt)("inlineCode",{parentName:"h2"},"meta")," Usages"),(0,r.kt)("p",null,"When creating and editing posts you can use these API parameters in ",(0,r.kt)("inlineCode",{parentName:"p"},"meta"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const { formProps, saveButtonProps, queryResult } = useForm<IPost>({\n  meta: { publicationState: 'preview' },\n})\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="EditList.tsx"',title:'"EditList.tsx"'},"const { formProps, saveButtonProps, queryResult } = useForm<IPost>({\n  meta: { populate: ['category', 'cover'] },\n})\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="CreateList.tsx"',title:'"CreateList.tsx"'},"const { selectProps } = useSelect({\n  meta: { locale: 'en' },\n})\n")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("admonition",{title:"Demo Credentials",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Username: ",(0,r.kt)("a",{parentName:"p",href:"mailto:demo@refine.dev"},"demo@refine.dev")),(0,r.kt)("p",{parentName:"admonition"},"Password: demodemo")),(0,r.kt)(c,{path:"data-provider-strapi-v4",mdxType:"CodeSandboxExample"}))}f.isMDXComponent=!0}}]);