"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6404],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=o.createContext({}),l=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=l(e.components);return o.createElement(p.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(t),m=r,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return t?o.createElement(h,a(a({ref:n},c),{},{components:t})):o.createElement(h,a({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=m;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[d]="string"==typeof e?e:r,a[1]=s;for(var l=2;l<i;l++)a[l]=t[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},64069:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var o=t(87462),r=(t(67294),t(3905));const i={id:"list-button",title:"List",swizzle:!0},a=void 0,s={unversionedId:"api-reference/mantine/components/buttons/list-button",id:"version-3.xx.xx/api-reference/mantine/components/buttons/list-button",title:"List",description:"` is using Mantine  component. It uses the list method from useNavigation` under the hood. It can be useful when redirecting the app to the list page route of resource.",source:"@site/versioned_docs/version-3.xx.xx/api-reference/mantine/components/buttons/list.md",sourceDirName:"api-reference/mantine/components/buttons",slug:"/api-reference/mantine/components/buttons/list-button",permalink:"/docs/3.xx.xx/api-reference/mantine/components/buttons/list-button",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/versioned_docs/version-3.xx.xx/api-reference/mantine/components/buttons/list.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{id:"list-button",title:"List",swizzle:!0},sidebar:"someSidebar",previous:{title:"Import",permalink:"/docs/3.xx.xx/api-reference/mantine/components/buttons/import-button"},next:{title:"Refresh",permalink:"/docs/3.xx.xx/api-reference/mantine/components/buttons/refresh-button"}},p={},l=[{value:"Usage",id:"usage",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>resourceNameOrRouteName</code>",id:"resourcenameorroutename",level:3},{value:"<code>hideText</code>",id:"hidetext",level:3},{value:"<code>accessControl</code>",id:"accesscontrol",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3}],c=(d="PropsTable",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var d;const u={toc:l},m="wrapper";function h(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live shared",live:!0,shared:!0},"const { default: routerProvider } = RefineReactRouterV6\nconst { default: simpleRest } = RefineSimpleRest\nsetRefineProps({\n  routerProvider,\n  dataProvider: simpleRest('https://api.fake-rest.refine.dev'),\n  notificationProvider: RefineMantine.notificationProvider,\n  Layout: RefineMantine.Layout,\n  Sider: () => null,\n  catchAll: <RefineMantine.ErrorComponent />,\n})\n\nconst Wrapper = ({ children }) => {\n  return (\n    <RefineMantine.MantineProvider\n      theme={RefineMantine.LightTheme}\n      withNormalizeCSS\n      withGlobalStyles\n    >\n      <RefineMantine.Global\n        styles={{ body: { WebkitFontSmoothing: 'auto' } }}\n      />\n      <RefineMantine.NotificationsProvider position=\"top-right\">\n        {children}\n      </RefineMantine.NotificationsProvider>\n    </RefineMantine.MantineProvider>\n  )\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<ListButton>")," is using Mantine ",(0,r.kt)("a",{parentName:"p",href:"https://mantine.dev/core/button/"},(0,r.kt)("inlineCode",{parentName:"a"},"<Button>"))," component. It uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"list")," method from ",(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/navigation/useNavigation"},(0,r.kt)("inlineCode",{parentName:"a"},"useNavigation"))," under the hood. It can be useful when redirecting the app to the list page route of resource."),(0,r.kt)("admonition",{title:"Swizzle",type:"info-tip"},(0,r.kt)("p",{parentName:"admonition"},"You can swizzle this component to customize it with the ",(0,r.kt)("a",{parentName:"p",href:"/docs/packages/documentation/cli"},(0,r.kt)("strong",{parentName:"a"},"refine CLI")))),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=420px hideCode",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"420px",hideCode:!0},"setInitialRoutes(['/posts/show/123'])\nimport { Refine } from '@pankod/refine-core'\nimport { ShowButton } from '@pankod/refine-mantine'\n\n// visible-block-start\nimport { useShow } from '@pankod/refine-core'\nimport {\n  Show,\n  Title,\n  Text,\n  MarkdownField,\n  //highlight-next-line\n  ListButton,\n} from '@pankod/refine-mantine'\n\nconst PostShow: React.FC<IResourceComponentsProps> = () => {\n  const { queryResult } = useShow<IPost>()\n  const { data, isLoading } = queryResult\n  const record = data?.data\n\n  return (\n    // highlight-next-line\n    <Show headerButtons={<ListButton />} isLoading={isLoading}>\n      <Title order={5}>Id</Title>\n      <Text mt=\"sm\">{record?.id}</Text>\n\n      <Title mt=\"sm\" order={5}>\n        Title\n      </Title>\n      <Text mt=\"sm\">{record?.title}</Text>\n\n      <Title mt=\"sm\" order={5}>\n        Content\n      </Title>\n      <MarkdownField value={record?.content} />\n    </Show>\n  )\n}\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      resources={[\n        {\n          name: 'posts',\n          show: PostShow,\n          list: () => (\n            <div>\n              <p>This page is empty.</p>\n              <ShowButton recordItemId=\"123\">Show Item 123</ShowButton>\n            </div>\n          ),\n        },\n      ]}\n    />\n  )\n}\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The button text is defined automatically by ",(0,r.kt)("strong",{parentName:"p"},"refine")," based on ",(0,r.kt)("em",{parentName:"p"},"resource")," object name property.")),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"resourcenameorroutename"},(0,r.kt)("inlineCode",{parentName:"h3"},"resourceNameOrRouteName")),(0,r.kt)("p",null,"Redirection endpoint(",(0,r.kt)("inlineCode",{parentName:"p"},"resourceNameOrRouteName/list"),") is defined by ",(0,r.kt)("inlineCode",{parentName:"p"},"resourceNameOrRouteName")," property. By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"<ListButton>")," uses ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," property of the resource object as the endpoint to redirect after clicking."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=200px",live:!0,url:"http://localhost:3000",previewHeight:"200px"},"setInitialRoutes(['/'])\n\nimport { Refine, useRouterContext, useNavigation } from '@pankod/refine-core'\nimport { Button, Code, Space, Text } from '@pankod/refine-mantine'\n\n// visible-block-start\nimport { ListButton } from '@pankod/refine-mantine'\n\nconst MyListComponent = () => {\n  return <ListButton resourceNameOrRouteName=\"categories\" />\n}\n// visible-block-end\n\nconst ListPage = () => {\n  const { list } = useNavigation()\n  const params = useRouterContext().useParams()\n\n  return (\n    <div>\n      <Text italic color=\"dimmed\" size=\"sm\">\n        URL Parameters:\n      </Text>\n      <Code>{JSON.stringify(params)}</Code>\n      <Space h=\"md\" />\n      <Button size=\"xs\" variant=\"outline\" onClick={() => list('posts')}>\n        Go back\n      </Button>\n    </div>\n  )\n}\n\nconst App = () => {\n  return (\n    <Refine\n      resources={[\n        {\n          name: 'posts',\n          list: MyListComponent,\n        },\n        {\n          name: 'categories',\n          list: ListPage,\n        },\n      ]}\n    />\n  )\n}\n\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n)\n")),(0,r.kt)("p",null,"Clicking the button will trigger the ",(0,r.kt)("inlineCode",{parentName:"p"},"list")," method of ",(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/navigation/useNavigation"},(0,r.kt)("inlineCode",{parentName:"a"},"useNavigation"))," and then redirect to ",(0,r.kt)("inlineCode",{parentName:"p"},"/categories"),"."),(0,r.kt)("h3",{id:"hidetext"},(0,r.kt)("inlineCode",{parentName:"h3"},"hideText")),(0,r.kt)("p",null,"It is used to show and not show the text of the button. When ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", only the button icon is visible."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=200px",live:!0,url:"http://localhost:3000",previewHeight:"200px"},"setInitialRoutes(['/'])\n\nimport { Refine } from '@pankod/refine-core'\n\n// visible-block-start\nimport { ListButton } from '@pankod/refine-mantine'\n\nconst MyListComponent = () => {\n  return <ListButton hideText />\n}\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      resources={[\n        {\n          name: 'posts',\n          list: MyListComponent,\n        },\n      ]}\n    />\n  )\n}\n\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n)\n")),(0,r.kt)("h3",{id:"accesscontrol"},(0,r.kt)("inlineCode",{parentName:"h3"},"accessControl")),(0,r.kt)("p",null,"This prop can be used to skip access control check with its ",(0,r.kt)("inlineCode",{parentName:"p"},"enabled")," property or to hide the button when the user does not have the permission to access the resource with ",(0,r.kt)("inlineCode",{parentName:"p"},"hideIfUnauthorized")," property. This is relevant only when an ",(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/providers/accessControl-provider"},(0,r.kt)("inlineCode",{parentName:"a"},"accessControlProvider"))," is provided to ",(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/components/refine-config"},(0,r.kt)("inlineCode",{parentName:"a"},"<Refine/>"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { ListButton } from '@pankod/refine-mantine'\n\nexport const MyListComponent = () => {\n  return (\n    <ListButton accessControl={{ enabled: true, hideIfUnauthorized: true }} />\n  )\n}\n")),(0,r.kt)("h2",{id:"api-reference"},"API Reference"),(0,r.kt)("h3",{id:"properties-1"},"Properties"),(0,r.kt)(c,{module:"@pankod/refine-mantine/ListButton",mdxType:"PropsTable"}))}h.isMDXComponent=!0}}]);