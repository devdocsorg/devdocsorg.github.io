"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[95853,64759,91692,43269],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=l(n),m=r,h=c["".concat(p,".").concat(m)]||c[m]||u[m]||i;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},62874:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={},o=void 0,s={unversionedId:"api-reference/core/hooks/data/useInfiniteList/basic-usage-live-preview",id:"api-reference/core/hooks/data/useInfiniteList/basic-usage-live-preview",title:"basic-usage-live-preview",description:"",source:"@site/docs/api-reference/core/hooks/data/useInfiniteList/basic-usage-live-preview.md",sourceDirName:"api-reference/core/hooks/data/useInfiniteList",slug:"/api-reference/core/hooks/data/useInfiniteList/basic-usage-live-preview",permalink:"/docs/api-reference/core/hooks/data/useInfiniteList/basic-usage-live-preview",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/docs/api-reference/core/hooks/data/useInfiniteList/basic-usage-live-preview.md",tags:[],version:"current",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{}},p={},l=[],d={toc:l},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/categories previewHeight=300px",live:!0,url:"http://localhost:3000/categories",previewHeight:"300px"},'import React from "react";\nimport { Refine } from "@refinedev/core";\n\nsetInitialRoutes(["/posts"]);\n// visible-block-start\nimport React from "react";\nimport { useInfiniteList } from "@refinedev/core";\n\nconst PostList = () => {\n    const {\n        data,\n        isError,\n        isLoading,\n        hasNextPage,\n        fetchNextPage,\n        isFetchingNextPage,\n    } = useInfiniteList({\n        resource: "categories",\n        pagination: {\n            pageSize: 4,\n        },\n    });\n\n    if (isLoading) {\n        return <p>Loading</p>;\n    }\n    if (isError) {\n        return <p>Something went wrong</p>;\n    }\n\n    const allPages = [].concat(...(data?.pages ?? []).map((page) => page.data));\n\n    return (\n        <div>\n            <ul>\n                {allPages.map(({ id, title }) => (\n                    <li key={id}>\n                        {id}.{title}\n                    </li>\n                ))}\n            </ul>\n            {hasNextPage && (\n                <button\n                    onClick={() => fetchNextPage()}\n                    disabled={isFetchingNextPage}\n                >\n                    {isFetchingNextPage ? "Loading more..." : "Load More"}\n                </button>\n            )}\n        </div>\n    );\n};\n// visible-block-end\n\nsetRefineProps({\n    // Layout: (props: LayoutProps) => <Layout {...props} />,\n    resources: [\n        {\n            name: "posts",\n            list: PostList,\n        },\n    ],\n});\n\nrender(<RefineHeadlessDemo />);\n')))}u.isMDXComponent=!0},31666:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={},o=void 0,s={unversionedId:"api-reference/core/hooks/data/useInfiniteList/filtering-live-preview",id:"api-reference/core/hooks/data/useInfiniteList/filtering-live-preview",title:"filtering-live-preview",description:"",source:"@site/docs/api-reference/core/hooks/data/useInfiniteList/filtering-live-preview.md",sourceDirName:"api-reference/core/hooks/data/useInfiniteList",slug:"/api-reference/core/hooks/data/useInfiniteList/filtering-live-preview",permalink:"/docs/api-reference/core/hooks/data/useInfiniteList/filtering-live-preview",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/docs/api-reference/core/hooks/data/useInfiniteList/filtering-live-preview.md",tags:[],version:"current",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{}},p={},l=[],d={toc:l},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css",metastring:"live shared",live:!0,shared:!0},"body {\n    padding: 4px;\n    background: white;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/products previewHeight=300px hideCode",live:!0,url:"http://localhost:3000/products",previewHeight:"300px",hideCode:!0},'setInitialRoutes(["/products"]);\n\n// visible-block-start\nimport { useState } from "react";\nimport { useInfiniteList, HttpError } from "@refinedev/core";\n\ninterface IProduct {\n    id: number;\n    name: string;\n    material: string;\n}\n\nconst ProductList: React.FC = () => {\n    //highlight-next-line\n    const [value, setValue] = useState("Cotton");\n\n    const {\n        data,\n        isLoading,\n        isError,\n        hasNextPage,\n        fetchNextPage,\n        isFetchingNextPage,\n    } = useInfiniteList<IProduct, HttpError>({\n        resource: "products",\n        //highlight-start\n        filters: [\n            {\n                field: "material",\n                operator: "eq",\n                value,\n            },\n        ],\n        //highlight-end\n    });\n\n    if (isLoading) {\n        return <div>Loading...</div>;\n    }\n\n    if (isError) {\n        return <div>Something went wrong!</div>;\n    }\n\n    const allPages = [].concat(...(data?.pages ?? []).map((page) => page.data));\n\n    return (\n        <div>\n            {/* highlight-start */}\n            <span> material: </span>\n            <select value={value} onChange={(e) => setValue(e.target.value)}>\n                {["Cotton", "Bronze", "Plastic"].map((material) => (\n                    <option key={material} value={material}>\n                        {material}\n                    </option>\n                ))}\n            </select>\n            {/* highlight-end */}\n\n            <ul>\n                {allPages.map((product) => (\n                    <li key={product.id}>\n                        {product.name} - ({product.material})\n                    </li>\n                ))}\n            </ul>\n\n            {hasNextPage && (\n                <button\n                    onClick={() => fetchNextPage()}\n                    disabled={isFetchingNextPage}\n                >\n                    {isFetchingNextPage ? "Loading more..." : "Load More"}\n                </button>\n            )}\n        </div>\n    );\n};\n\n// visible-block-end\n\nsetRefineProps({\n    resources: [\n        {\n            name: "products",\n            list: ProductList,\n        },\n    ],\n});\n\nrender(<RefineHeadlessDemo />);\n')))}u.isMDXComponent=!0},19305:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>N,frontMatter:()=>p,metadata:()=>d,toc:()=>u});var a=n(87462),r=(n(67294),n(3905)),i=n(62874),o=n(46653),s=n(31666);const p={title:"useInfiniteList",siderbar_label:"useInfiniteList",source:"https://github.com/refinedev/refine/blob/next/packages/core/src/hooks/data/useInfiniteList.ts",description:"useInfiniteList data hook from refine is a modified version of TanStack Query's useInfiniteQuery for retrieving items from a resource with pagination, search, sort, and filter configurations."},l=void 0,d={unversionedId:"api-reference/core/hooks/data/useInfiniteList/index",id:"api-reference/core/hooks/data/useInfiniteList/index",title:"useInfiniteList",description:"useInfiniteList data hook from refine is a modified version of TanStack Query's useInfiniteQuery for retrieving items from a resource with pagination, search, sort, and filter configurations.",source:"@site/docs/api-reference/core/hooks/data/useInfiniteList/index.md",sourceDirName:"api-reference/core/hooks/data/useInfiniteList",slug:"/api-reference/core/hooks/data/useInfiniteList/",permalink:"/docs/api-reference/core/hooks/data/useInfiniteList/",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/docs/api-reference/core/hooks/data/useInfiniteList/index.md",tags:[],version:"current",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{title:"useInfiniteList",siderbar_label:"useInfiniteList",source:"https://github.com/refinedev/refine/blob/next/packages/core/src/hooks/data/useInfiniteList.ts",description:"useInfiniteList data hook from refine is a modified version of TanStack Query's useInfiniteQuery for retrieving items from a resource with pagination, search, sort, and filter configurations."},sidebar:"someSidebar",previous:{title:"useList",permalink:"/docs/api-reference/core/hooks/data/useList/"},next:{title:"useMany",permalink:"/docs/api-reference/core/hooks/data/useMany/"}},c={},u=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Pagination",id:"pagination",level:2},{value:"Sorting",id:"sorting",level:2},{value:"Filtering",id:"filtering",level:2},{value:"Realtime Updates",id:"realtime-updates",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>resource</code> <PropTag required />",id:"resource-",level:3},{value:"<code>dataProviderName</code>",id:"dataprovidername",level:3},{value:"<code>filters</code>",id:"filters",level:3},{value:"<code>sorters</code>",id:"sorters",level:3},{value:"<code>pagination</code>",id:"pagination-1",level:3},{value:"<code>current</code>",id:"current",level:4},{value:"<code>pageSize</code>",id:"pagesize",level:4},{value:"<code>mode</code>",id:"mode",level:4},{value:"<code>queryOptions</code>",id:"queryoptions",level:3},{value:"<code>meta</code>",id:"meta",level:3},{value:"<code>successNotification</code>",id:"successnotification",level:3},{value:"<code>errorNotification</code>",id:"errornotification",level:3},{value:"<code>liveMode</code>",id:"livemode",level:3},{value:"<code>onLiveEvent</code>",id:"onliveevent",level:3},{value:"<code>liveParams</code>",id:"liveparams",level:3},{value:"<del><code>config</code></del>",id:"config",level:3},{value:"<del><code>hasPagination</code></del>",id:"haspagination",level:3},{value:"Return Values",id:"return-values",level:2},{value:"FAQ",id:"faq",level:2},{value:"How to use cursor-based pagination?",id:"how-to-use-cursor-based-pagination",level:3},{value:"How to override the <code>getNextPageParam</code> method?",id:"how-to-override-the-getnextpageparam-method",level:3},{value:"API",id:"api",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Return Values",id:"return-values-1",level:3},{value:"Example",id:"example",level:2}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},h=m("PropTag"),f=m("PropsTable"),k=m("CodeSandboxExample"),g={toc:u},v="wrapper";function N(e){let{components:t,...n}=e;return(0,r.kt)(v,(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useInfiniteList")," is an extended version of TanStack Query's ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/query/v4/docs/react/reference/useInfiniteQuery"},(0,r.kt)("inlineCode",{parentName:"a"},"useInfiniteQuery"))," used for retrieving items from a ",(0,r.kt)("inlineCode",{parentName:"p"},"resource")," with pagination, sort, and filter configurations. It is ideal for lists where the total number of records is unknown and the user loads the next pages with a button."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"It uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"getList")," method as the query function from the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/data-provider"},(0,r.kt)("inlineCode",{parentName:"a"},"dataProvider"))," which is passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"<Refine>"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"It uses a query key to cache the data. The ",(0,r.kt)("strong",{parentName:"p"},"query key")," is generated from the provided properties. You can see the query key by using the TanStack Query devtools."))),(0,r.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,r.kt)("p",null,"Here is a basic example of how to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"useInfiniteList")," hook."),(0,r.kt)(i.default,{mdxType:"BasicUsageLivePreview"}),(0,r.kt)("h2",{id:"pagination"},"Pagination"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useInfiniteList")," hook supports pagination properties just like ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useList/"},(0,r.kt)("inlineCode",{parentName:"a"},"useList")),". To handle pagination, the ",(0,r.kt)("inlineCode",{parentName:"p"},"useInfiniteList")," hook passes the ",(0,r.kt)("inlineCode",{parentName:"p"},"pagination")," property to the ",(0,r.kt)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProvider"),"."),(0,r.kt)("p",null,"Dynamically changing the ",(0,r.kt)("inlineCode",{parentName:"p"},"pagination")," properties will trigger a new request. Also, the ",(0,r.kt)("inlineCode",{parentName:"p"},"fetchNextPage")," method will increase the ",(0,r.kt)("inlineCode",{parentName:"p"},"pagination.current")," property by one and trigger a new request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { useInfiniteList } from "@refinedev/core";\n\nconst postListQueryResult = useInfiniteList({\n    resource: "posts",\n    pagination: { current: 3, pageSize: 8 },\n});\n')),(0,r.kt)("h2",{id:"sorting"},"Sorting"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"useInfiniteList")," hook supports the sorting feature. You can pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"sorters")," property to enable sorting. To handle sorting, the ",(0,r.kt)("inlineCode",{parentName:"p"},"useInfiniteList")," hook passes the ",(0,r.kt)("inlineCode",{parentName:"p"},"sorters")," property to the ",(0,r.kt)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProvider"),"."),(0,r.kt)("p",null,"Dynamically changing the ",(0,r.kt)("inlineCode",{parentName:"p"},"sorters")," property will trigger a new request."),(0,r.kt)(o.default,{mdxType:"SortingLivePreview"}),(0,r.kt)("h2",{id:"filtering"},"Filtering"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"useInfiniteList")," hook supports the filtering feature. You can pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"filters")," property to enable filtering. To handle filtering, the ",(0,r.kt)("inlineCode",{parentName:"p"},"useInfiniteList")," hook passes the ",(0,r.kt)("inlineCode",{parentName:"p"},"filters")," property to the ",(0,r.kt)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProvider"),"."),(0,r.kt)("p",null,"Dynamically changing the ",(0,r.kt)("inlineCode",{parentName:"p"},"filters")," property will trigger a new request."),(0,r.kt)(s.default,{mdxType:"FilteringLivePreview"}),(0,r.kt)("h2",{id:"realtime-updates"},"Realtime Updates"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This feature is only available if you use a ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider"},"Live Provider"),".")),(0,r.kt)("p",null,"When the ",(0,r.kt)("inlineCode",{parentName:"p"},"useInfiniteList")," hook is mounted, it will call the ",(0,r.kt)("inlineCode",{parentName:"p"},"subscribe")," method from the ",(0,r.kt)("inlineCode",{parentName:"p"},"liveProvider")," with some parameters such as ",(0,r.kt)("inlineCode",{parentName:"p"},"channel"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"resource")," etc. It is useful when you want to subscribe to live updates."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"liveProvider")," documentation for more information ","\u2192")),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"resource-"},(0,r.kt)("inlineCode",{parentName:"h3"},"resource")," ",(0,r.kt)(h,{required:!0,mdxType:"PropTag"})),(0,r.kt)("p",null,"It will be passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProvider")," as a parameter. The parameter is usually used as an API endpoint path. It all depends on how to handle the ",(0,r.kt)("inlineCode",{parentName:"p"},"resource")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"getList")," method. See the ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorial/understanding-dataprovider/create-dataprovider/"},"creating a data provider")," section for an example of how resources are handled."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useInfiniteList({\n    resource: "categories",\n});\n')),(0,r.kt)("h3",{id:"dataprovidername"},(0,r.kt)("inlineCode",{parentName:"h3"},"dataProviderName")),(0,r.kt)("p",null,"If there is more than one ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProvider"),", you can specify which one to use by passing the ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProviderName")," prop. It is useful when you have a different data provider for different resources."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useInfiniteList({\n    dataProviderName: "second-data-provider",\n});\n')),(0,r.kt)("h3",{id:"filters"},(0,r.kt)("inlineCode",{parentName:"h3"},"filters")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"filters")," will be passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProvider")," as a parameter. It is used to send filter query parameters to the API."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudfilters"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"CrudFilters")," interface for more information ","\u2192")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useInfiniteList({\n    filters: [\n        {\n            field: "title",\n            operator: "contains",\n            value: "Foo",\n        },\n    ],\n});\n')),(0,r.kt)("h3",{id:"sorters"},(0,r.kt)("inlineCode",{parentName:"h3"},"sorters")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sorters")," will be passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProvider")," as a parameter. It is used to send sort query parameters to the API."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"docs/api-reference/core/interfaceReferences#crudsorting"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"CrudSorting")," interface for more information ","\u2192")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useInfiniteList({\n    sorters: [\n        {\n            field: "title",\n            order: "asc",\n        },\n    ],\n});\n')),(0,r.kt)("h3",{id:"pagination-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"pagination")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"pagination")," will be passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProvider")," as a parameter. It is used to send pagination query parameters to the API."),(0,r.kt)("h4",{id:"current"},(0,r.kt)("inlineCode",{parentName:"h4"},"current")),(0,r.kt)("p",null,"You can pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"current")," page number to the ",(0,r.kt)("inlineCode",{parentName:"p"},"pagination")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useInfiniteList({\n    pagination: {\n        current: 2,\n    },\n});\n")),(0,r.kt)("h4",{id:"pagesize"},(0,r.kt)("inlineCode",{parentName:"h4"},"pageSize")),(0,r.kt)("p",null,"You can pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"pageSize")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"pagination")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useInfiniteList({\n    pagination: {\n        pageSize: 20,\n    },\n});\n")),(0,r.kt)("h4",{id:"mode"},(0,r.kt)("inlineCode",{parentName:"h4"},"mode")),(0,r.kt)("p",null,"It can be ",(0,r.kt)("inlineCode",{parentName:"p"},'"off"'),", ",(0,r.kt)("inlineCode",{parentName:"p"},'"client"')," or ",(0,r.kt)("inlineCode",{parentName:"p"},'"server"'),". It is used to determine whether to use server-side pagination or not."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useInfiniteList({\n    pagination: {\n        mode: "off",\n    },\n});\n')),(0,r.kt)("h3",{id:"queryoptions"},(0,r.kt)("inlineCode",{parentName:"h3"},"queryOptions")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"queryOptions")," is used to pass additional options to the ",(0,r.kt)("inlineCode",{parentName:"p"},"useQuery")," hook. It is useful when you want to pass additional options to the ",(0,r.kt)("inlineCode",{parentName:"p"},"useQuery")," hook."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/query/v4/docs/react/reference/useQuery"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"useQuery")," documentation for more information ","\u2192")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useInfiniteList({\n    queryOptions: {\n        retry: 3,\n    },\n});\n")),(0,r.kt)("h3",{id:"meta"},(0,r.kt)("inlineCode",{parentName:"h3"},"meta")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/general-concepts/#meta"},(0,r.kt)("inlineCode",{parentName:"a"},"meta"))," is used following two purposes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To pass additional information to data provider methods."),(0,r.kt)("li",{parentName:"ul"},"Generate GraphQL queries using plain JavaScript Objects (JSON). Please refer ",(0,r.kt)("a",{parentName:"li",href:"/docs/advanced-tutorials/data-provider/graphql/#edit-page"},"GraphQL")," for more information.")),(0,r.kt)("p",null,"In the following example, we pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"headers")," property in the ",(0,r.kt)("inlineCode",{parentName:"p"},"meta")," object to the ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," method. With similar logic, you can pass any properties to specifically handle the data provider methods."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useInfiniteList({\n    // highlight-start\n    meta: {\n        headers: { "x-meta-data": "true" },\n    },\n    // highlight-end\n});\n\nconst myDataProvider = {\n    //...\n    getList: async ({\n        resource,\n        pagination,\n        sorters,\n        filters,\n        // highlight-next-line\n        meta,\n    }) => {\n        // highlight-next-line\n        const headers = meta?.headers ?? {};\n        const url = `${apiUrl}/${resource}`;\n\n        //...\n        //...\n\n        // highlight-next-line\n        const { data } = await httpClient.get(`${url}`, { headers });\n\n        return {\n            data,\n        };\n    },\n    //...\n};\n')),(0,r.kt)("h3",{id:"successnotification"},(0,r.kt)("inlineCode",{parentName:"h3"},"successNotification")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/notification-provider/"},(0,r.kt)("inlineCode",{parentName:"a"},"NotificationProvider"))," is required for this prop to work.")),(0,r.kt)("p",null,"After data is fetched successfully, ",(0,r.kt)("inlineCode",{parentName:"p"},"useInfiniteList")," can call ",(0,r.kt)("inlineCode",{parentName:"p"},"open")," function from ",(0,r.kt)("inlineCode",{parentName:"p"},"NotificationProvider")," to show a success notification. With this prop, you can customize the success notification."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useInfiniteList({\n    successNotification: (data, values, resource) => {\n        return {\n            message: `${data.title} Successfully fetched.`,\n            description: "Success with no errors",\n            type: "success",\n        };\n    },\n});\n')),(0,r.kt)("h3",{id:"errornotification"},(0,r.kt)("inlineCode",{parentName:"h3"},"errorNotification")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/notification-provider/"},(0,r.kt)("inlineCode",{parentName:"a"},"NotificationProvider"))," is required for this prop to work.")),(0,r.kt)("p",null,"After data fetching is failed, ",(0,r.kt)("inlineCode",{parentName:"p"},"useInfiniteList")," will call ",(0,r.kt)("inlineCode",{parentName:"p"},"open")," function from ",(0,r.kt)("inlineCode",{parentName:"p"},"NotificationProvider")," to show an error notification. With this prop, you can customize the error notification."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useInfiniteList({\n    errorNotification: (data, values, resource) => {\n        return {\n            message: `Something went wrong when getting ${data.id}`,\n            description: "Error",\n            type: "error",\n        };\n    },\n});\n')),(0,r.kt)("h3",{id:"livemode"},(0,r.kt)("inlineCode",{parentName:"h3"},"liveMode")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/"},(0,r.kt)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,r.kt)("p",null,'Determines whether to update data automatically ("auto") or not ("manual") if a related live event is received. It can be used to update and show data in Realtime throughout your app.\nFor more information about live mode, please check the ',(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/#livemode"},"Live / Realtime")," page."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useInfiniteList({\n    liveMode: "auto",\n});\n')),(0,r.kt)("h3",{id:"onliveevent"},(0,r.kt)("inlineCode",{parentName:"h3"},"onLiveEvent")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/"},(0,r.kt)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,r.kt)("p",null,"The callback function is executed when new events from a subscription have arrived."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useInfiniteList({\n    onLiveEvent: (event) => {\n        console.log(event);\n    },\n});\n")),(0,r.kt)("h3",{id:"liveparams"},(0,r.kt)("inlineCode",{parentName:"h3"},"liveParams")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/"},(0,r.kt)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,r.kt)("p",null,"Params to pass to liveProvider's ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/#subscribe"},"subscribe")," method."),(0,r.kt)("h3",{id:"config"},(0,r.kt)("del",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"del"},"config"))),(0,r.kt)("admonition",{title:"Deprecated",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"pagination"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"hasPagination"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"sorters")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"filters")," instead.")),(0,r.kt)("h3",{id:"haspagination"},(0,r.kt)("del",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"del"},"hasPagination"))),(0,r.kt)("admonition",{title:"Deprecated",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"pagination.mode")," instead.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"hasPagination")," will be passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProvider")," as a parameter. It is used to determine whether to use server-side pagination or not."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useInfiniteList({\n    hasPagination: false,\n});\n")),(0,r.kt)("h2",{id:"return-values"},"Return Values"),(0,r.kt)("p",null,"Returns an object with TanStack Query's ",(0,r.kt)("inlineCode",{parentName:"p"},"useInfiniteQuery")," return values."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/query/latest/docs/react/reference/useInfiniteQuery"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"useInfiniteQuery")," documentation for more information ","\u2192")),(0,r.kt)("h2",{id:"faq"},"FAQ"),(0,r.kt)("h3",{id:"how-to-use-cursor-based-pagination"},"How to use cursor-based pagination?"),(0,r.kt)("p",null,"Some APIs use the ",(0,r.kt)("inlineCode",{parentName:"p"},"cursor-pagination")," method for its benefits. This method uses a ",(0,r.kt)("inlineCode",{parentName:"p"},"cursor")," object to determine the next set of data. The cursor can be a number or a string and is passed to the API as a query parameter."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Preparing the data provider:")),(0,r.kt)("p",null,"Consumes data from data provider ",(0,r.kt)("inlineCode",{parentName:"p"},"useInfiniteList")," with the ",(0,r.kt)("inlineCode",{parentName:"p"},"getList")," method. First of all, we need to make this method in the data provider convenient for this API. The ",(0,r.kt)("inlineCode",{parentName:"p"},"cursor")," data is kept in ",(0,r.kt)("inlineCode",{parentName:"p"},"pagination")," and should be set to ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," by default."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"getList: async ({ resource, pagination }) => {\n    const { current } = pagination;\n    const { data } = await axios.get(\n        `https://api.fake-rest.refine.dev/${resource}?cursor=${current || 0}`,\n    );\n\n    return {\n        data: data[resource],\n        total: 0,\n    };\n},\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"As the ",(0,r.kt)("inlineCode",{parentName:"p"},"total")," data is only needed in the ",(0,r.kt)("inlineCode",{parentName:"p"},"offset-pagination")," method, define it as ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," here.")),(0,r.kt)("p",null,"After this process, we successfully retrieved the first page of data. Let's fill the ",(0,r.kt)("inlineCode",{parentName:"p"},"cursor")," object for the next page."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"getList: async ({ resource, pagination }) => {\n    const { current } = pagination;\n    const { data } = await axios.get(\n        `https://api.fake-rest.refine.dev/${resource}?cursor=${current || 0}`,\n    );\n\n    return {\n        data: data[resource],\n        total: 0,\n        // highlight-start\n        cursor: {\n            next: data.cursor.next,\n            prev: data.cursor.prev,\n        },\n        // highlight-end\n    };\n},\n")),(0,r.kt)("h3",{id:"how-to-override-the-getnextpageparam-method"},"How to override the ",(0,r.kt)("inlineCode",{parentName:"h3"},"getNextPageParam")," method?"),(0,r.kt)("p",null,"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"refine")," expects you to return the ",(0,r.kt)("inlineCode",{parentName:"p"},"cursor")," object, but is not required. This is because some APIs don't work that way. To fix this problem you need to override the ",(0,r.kt)("inlineCode",{parentName:"p"},"getNextPageParam")," method and return the next ",(0,r.kt)("inlineCode",{parentName:"p"},"cursor"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useInfiniteList } from "@refinedev/core";\n\nconst {\n    data,\n    error,\n    hasNextPage,\n    isLoading,\n    fetchNextPage,\n    isFetchingNextPage,\n} = useInfiniteList({\n    resource: "posts",\n    // highlight-start\n    queryOptions: {\n        getNextPageParam: (lastPage, allPages) => {\n            // return the last post\'s id\n            const { data } = lastPage;\n            const lastPost = data[data.length - 1];\n            return lastPost.id;\n        },\n    },\n    // highlight-end\n});\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"When you override this method, you can access the ",(0,r.kt)("inlineCode",{parentName:"p"},"lastPage")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"allPages"),".")),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("h3",{id:"properties-1"},"Properties"),(0,r.kt)(f,{module:"@refinedev/core/useInfiniteList","successNotification-default":"`false`","errorNotification-default":'"Error (status code: `statusCode`)"',mdxType:"PropsTable"}),(0,r.kt)("h3",{id:"type-parameters"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Desription"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TQueryFnData"),(0,r.kt)("td",{parentName:"tr",align:null},"Result data returned by the query function. Extends ",(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TError"),(0,r.kt)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TData"),(0,r.kt)("td",{parentName:"tr",align:null},"Result data returned by the ",(0,r.kt)("inlineCode",{parentName:"td"},"select")," function. Extends ",(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,r.kt)("inlineCode",{parentName:"td"},"TQueryFnData")," will be used as the default value."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"TQueryFnData"))))),(0,r.kt)("h3",{id:"return-values-1"},"Return Values"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Result of the TanStack Query's ",(0,r.kt)("inlineCode",{parentName:"td"},"useInfiniteQuery")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://tanstack.com/query/latest/docs/react/reference/useInfiniteQuery"},(0,r.kt)("inlineCode",{parentName:"a"},"InfiniteQueryObserverResult<{"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"a"}," data: TData[];"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"a"}," total: number; },"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"a"}," TError>")))))),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)(k,{path:"use-infinite-list",mdxType:"CodeSandboxExample"}))}N.isMDXComponent=!0},46653:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={},o=void 0,s={unversionedId:"api-reference/core/hooks/data/useInfiniteList/sorting-live-preview",id:"api-reference/core/hooks/data/useInfiniteList/sorting-live-preview",title:"sorting-live-preview",description:"",source:"@site/docs/api-reference/core/hooks/data/useInfiniteList/sorting-live-preview.md",sourceDirName:"api-reference/core/hooks/data/useInfiniteList",slug:"/api-reference/core/hooks/data/useInfiniteList/sorting-live-preview",permalink:"/docs/api-reference/core/hooks/data/useInfiniteList/sorting-live-preview",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/docs/api-reference/core/hooks/data/useInfiniteList/sorting-live-preview.md",tags:[],version:"current",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{}},p={},l=[],d={toc:l},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css",metastring:"live shared",live:!0,shared:!0},"body {\n    padding: 4px;\n    background: white;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/products previewHeight=300px hideCode",live:!0,url:"http://localhost:3000/products",previewHeight:"300px",hideCode:!0},'setInitialRoutes(["/products"]);\n\n// visible-block-start\nimport { useState } from "react";\nimport { useInfiniteList, HttpError } from "@refinedev/core";\n\ninterface IProduct {\n    id: number;\n    name: string;\n    material: string;\n}\n\nconst ProductList: React.FC = () => {\n    //highlight-next-line\n    const [order, setOrder] = useState<"asc" | "desc">("asc");\n\n    const {\n        data,\n        isLoading,\n        isError,\n        hasNextPage,\n        fetchNextPage,\n        isFetchingNextPage,\n    } = useInfiniteList<IProduct, HttpError>({\n        resource: "products",\n        //highlight-start\n        sorters: [\n            {\n                field: "name",\n                order,\n            },\n        ],\n        //highlight-end\n    });\n\n    if (isLoading) {\n        return <p>Loading</p>;\n    }\n    if (isError) {\n        return <p>Something went wrong</p>;\n    }\n\n    const allPages = [].concat(...(data?.pages ?? []).map((page) => page.data));\n\n    return (\n        <div>\n            {/* highlight-start */}\n            <button\n                onClick={() =>\n                    setOrder((prev) => (prev === "asc" ? "desc" : "asc"))\n                }\n            >\n                toggle sort\n            </button>\n            {/* highlight-end */}\n\n            <ul>\n                {allPages.map((product) => (\n                    <li key={product.id}>\n                        {product.name} - ({product.material})\n                    </li>\n                ))}\n            </ul>\n\n            {hasNextPage && (\n                <button\n                    onClick={() => fetchNextPage()}\n                    disabled={isFetchingNextPage}\n                >\n                    {isFetchingNextPage ? "Loading more..." : "Load More"}\n                </button>\n            )}\n        </div>\n    );\n};\n\n// visible-block-end\n\nsetRefineProps({\n    resources: [\n        {\n            name: "products",\n            list: ProductList,\n        },\n    ],\n});\n\nrender(<RefineHeadlessDemo />);\n')))}u.isMDXComponent=!0}}]);