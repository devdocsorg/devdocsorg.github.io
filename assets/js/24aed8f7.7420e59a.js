"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[66579],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(r),d=o,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||i;return r?n.createElement(f,a(a({ref:t},u),{},{components:r})):n.createElement(f,a({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:o,a[1]=c;for(var s=2;s<i;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},24326:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var n=r(87462),o=(r(67294),r(3905));const i={},a=void 0,c={unversionedId:"api-reference/mui/hooks/useAutocomplete/crud-live-preview",id:"version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/crud-live-preview",title:"crud-live-preview",description:"",source:"@site/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/crud-live-preview.md",sourceDirName:"api-reference/mui/hooks/useAutocomplete",slug:"/api-reference/mui/hooks/useAutocomplete/crud-live-preview",permalink:"/docs/3.xx.xx/api-reference/mui/hooks/useAutocomplete/crud-live-preview",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/crud-live-preview.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{}},l={},s=[],u={toc:s},p="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=400px",live:!0,url:"http://localhost:3000",previewHeight:"400px"},"setInitialRoutes(['/posts/create'])\n// visible-block-start\nimport {\n  Create,\n  Box,\n  Autocomplete,\n  useAutocomplete,\n  TextField,\n} from '@pankod/refine-mui'\nimport { useForm, Controller } from '@pankod/refine-react-hook-form'\n\ninterface ICategory {\n  id: number\n  title: string\n}\n\nconst PostCreate: React.FC = () => {\n  const {\n    saveButtonProps,\n    refineCore: { formLoading, queryResult },\n    register,\n    control,\n    formState: { errors },\n  } = useForm<IPost, HttpError, IPost & { category: ICategory }>()\n\n  const { autocompleteProps } = useAutocomplete<ICategory>({\n    resource: 'categories',\n  })\n\n  return (\n    <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>\n      <Box component=\"form\">\n        <Controller\n          control={control}\n          name=\"category\"\n          rules={{ required: 'This field is required' }}\n          render={({ field }) => (\n            <Autocomplete\n              //highlight-next-line\n              {...autocompleteProps}\n              {...field}\n              onChange={(_, value) => {\n                field.onChange(value)\n              }}\n              getOptionLabel={({ title }) => title}\n              isOptionEqualToValue={(option, value) =>\n                value === undefined ||\n                option?.id?.toString() === (value?.id ?? value)?.toString()\n              }\n              placeholder=\"Select a category\"\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Category\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  error={!!errors.category}\n                  helperText={errors.category?.message}\n                  required\n                />\n              )}\n            />\n          )}\n        />\n      </Box>\n    </Create>\n  )\n}\n// visible-block-end\nsetRefineProps({\n  resources: [\n    {\n      name: 'posts',\n      create: PostCreate,\n    },\n  ],\n})\nrender(<RefineMuiDemo />)\n")))}m.isMDXComponent=!0}}]);