"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[28211],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),l=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return o.createElement(p.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(n),h=r,m=u["".concat(p,".").concat(h)]||u[h]||c[h]||a;return n?o.createElement(m,i(i({ref:t},d),{},{components:n})):o.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=h;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},47185:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var o=n(87462),r=(n(67294),n(3905));const a={id:"show",title:"Show",swizzle:!0},i=void 0,s={unversionedId:"api-reference/mui/components/basic-views/show",id:"version-3.xx.xx/api-reference/mui/components/basic-views/show",title:"Show",description:"`` provides us a layout for displaying the page. It does not contain any logic but adds extra functionalities like a refresh button or giving title to the page.",source:"@site/versioned_docs/version-3.xx.xx/api-reference/mui/components/basic-views/show.md",sourceDirName:"api-reference/mui/components/basic-views",slug:"/api-reference/mui/components/basic-views/show",permalink:"/docs/3.xx.xx/api-reference/mui/components/basic-views/show",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/versioned_docs/version-3.xx.xx/api-reference/mui/components/basic-views/show.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{id:"show",title:"Show",swizzle:!0},sidebar:"someSidebar",previous:{title:"List",permalink:"/docs/3.xx.xx/api-reference/mui/components/basic-views/list"},next:{title:"Breadcrumb",permalink:"/docs/3.xx.xx/api-reference/mui/components/mui-breadcrumb"}},p={},l=[{value:"Properties",id:"properties",level:2},{value:"<code>title</code>",id:"title",level:3},{value:"<code>resource</code>",id:"resource",level:3},{value:"<code>canDelete</code> and <code>canEdit</code>",id:"candelete-and-canedit",level:3},{value:"<code>recordItemId</code>",id:"recorditemid",level:3},{value:"<code>dataProviderName</code>",id:"dataprovidername",level:3},{value:"<code>goBack</code>",id:"goback",level:3},{value:"<code>isLoading</code>",id:"isloading",level:3},{value:"<code>breadcrumb</code>",id:"breadcrumb",level:3},{value:"<code>wrapperProps</code>",id:"wrapperprops",level:3},{value:"<code>headerProps</code>",id:"headerprops",level:3},{value:"<code>contentProps</code>",id:"contentprops",level:3},{value:"<code>headerButtons</code>",id:"headerbuttons",level:3},{value:"<code>headerButtonProps</code>",id:"headerbuttonprops",level:3},{value:"<code>footerButtons</code>",id:"footerbuttons",level:3},{value:"<code>footerButtonProps</code>",id:"footerbuttonprops",level:3},{value:"<del><code>actionButtons</code></del>",id:"actionbuttons",level:3},{value:"<del><code>cardProps</code></del>",id:"cardprops",level:3},{value:"<del><code>cardHeaderProps</code></del>",id:"cardheaderprops",level:3},{value:"<del><code>cardContentProps</code></del>",id:"cardcontentprops",level:3},{value:"<del><code>cardActionsProps</code></del>",id:"cardactionsprops",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3}],d=(u="PropsTable",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var u;const c={toc:l},h="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<Show>")," provides us a layout for displaying the page. It does not contain any logic but adds extra functionalities like a refresh button or giving title to the page."),(0,r.kt)("p",null,"We will show what ",(0,r.kt)("inlineCode",{parentName:"p"},"<Show>")," does using properties with examples."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode url=http://localhost:3000/posts/show/123",live:!0,hideCode:!0,url:"http://localhost:3000/posts/show/123"},'// visible-block-start\nimport React from \'react\'\nimport { useShow, useOne } from \'@pankod/refine-core\'\nimport {\n  Show,\n  Stack,\n  Typography,\n  NumberField,\n  TextFieldComponent as TextField,\n  MarkdownField,\n  DateField,\n} from \'@pankod/refine-mui\'\n\nconst SampleShow = () => {\n  const { queryResult } = useShow()\n  const { data, isLoading } = queryResult\n\n  const record = data?.data\n\n  const { data: categoryData, isLoading: categoryIsLoading } = useOne({\n    resource: \'categories\',\n    id: record?.category?.id || \'\',\n    queryOptions: {\n      enabled: !!record,\n    },\n  })\n\n  return (\n    <Show isLoading={isLoading}>\n      <Stack gap={1}>\n        <Typography variant="body1" fontWeight="bold">\n          Id\n        </Typography>\n        <NumberField value={record?.id ?? \'\'} />\n        <Typography variant="body1" fontWeight="bold">\n          Title\n        </Typography>\n        <TextField value={record?.title} />\n        <Typography variant="body1" fontWeight="bold">\n          Content\n        </Typography>\n        <MarkdownField value={record?.content} />\n        <Typography variant="body1" fontWeight="bold">\n          Category\n        </Typography>\n        {categoryIsLoading ? <>Loading...</> : <>{categoryData?.data?.title}</>}\n        <Typography variant="body1" fontWeight="bold">\n          Created At\n        </Typography>\n        <DateField value={record?.createdAt} />\n      </Stack>\n    </Show>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={[\'/samples/show/123\']}\n    resources={[{ name: \'samples\', show: SampleShow, list: SampleList }]}\n  />,\n)\n')),(0,r.kt)("admonition",{title:"Swizzle",type:"info-tip"},(0,r.kt)("p",{parentName:"admonition"},"You can swizzle this component to customize it with the ",(0,r.kt)("a",{parentName:"p",href:"/docs/packages/documentation/cli"},(0,r.kt)("strong",{parentName:"a"},"refine CLI")))),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"title"},(0,r.kt)("inlineCode",{parentName:"h3"},"title")),(0,r.kt)("p",null,"It allows adding title inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Show>"),' component. if you don\'t pass title props it uses the "Show" prefix and the singular resource name by default. For example, for the "posts" resource, it will be "Show post".'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},"// visible-block-start\nimport { Show, Typography } from '@pankod/refine-mui'\n\nconst ShowPage: React.FC = () => {\n  return (\n    <Show\n      // highlight-next-line\n      title={<Typography variant=\"h5\">Custom Title</Typography>}\n    >\n      <span>Rest of your page here</span>\n    </Show>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={['/posts/show/123']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <RefineMui.ShowButton recordItemId=\"123\" />\n          </div>\n        ),\n        show: ShowPage,\n      },\n    ]}\n  />,\n)\n")),(0,r.kt)("h3",{id:"resource"},(0,r.kt)("inlineCode",{parentName:"h3"},"resource")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"<Show>")," component reads the ",(0,r.kt)("inlineCode",{parentName:"p"},"resource")," information from the route by default. This default behavior will not work on custom pages. If you want to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Show>")," component in a custom page, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"resource")," property."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/advanced-tutorials/custom-pages"},"Refer to the custom pages documentation for detailed usage. ","\u2192")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/custom",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/custom"},"// handle initial routes in new way\nsetInitialRoutes(['/custom'])\n\n// visible-block-start\nimport { Refine } from '@pankod/refine-core'\nimport { Show, Layout } from '@pankod/refine-mui'\nimport routerProvider from '@pankod/refine-react-router-v6'\nimport dataProvider from '@pankod/refine-simple-rest'\n\nconst CustomPage: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Show resource=\"posts\" recordItemId={123}>\n      <span>Rest of your page here</span>\n    </Show>\n  )\n}\n\nconst App: React.FC = () => {\n  return (\n    <Refine\n      routerProvider={{\n        ...routerProvider,\n        // highlight-start\n        routes: [\n          {\n            element: <CustomPage />,\n            path: '/custom',\n          },\n        ],\n        // highlight-end\n      }}\n      Layout={Layout}\n      dataProvider={dataProvider('https://api.fake-rest.refine.dev')}\n      resources={[{ name: 'posts' }]}\n    />\n  )\n}\n// visible-block-end\n\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n)\n")),(0,r.kt)("h3",{id:"candelete-and-canedit"},(0,r.kt)("inlineCode",{parentName:"h3"},"canDelete")," and ",(0,r.kt)("inlineCode",{parentName:"h3"},"canEdit")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"canDelete")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"canEdit")," allows us to add the delete and edit buttons inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Show>")," component. If the resource has ",(0,r.kt)("inlineCode",{parentName:"p"},"canDelete")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"canEdit")," property refine adds the buttons by default."),(0,r.kt)("p",null,"When clicked on, delete button executes the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useDelete/"},(0,r.kt)("inlineCode",{parentName:"a"},"useDelete"))," method provided by the ",(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/providers/data-provider"},(0,r.kt)("inlineCode",{parentName:"a"},"dataProvider"))," and the edit button redirects the user to the record edit page."),(0,r.kt)("p",null,"Refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/mui/components/buttons/delete-button"},(0,r.kt)("inlineCode",{parentName:"a"},"<DeleteButton>"))," and the ",(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/mui/components/buttons/edit-button"},(0,r.kt)("inlineCode",{parentName:"a"},"<EditButton>"))," documentation for detailed usage."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},"const { default: simpleRest } = RefineSimpleRest\n\nconst dataProvider = simpleRest('https://api.fake-rest.refine.dev')\n\nconst customDataProvider = {\n  ...dataProvider,\n  deleteOne: async ({ resource, id, variables }) => {\n    return {\n      data: {},\n    }\n  },\n}\n\nconst authProvider = {\n  login: () => Promise.resolve(),\n  logout: () => Promise.resolve(),\n  checkAuth: () => Promise.resolve(),\n  checkError: () => Promise.resolve(),\n  getPermissions: () => Promise.resolve('admin'),\n  getUserIdentity: () => Promise.resolve(),\n}\n\n// visible-block-start\nimport { Show } from '@pankod/refine-mui'\nimport { usePermissions } from '@pankod/refine-core'\n\nconst PostShow: React.FC = () => {\n  const { data: permissionsData } = usePermissions()\n  return (\n    <Show\n      /* highlight-start */\n      canDelete={permissionsData?.includes('admin')}\n      canEdit={\n        permissionsData?.includes('editor') ||\n        permissionsData?.includes('admin')\n      }\n      /* highlight-end */\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    authProvider={authProvider}\n    dataProvider={customDataProvider}\n    initialRoutes={['/posts/show/123']}\n    Layout={RefineMui.Layout}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <RefineMui.ShowButton recordItemId=\"123\" />\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n)\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/auth/usePermissions"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"usePermission")," documentation for detailed usage. ","\u2192")),(0,r.kt)("h3",{id:"recorditemid"},(0,r.kt)("inlineCode",{parentName:"h3"},"recordItemId")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<Show>")," component reads the ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," information from the route by default. ",(0,r.kt)("inlineCode",{parentName:"p"},"recordItemId")," is used when it cannot read from the URL (when used on a custom page, modal or drawer)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/custom",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/custom"},"// handle initial routes in new way\nsetInitialRoutes(['/custom'])\n\n// visible-block-start\nimport { Refine } from '@pankod/refine-core'\nimport { List, Layout } from '@pankod/refine-mui'\nimport routerProvider from '@pankod/refine-react-router-v6'\nimport dataProvider from '@pankod/refine-simple-rest'\n\nconst CustomPage: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <List resource=\"posts\" recordItemId={123}>\n      <span>Rest of your page here</span>\n    </List>\n  )\n}\n\nconst App: React.FC = () => {\n  return (\n    <Refine\n      routerProvider={{\n        ...routerProvider,\n        routes: [\n          {\n            element: <CustomPage />,\n            path: '/custom',\n          },\n        ],\n      }}\n      Layout={Layout}\n      dataProvider={dataProvider('https://api.fake-rest.refine.dev')}\n      resources={[{ name: 'posts' }]}\n    />\n  )\n}\n// visible-block-end\n\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"<Show>")," component needs the ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," information for ",(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/mui/components/buttons/refresh-button"},(0,r.kt)("inlineCode",{parentName:"a"},"<RefreshButton>"))," to work properly.")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"<Show>")," component needs the ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," information for work properly, so if you use the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Show>")," component in custom pages, you should pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"recordItemId")," property.")),(0,r.kt)("h3",{id:"dataprovidername"},(0,r.kt)("inlineCode",{parentName:"h3"},"dataProviderName")),(0,r.kt)("p",null,"If not specified, Refine will use the default data provider. If you have multiple data providers and want to use a different one, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProviderName")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Refine } from '@pankod/refine-core'\nimport { Show } from '@pankod/refine-mui'\nimport routerProvider from '@pankod/refine-react-router-v6'\nimport dataProvider from '@pankod/refine-simple-rest'\n\n// highlight-start\nconst PostShow = () => {\n  return <Show dataProviderName=\"other\">...</Show>\n}\n// highlight-end\n\nexport const App: React.FC = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      // highlight-start\n      dataProvider={{\n        default: dataProvider('https://api.fake-rest.refine.dev/'),\n        other: dataProvider('https://other-api.fake-rest.refine.dev/'),\n      }}\n      // highlight-end\n      resources={[{ name: 'posts', show: PostShow }]}\n    />\n  )\n}\n")),(0,r.kt)("h3",{id:"goback"},(0,r.kt)("inlineCode",{parentName:"h3"},"goBack")),(0,r.kt)("p",null,"To customize the back button or to disable it, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"goBack")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},"// visible-block-start\nimport { Show, Button } from '@pankod/refine-mui'\nimport { useNavigation } from '@pankod/refine-core'\n\nconst BackButton = () => {\n  const { goBack } = useNavigation()\n\n  return <Button onClick={() => goBack()}>BACK!</Button>\n}\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-next-line\n      goBack={<BackButton />}\n    >\n      <span>Rest of your page here</span>\n    </Show>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={['/posts', '/posts/show/123']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <RefineMui.ShowButton recordItemId={123} />\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n)\n")),(0,r.kt)("h3",{id:"isloading"},(0,r.kt)("inlineCode",{parentName:"h3"},"isLoading")),(0,r.kt)("p",null,"To toggle the loading state of the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Show/>")," component, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"isLoading")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},"// visible-block-start\nimport { Show } from '@pankod/refine-mui'\n\nconst PostShow: React.FC = () => {\n  const [loading, setLoading] = React.useState(true)\n\n  return (\n    <Show\n      // highlight-next-line\n      isLoading={loading}\n    >\n      <span>Rest of your page here</span>\n    </Show>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={['/posts', '/posts/show/123']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <RefineMui.ShowButton recordItemId={123} />\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n)\n")),(0,r.kt)("h3",{id:"breadcrumb"},(0,r.kt)("inlineCode",{parentName:"h3"},"breadcrumb")),(0,r.kt)("p",null,"To customize or disable the breadcrumb, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"breadcrumb")," property. By default it uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"Breadcrumb")," component from ",(0,r.kt)("inlineCode",{parentName:"p"},"@pankod/refine-mui")," package."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/mui/components/mui-breadcrumb"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"Breadcrumb")," documentation for detailed usage. ","\u2192")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"This feature can be managed globally via the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Refine>")," component's ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/components/refine-config/#breadcrumb"},"options"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},"// visible-block-start\nimport { Show, Breadcrumb } from '@pankod/refine-mui'\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      breadcrumb={\n        <div\n          style={{\n            padding: '3px 6px',\n            border: '2px dashed cornflowerblue',\n          }}\n        >\n          <Breadcrumb />\n        </div>\n      }\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Show>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={['/posts', '/posts/show/123']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <RefineMui.ShowButton recordItemId={123} />\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n)\n")),(0,r.kt)("h3",{id:"wrapperprops"},(0,r.kt)("inlineCode",{parentName:"h3"},"wrapperProps")),(0,r.kt)("p",null,"If you want to customize the wrapper of the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Show/>")," component, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"wrapperProps")," property."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card/"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"Card")," documentation from Material UI for detailed usage. ","\u2192")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},"// visible-block-start\nimport { Show } from '@pankod/refine-mui'\n\nconst PostShow: React.FC = () => {\n  const [loading, setLoading] = React.useState(true)\n\n  return (\n    <Show\n      // highlight-start\n      wrapperProps={{\n        sx: {\n          backgroundColor: 'lightsteelblue',\n        },\n      }}\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Show>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={['/posts', '/posts/show/123']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <RefineMui.ShowButton recordItemId={123} />\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n)\n")),(0,r.kt)("h3",{id:"headerprops"},(0,r.kt)("inlineCode",{parentName:"h3"},"headerProps")),(0,r.kt)("p",null,"If you want to customize the header of the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Show/>")," component, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"headerProps")," property."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card-header/"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"CardHeader")," documentation from Material UI for detailed usage. ","\u2192")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},"// visible-block-start\nimport { Show } from '@pankod/refine-mui'\n\nconst PostShow: React.FC = () => {\n  const [loading, setLoading] = React.useState(true)\n\n  return (\n    <Show\n      // highlight-start\n      headerProps={{\n        sx: {\n          backgroundColor: 'lightsteelblue',\n        },\n      }}\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Show>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={['/posts', '/posts/show/123']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <RefineMui.ShowButton recordItemId={123} />\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n)\n")),(0,r.kt)("h3",{id:"contentprops"},(0,r.kt)("inlineCode",{parentName:"h3"},"contentProps")),(0,r.kt)("p",null,"If you want to customize the content of the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Show/>")," component, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"contentProps")," property."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card-content/"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"CardContent")," documentation from Material UI for detailed usage. ","\u2192")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},"// visible-block-start\nimport { Show } from '@pankod/refine-mui'\n\nconst PostShow: React.FC = () => {\n  const [loading, setLoading] = React.useState(true)\n\n  return (\n    <Show\n      // highlight-start\n      contentProps={{\n        sx: {\n          backgroundColor: 'lightsteelblue',\n        },\n      }}\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Show>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={['/posts', '/posts/show/123']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <RefineMui.ShowButton recordItemId={123} />\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n)\n")),(0,r.kt)("h3",{id:"headerbuttons"},(0,r.kt)("inlineCode",{parentName:"h3"},"headerButtons")),(0,r.kt)("p",null,"You can customize the buttons at the header by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"headerButtons")," property. It accepts ",(0,r.kt)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,r.kt)("inlineCode",{parentName:"p"},"({ defaultButtons }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},"// visible-block-start\nimport { Show, Button } from '@pankod/refine-mui'\n\nconst PostShow: React.FC = () => {\n  const [loading, setLoading] = React.useState(true)\n\n  return (\n    <Show\n      // highlight-start\n      headerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button type=\"primary\">Custom Button</Button>\n        </>\n      )}\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Show>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={['/posts', '/posts/show/123']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <RefineMui.ShowButton recordItemId={123} />\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n)\n")),(0,r.kt)("h3",{id:"headerbuttonprops"},(0,r.kt)("inlineCode",{parentName:"h3"},"headerButtonProps")),(0,r.kt)("p",null,"You can customize the wrapper element of the buttons at the header by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"headerButtonProps")," property."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/box/"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"Box")," documentation from Material UI for detailed usage. ","\u2192")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},"// visible-block-start\nimport { Show, Button } from '@pankod/refine-mui'\n\nconst PostShow: React.FC = () => {\n  const [loading, setLoading] = React.useState(true)\n\n  return (\n    <Show\n      // highlight-start\n      headerButtonProps={{\n        sx: {\n          backgroundColor: 'lightsteelblue',\n        },\n      }}\n      // highlight-end\n      headerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button type=\"primary\">Custom Button</Button>\n        </>\n      )}\n    >\n      <span>Rest of your page here</span>\n    </Show>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={['/posts', '/posts/show/123']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <RefineMui.ShowButton recordItemId={123} />\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n)\n")),(0,r.kt)("h3",{id:"footerbuttons"},(0,r.kt)("inlineCode",{parentName:"h3"},"footerButtons")),(0,r.kt)("p",null,"You can customize the buttons at the footer by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"footerButtons")," property. It accepts ",(0,r.kt)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,r.kt)("inlineCode",{parentName:"p"},"({ defaultButtons }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},"// visible-block-start\nimport { Show, Button } from '@pankod/refine-mui'\n\nconst PostShow: React.FC = () => {\n  const [loading, setLoading] = React.useState(true)\n\n  return (\n    <Show\n      // highlight-start\n      footerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button type=\"primary\">Custom Button</Button>\n        </>\n      )}\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Show>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={['/posts', '/posts/show/123']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <RefineMui.ShowButton recordItemId={123} />\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n)\n")),(0,r.kt)("h3",{id:"footerbuttonprops"},(0,r.kt)("inlineCode",{parentName:"h3"},"footerButtonProps")),(0,r.kt)("p",null,"You can customize the wrapper element of the buttons at the footer by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"footerButtonProps")," property."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card-actions/"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"CardActions")," documentation from Material UI for detailed usage. ","\u2192")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},"// visible-block-start\nimport { Show, Button } from '@pankod/refine-mui'\n\nconst PostShow: React.FC = () => {\n  const [loading, setLoading] = React.useState(true)\n\n  return (\n    <Show\n      // highlight-start\n      footerButtonProps={{\n        sx: {\n          backgroundColor: 'lightsteelblue',\n        },\n      }}\n      // highlight-end\n      footerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button type=\"primary\">Custom Button</Button>\n        </>\n      )}\n    >\n      <span>Rest of your page here</span>\n    </Show>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={['/posts', '/posts/show/123']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <RefineMui.ShowButton recordItemId={123} />\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n)\n")),(0,r.kt)("h3",{id:"actionbuttons"},(0,r.kt)("del",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"del"},"actionButtons"))),(0,r.kt)("admonition",{title:"Deprecated",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"headerButtons")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"footerButtons")," instead.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<Show>")," uses the Material UI ",(0,r.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card-actions/#main-content"},(0,r.kt)("inlineCode",{parentName:"a"},"<CardActions>"))," component. By default,The children of the ",(0,r.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card-actions/#main-content"},(0,r.kt)("inlineCode",{parentName:"a"},"<CardActions>"))," component shows nothing in the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Show>")," component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/show.tsx"',title:'"src/pages/posts/show.tsx"'},'// highlight-next-line\nimport { Show, Button } from \'@pankod/refine-mui\'\n\nexport const ShowPage: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      actionButtons={\n        <>\n          <Button type="primary">Custom Button 1</Button>\n          <Button type="default">Custom Button 2</Button>\n        </>\n      }\n      // highlight-end\n    >\n      ...\n    </Show>\n  )\n}\n')),(0,r.kt)("h3",{id:"cardprops"},(0,r.kt)("del",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"del"},"cardProps"))),(0,r.kt)("admonition",{title:"Deprecated",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"wrapperProps")," instead.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<Show>")," uses the Material UI ",(0,r.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/react-card/#main-content"},(0,r.kt)("inlineCode",{parentName:"a"},"<Card>"))," components so you can customize with the props of ",(0,r.kt)("inlineCode",{parentName:"p"},"cardProps"),"."),(0,r.kt)("h3",{id:"cardheaderprops"},(0,r.kt)("del",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"del"},"cardHeaderProps"))),(0,r.kt)("admonition",{title:"Deprecated",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"headerProps")," instead.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<Show>")," uses the Material UI ",(0,r.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card-header/"},(0,r.kt)("inlineCode",{parentName:"a"},"<CardHeader>"))," components so you can customize with the props of ",(0,r.kt)("inlineCode",{parentName:"p"},"cardHeaderProps"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/show.tsx"',title:'"src/pages/posts/show.tsx"'},'import { useShow } from \'@pankod/refine-core\'\n// highlight-next-line\nimport { Show, Typography, Stack } from \'@pankod/refine-mui\'\n\nexport const ShowPage: React.FC = () => {\n  const { queryResult } = useShow<IPost>()\n  const { data, isLoading } = queryResult\n  const record = data?.data\n\n  return (\n    <Show\n      isLoading={isLoading}\n      // highlight-start\n      cardHeaderProps={{\n        title: <Typography variant="h5">Custom Title</Typography>,\n      }}\n      // highlight-end\n    >\n      <Stack gap="10px">\n        <Typography fontWeight="bold">Id</Typography>\n        <Typography>{record?.id}</Typography>\n        <Typography fontWeight="bold">Title</Typography>\n        <Typography>{record?.title}</Typography>\n      </Stack>\n    </Show>\n  )\n}\n\ninterface IPost {\n  id: number\n  title: string\n}\n')),(0,r.kt)("h3",{id:"cardcontentprops"},(0,r.kt)("del",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"del"},"cardContentProps"))),(0,r.kt)("admonition",{title:"Deprecated",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"contentProps")," instead.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<Show>")," uses the Material UI ",(0,r.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card-content/"},(0,r.kt)("inlineCode",{parentName:"a"},"<CardContent>"))," components so you can customize with the props of ",(0,r.kt)("inlineCode",{parentName:"p"},"cardContentProps"),"."),(0,r.kt)("h3",{id:"cardactionsprops"},(0,r.kt)("del",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"del"},"cardActionsProps"))),(0,r.kt)("admonition",{title:"Deprecated",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"headerButtonProps")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"footerButtonProps")," instead.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<Show>")," uses the Material UI ",(0,r.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card-actions/"},(0,r.kt)("inlineCode",{parentName:"a"},"<CardActions>"))," components so you can customize with the props of ",(0,r.kt)("inlineCode",{parentName:"p"},"cardActionsProps"),"."),(0,r.kt)("h2",{id:"api-reference"},"API Reference"),(0,r.kt)("h3",{id:"properties-1"},"Properties"),(0,r.kt)(d,{module:"@pankod/refine-mui/Show","wrapperProps-type":"[`CardProps`](https://mui.com/material-ui/api/card/#props)","contentProps-type":"[`CardContentProps`](https://mui.com/material-ui/api/card-content/#props)","headerProps-type":"[`CardHeaderProps`](https://mui.com/material-ui/api/card-header/#props)","headerButtonProps-type":"[`BoxProps`](https://mui.com/material-ui/api/box/#props)","headerButtons-default":"[`ListButton`](https://refine.dev/docs/api-reference/mui/components/buttons/list-button/), [`EditButton`](https://refine.dev/docs/api-reference/mui/components/buttons/edit-button/), [`DeleteButton`](https://refine.dev/docs/api-reference/mui/components/buttons/delete-button/), [`RefreshButton`](https://refine.dev/docs/api-reference/mui/components/buttons/refresh-button/)","footerButtonProps-type":"[`CardActionsProps`](https://mui.com/material-ui/api/card-actions/#props)","breadcrumb-default":"[`<Breadcrumb/>`](/docs/api-reference/mui/components/mui-breadcrumb/)","goBack-default":"`<ArrowLeft />`","goBack-type":"`ReactNode`",mdxType:"PropsTable"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live shared",live:!0,shared:!0},"const SampleList = () => {\n  const { dataGridProps } = RefineMui.useDataGrid()\n\n  const { data: categoryData, isLoading: categoryIsLoading } =\n    RefineCore.useMany({\n      resource: 'categories',\n      ids: dataGridProps?.rows?.map((item: any) => item?.category?.id) ?? [],\n      queryOptions: {\n        enabled: !!dataGridProps?.rows,\n      },\n    })\n\n  const columns = React.useMemo<GridColumns<any>>(\n    () => [\n      {\n        field: 'id',\n        headerName: 'Id',\n        type: 'number',\n        minWidth: 50,\n      },\n      {\n        field: 'title',\n        headerName: 'Title',\n        minWidth: 200,\n      },\n      {\n        field: 'category',\n        headerName: 'Category',\n        valueGetter: ({ row }) => {\n          const value = row?.category?.id\n\n          return value\n        },\n        minWidth: 300,\n        renderCell: function render({ value }) {\n          return categoryIsLoading ? (\n            <>Loading...</>\n          ) : (\n            categoryData?.data?.find((item) => item.id === value)?.title\n          )\n        },\n      },\n      {\n        field: 'createdAt',\n        headerName: 'Created At',\n        minWidth: 250,\n        renderCell: function render({ value }) {\n          return <RefineMui.DateField value={value} />\n        },\n      },\n      {\n        field: 'actions',\n        headerName: 'Actions',\n        renderCell: function render({ row }) {\n          return (\n            <>\n              <RefineMui.ShowButton hideText recordItemId={row.id} />\n            </>\n          )\n        },\n        align: 'center',\n        headerAlign: 'center',\n        minWidth: 80,\n      },\n    ],\n    [categoryData?.data],\n  )\n\n  return (\n    <RefineMui.List>\n      <RefineMui.DataGrid {...dataGridProps} columns={columns} autoHeight />\n    </RefineMui.List>\n  )\n}\n\nconst Wrapper = ({ children }) => {\n  return (\n    <RefineMui.ThemeProvider theme={RefineMui.LightTheme}>\n      <RefineMui.CssBaseline />\n      <RefineMui.GlobalStyles\n        styles={{ html: { WebkitFontSmoothing: 'auto' } }}\n      />\n      {children}\n    </RefineMui.ThemeProvider>\n  )\n}\n")))}m.isMDXComponent=!0}}]);