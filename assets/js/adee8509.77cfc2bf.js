"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[55179],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=l(n),m=o,f=c["".concat(p,".").concat(m)]||c[m]||u[m]||a;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},61493:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const a={id:"text",title:"Text",swizzle:!0},i=void 0,s={unversionedId:"api-reference/antd/components/fields/text",id:"version-3.xx.xx/api-reference/antd/components/fields/text",title:"Text",description:"This field lets you show basic text. It uses Ant Design's `` component.",source:"@site/versioned_docs/version-3.xx.xx/api-reference/antd/components/fields/text.md",sourceDirName:"api-reference/antd/components/fields",slug:"/api-reference/antd/components/fields/text",permalink:"/docs/3.xx.xx/api-reference/antd/components/fields/text",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/versioned_docs/version-3.xx.xx/api-reference/antd/components/fields/text.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{id:"text",title:"Text",swizzle:!0},sidebar:"someSidebar",previous:{title:"Tag",permalink:"/docs/3.xx.xx/api-reference/antd/components/fields/tag"},next:{title:"Url",permalink:"/docs/3.xx.xx/api-reference/antd/components/fields/url"}},p={},l=[{value:"Usage",id:"usage",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties",level:3}],d=(c="PropsTable",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var c;const u={toc:l},m="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This field lets you show basic text. It uses Ant Design's ",(0,o.kt)("a",{parentName:"p",href:"https://ant.design/components/typography/#Typography.Text"},(0,o.kt)("inlineCode",{parentName:"a"},"<Typography.Text>"))," component."),(0,o.kt)("admonition",{title:"Swizzle",type:"info-tip"},(0,o.kt)("p",{parentName:"admonition"},"You can swizzle this component to customize it with the ",(0,o.kt)("a",{parentName:"p",href:"/docs/packages/documentation/cli"},(0,o.kt)("strong",{parentName:"a"},"refine CLI")))),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"Let's see how to use it in a basic list page:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},'// visible-block-start\nimport { IResourceComponentsProps, useMany } from \'@pankod/refine-core\'\nimport {\n  List,\n  // highlight-next-line\n  TextField,\n  Table,\n  useTable,\n} from \'@pankod/refine-antd\'\n\nconst PostList: React.FC<IResourceComponentsProps> = (props) => {\n  const { tableProps } = useTable<IPost>()\n\n  const categoryIds =\n    tableProps?.dataSource?.map((item) => item.category.id) ?? []\n\n  const { data: categoriesData, isLoading } = useMany<ICategory>({\n    resource: \'categories\',\n    ids: categoryIds,\n    queryOptions: {\n      enabled: categoryIds.length > 0,\n    },\n  })\n\n  return (\n    <List {...props}>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="title" title="title" width="50%" />\n        <Table.Column\n          dataIndex={[\'category\', \'id\']}\n          title="category"\n          render={(value: number) => {\n            // highlight-start\n            if (isLoading) {\n              return <TextField value="Loading..." />\n            }\n\n            return (\n              <TextField\n                strong\n                value={\n                  categoriesData?.data.find((item) => item.id === value)?.title\n                }\n              />\n            )\n            // highlight-end\n          }}\n          width="50%"\n        />\n      </Table>\n    </List>\n  )\n}\n\ninterface ICategory {\n  id: number\n  title: string\n}\n\ninterface IPost {\n  id: number\n  title: string\n  category: { id: number }\n}\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    resources={[\n      {\n        name: \'posts\',\n        list: PostList,\n      },\n    ]}\n  />,\n)\n')),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Table columns already render their data as text by default. If the rendered data is in text form and its text field won't be customized with any of Ant Design ",(0,o.kt)("inlineCode",{parentName:"p"},"<Typography.Text>")," properties, there isn't any need to use ",(0,o.kt)("inlineCode",{parentName:"p"},"<TextField>")," in a column's render function.")),(0,o.kt)("h2",{id:"api-reference"},"API Reference"),(0,o.kt)("h3",{id:"properties"},"Properties"),(0,o.kt)(d,{module:"@pankod/refine-antd/TextField",mdxType:"PropsTable"}),(0,o.kt)("admonition",{title:"External Props",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"It also accepts all props of Ant Design ",(0,o.kt)("a",{parentName:"p",href:"https://ant.design/components/typography/#Typography.Text"},"Text"),".")))}f.isMDXComponent=!0}}]);