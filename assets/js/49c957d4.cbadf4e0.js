"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[23765],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(l,".").concat(m)]||u[m]||c[m]||o;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var a=n(67294),r=n(86010);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,i),hidden:n},t)}},74866:(e,t,n)=>{n.r(t),n.d(t,{default:()=>N});var a=n(87462),r=n(67294),o=n(86010),i=n(12466),s=n(16550),l=n(91980),p=n(67392),d=n(50012);function u(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function c(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=c(e),[i,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[l,p]=h({queryString:n,groupId:a}),[u,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,d.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),f=(()=>{const e=l??u;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{f&&s(f)}),[f]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),p(e),g(e)}),[p,g,o]),tabValues:o}}var f=n(72389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:n,selectedValue:s,selectValue:l,tabValues:p}=e;const d=[],{blockElementScrollPositionUntilNextRender:u}=(0,i.o5)(),c=e=>{const t=e.currentTarget,n=d.indexOf(t),a=p[n].value;a!==s&&(u(t),l(a))},m=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>d.push(e),onKeyDown:m,onClick:c},i,{className:(0,o.Z)("tabs__item",k.tabItem,i?.className,{"tabs__item--active":s===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function y(e){const t=g(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",k.tabList)},r.createElement(b,(0,a.Z)({},e,t)),r.createElement(v,(0,a.Z)({},e,t)))}function N(e){const t=(0,f.Z)();return r.createElement(y,(0,a.Z)({key:String(t)},e))}},15353:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>f,frontMatter:()=>s,metadata:()=>p,toc:()=>u});var a=n(87462),r=(n(67294),n(3905)),o=n(74866),i=n(85162);const s={id:"supabase",title:"Supabase",sidebar_label:"Supabase"},l=void 0,p={unversionedId:"advanced-tutorials/data-provider/supabase",id:"advanced-tutorials/data-provider/supabase",title:"Supabase",description:"Introduction",source:"@site/docs/advanced-tutorials/data-provider/supabase.md",sourceDirName:"advanced-tutorials/data-provider",slug:"/advanced-tutorials/data-provider/supabase",permalink:"/docs/advanced-tutorials/data-provider/supabase",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/docs/advanced-tutorials/data-provider/supabase.md",tags:[],version:"current",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{id:"supabase",title:"Supabase",sidebar_label:"Supabase"},sidebar:"someSidebar",previous:{title:"Strapi-v4",permalink:"/docs/advanced-tutorials/data-provider/strapi-v4"},next:{title:"Custom Form Validation",permalink:"/docs/advanced-tutorials/forms/custom-form-validation"}},d={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Project Setup",id:"project-setup",level:2},{value:"Establishing Supabase connection",id:"establishing-supabase-connection",level:2},{value:"Initialize Supabase client",id:"initialize-supabase-client",level:3},{value:"Register Supabase data provider",id:"register-supabase-data-provider",level:3},{value:"Understanding the Auth Provider",id:"understanding-the-auth-provider",level:2},{value:"Adding CRUD pages",id:"adding-crud-pages",level:2},{value:"Adding a List page",id:"adding-a-list-page",level:3},{value:"Adding a Create page",id:"adding-a-create-page",level:3},{value:"Adding an Edit page",id:"adding-an-edit-page",level:3},{value:"Adding Interfaces and Normalize file",id:"adding-interfaces-and-normalize-file",level:3},{value:"Adding Resources",id:"adding-resources",level:3},{value:"Understanding the Login screen",id:"understanding-the-login-screen",level:2},{value:"This premade and ready to use Login screen consist <code>LoginPage</code> and <code>authProvider</code> concepts behind the scenes:",id:"this-premade-and-ready-to-use-login-screen-consist-loginpage-and-authprovider-concepts-behind-the-scenes",level:4},{value:"Social Logins",id:"social-logins",level:3},{value:"Enable Google Auth on Supabase",id:"enable-google-auth-on-supabase",level:3},{value:"Let&#39;s recap what we have done so far",id:"lets-recap-what-we-have-done-so-far",level:2},{value:"Supabase Real Time Support",id:"supabase-real-time-support",level:2},{value:"Let see how real-time feature works in the app",id:"let-see-how-real-time-feature-works-in-the-app",level:3},{value:"Example",id:"example",level:2}],c=(m="CodeSandboxExample",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var m;const h={toc:u},g="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(g,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://supabase.com/"},"Supabase")," is an open-source Firebase alternative that provides backend features. This tutorial steps will focus specifically on database and authentication features. We'll see how to use Supabase as a data provider and implement authentication to refine app."),(0,r.kt)("p",null,"refine offers built-in data provider support for Supabase and handles all required data service methods out-of-the-box. Therefore, we will not need to use complex boilerplate codes to make it work. refine handles all the complex works for us by internal hooks and implementations."),(0,r.kt)("p",null,"We'll build a simple CRUD app with refine and use Supabase as a data provider. We'll also see how to use Supabase's authentication features on refine app."),(0,r.kt)("p",null,"We are assuming that you have already know how refine works. If not, please check out the ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorial/introduction/index/"},"Tutorial")," section first."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/data-provider"},"Refer to docs for more information about data provider ","\u2192")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/integrations/"},"Discover the +15 most popular backend service data providers supported out-of-the-box by refine ","\u2192")),(0,r.kt)("h2",{id:"project-setup"},"Project Setup"),(0,r.kt)("p",null,"We'll be using ",(0,r.kt)("inlineCode",{parentName:"p"},"create refine-app")," CLI to bootstrap our example project with a special preset defined to Supabase example"),(0,r.kt)(o.default,{defaultValue:"preset",values:[{label:"Quick setup with CLI preset",value:"preset"},{label:"Without preset",value:"nopreset"}],mdxType:"Tabs"},(0,r.kt)(i.default,{value:"preset",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm create refine-app@latest -- --preset refine-antd-supabase my-supabase-app\n")),(0,r.kt)("p",null,"Also, we need to install npm packages to use markdown editor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm i @uiw/react-md-editor\n")),(0,r.kt)("p",null,"This will create a new refine app with Supabase data provider and Ant Desing as a UI framework. We'll be using this project as a base to implement our example.")),(0,r.kt)(i.default,{value:"nopreset",mdxType:"TabItem"},(0,r.kt)("p",null,"You are free to bootstrap a ",(0,r.kt)("strong",{parentName:"p"},"refine")," app with any other features you want. To do so, you can run the following command and choose any data provider or feature you want."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm create refine-app@latest example-app\n")),(0,r.kt)("p",null,"Then choose the following options:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-npm"},"? Select your project type: refine-react\n > refine-react\n? Do you want to use a UI Framework?:\n > Ant Design\n? Data Provider\n > Supabase\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you want to add Supabase data provider to existed ",(0,r.kt)("strong",{parentName:"p"},"refine")," app, you add it by running:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"npm i @refinedev/supabase\n"))))),(0,r.kt)("h2",{id:"establishing-supabase-connection"},"Establishing Supabase connection"),(0,r.kt)("h3",{id:"initialize-supabase-client"},"Initialize Supabase client"),(0,r.kt)("p",null,"If you head over to ",(0,r.kt)("inlineCode",{parentName:"p"},"src/utilty")," folder, you'll see a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"supabaseClient.ts")," created by CLI. This auto-generated file contains API credentials and a function that initializes the Supabase client."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createClient } from '@refinedev/supabase'\n\nconst SUPABASE_URL = 'https://iwdfzvfqbtokqetmbmbp.supabase.co'\nconst SUPABASE_KEY =\n  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlhdCI6MTYzMDU2NzAxMCwiZXhwIjoxOTQ2MTQzMDEwfQ._gr6kXGkQBi9BM9dx5vKaNKYj_DJN1xlkarprGpM_fU'\n\nexport const supabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY, {\n  db: {\n    schema: 'public',\n  },\n  auth: {\n    persistSession: true,\n  },\n})\n")),(0,r.kt)("p",null,"We'll use this example API credentials and ",(0,r.kt)("inlineCode",{parentName:"p"},"createClient")," method that exposes from ",(0,r.kt)("inlineCode",{parentName:"p"},"refine-supabase")," package for enabling refine to Supabase API connection."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://supabase.com/docs/guides/with-react#get-the-api-keys"},"You can find your Supabase URL and key from your Supabase dashboard ","\u2192"," ")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can also use environment variables to store your Supabase URL and key. This is a good practice to keep your sensitive information safe.")),(0,r.kt)("h3",{id:"register-supabase-data-provider"},"Register Supabase data provider"),(0,r.kt)("p",null,"Let's head over to ",(0,r.kt)("inlineCode",{parentName:"p"},"App.tsx")," file where all magic happens. This is the entry point of our app. We'll be registering our Supabase data provider here."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { Refine } from "@refinedev/core";\n...\n // highlight-start\nimport { dataProvider } from "@refinedev/supabase";\nimport { supabaseClient } from "utility";\n// highlight-end\n\nfunction App() {\n  return (\n    <Refine\n      // highlight-next-line\n      dataProvider={dataProvider(supabaseClient)}\n      /* ... */\n    >\n        {/* ... */}\n    </Refine>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("p",null,"Highlighted lines are the ones the CLI generator automatically added to register Supabase data provider. Simply, we are passing ",(0,r.kt)("inlineCode",{parentName:"p"},"supabaseClient")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProvider")," method to establish a connection with Supabase API."),(0,r.kt)("p",null,"With this configuration, refine can now communicate with Supabase API and perform all required data service CRUD methods using data hooks."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useCreate/"},"Refer to documentation to learn more about how to use data hooks ","\u2192")),(0,r.kt)("h2",{id:"understanding-the-auth-provider"},"Understanding the Auth Provider"),(0,r.kt)("p",null,"Auth provider is a concept that allows us to use any authentication service with refine."),(0,r.kt)("p",null,"You'll see a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"src/authProvider.ts")," created by CLI. This auto-generated file contains pre-defined functions using Supabase Auth API methods internally to perform authentication and authorization operations."),(0,r.kt)("p",null,"So basically, this is where we set complete authentication logic for the app."),(0,r.kt)("p",null,"Since we preferred refine-supabase as the data provider during the CLI project initialization, all required Supabase authentication methods are already implemented for us. This shows us how easy it is to bootstrap a refine app with CLI"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/auth-provider"},"Refer to docs for more information about Auth Provider methods and custom Auth Providers ","\u2192")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Take a look the auto-generated ",(0,r.kt)("b",null,"authProvider.ts")," file "),(0,r.kt)("p",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},"import { AuthBindings } from '@refinedev/core'\n\nimport { supabaseClient } from 'utility'\n\nconst authProvider: AuthBindings = {\n  login: async ({ email, password, providerName }) => {\n    // sign in with oauth\n    try {\n      if (providerName) {\n        const { data, error } = await supabaseClient.auth.signInWithOAuth({\n          provider: providerName,\n        })\n\n        if (error) {\n          return {\n            success: false,\n            error,\n          }\n        }\n\n        if (data?.url) {\n          return {\n            success: true,\n          }\n        }\n      }\n\n      // sign in with email and password\n      const { data, error } = await supabaseClient.auth.signInWithPassword({\n        email,\n        password,\n      })\n\n      if (error) {\n        return {\n          success: false,\n          error,\n        }\n      }\n\n      if (data?.user) {\n        return {\n          success: true,\n        }\n      }\n    } catch (error: any) {\n      return {\n        success: false,\n        error,\n      }\n    }\n\n    return {\n      success: false,\n      error: {\n        message: 'Login failed',\n        name: 'Invalid email or password',\n      },\n    }\n  },\n  register: async ({ email, password }) => {\n    try {\n      const { data, error } = await supabaseClient.auth.signUp({\n        email,\n        password,\n      })\n\n      if (error) {\n        return {\n          success: false,\n          error,\n        }\n      }\n\n      if (data) {\n        return {\n          success: true,\n        }\n      }\n    } catch (error: any) {\n      return {\n        success: false,\n        error,\n      }\n    }\n\n    return {\n      success: false,\n      error: {\n        message: 'Register failed',\n        name: 'Invalid email or password',\n      },\n    }\n  },\n  forgotPassword: async ({ email }) => {\n    try {\n      const { data, error } = await supabaseClient.auth.resetPasswordForEmail(\n        email,\n        {\n          redirectTo: `${window.location.origin}/update-password`,\n        },\n      )\n\n      if (error) {\n        return {\n          success: false,\n          error,\n        }\n      }\n\n      if (data) {\n        notification.open({\n          type: 'success',\n          message: 'Success',\n          description:\n            \"Please check your email for a link to reset your password. If it doesn't appear within a few minutes, check your spam folder.\",\n        })\n        return {\n          success: true,\n        }\n      }\n    } catch (error: any) {\n      return {\n        success: false,\n        error,\n      }\n    }\n\n    return {\n      success: false,\n      error: {\n        message: 'Forgot password failed',\n        name: 'Invalid email',\n      },\n    }\n  },\n  updatePassword: async ({ password }) => {\n    try {\n      const { data, error } = await supabaseClient.auth.updateUser({\n        password,\n      })\n\n      if (error) {\n        return {\n          success: false,\n          error,\n        }\n      }\n\n      if (data) {\n        return {\n          success: true,\n          redirectTo: '/',\n        }\n      }\n    } catch (error: any) {\n      return {\n        success: false,\n        error,\n      }\n    }\n    return {\n      success: false,\n      error: {\n        message: 'Update password failed',\n        name: 'Invalid password',\n      },\n    }\n  },\n  logout: async () => {\n    const { error } = await supabaseClient.auth.signOut()\n\n    if (error) {\n      return {\n        success: false,\n        error,\n      }\n    }\n\n    return {\n      success: true,\n      redirectTo: '/',\n    }\n  },\n  onError: async (error) => {\n    console.error(error)\n    return { error }\n  },\n  check: async () => {\n    try {\n      const { data } = await supabaseClient.auth.getSession()\n      const { session } = data\n\n      if (!session) {\n        return {\n          authenticated: false,\n          error: {\n            message: 'Check failed',\n            name: 'Session not found',\n          },\n          logout: true,\n          redirectTo: '/login',\n        }\n      }\n    } catch (error: any) {\n      return {\n        authenticated: false,\n        error: error || {\n          message: 'Check failed',\n          name: 'Session not found',\n        },\n        logout: true,\n        redirectTo: '/login',\n      }\n    }\n\n    return {\n      authenticated: true,\n    }\n  },\n  getPermissions: async () => {\n    const user = await supabaseClient.auth.getUser()\n\n    if (user) {\n      return user.data.user?.role\n    }\n\n    return null\n  },\n  getUserIdentity: async () => {\n    const { data } = await supabaseClient.auth.getUser()\n\n    if (data?.user) {\n      return {\n        ...data.user,\n        name: data.user.email,\n      }\n    }\n\n    return null\n  },\n}\n\nexport default authProvider\n")))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Auth provider functions are also consumed by ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/auth/useLogin"},"refine authorization hooks"),". Since this is out of scope of this tutorial, we'll not cover them for now")),(0,r.kt)("br",null),(0,r.kt)("p",null,"Auth provider needed to be registered in ",(0,r.kt)("inlineCode",{parentName:"p"},"<Refine>")," component to activate auth features in our app"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},"import { Refine } from \"@refinedev/core\";\n...\n // highlight-start\nimport authProvider from './authProvider';\n// highlight-end\n\nfunction App() {\n  return (\n    <Refine\n      // highlight-next-line\n      authProvider={authProvider}\n      /* ... */\n    >\n        {/* ... */}\n    </Refine>\n  );\n}\n\nexport default App;\n")),(0,r.kt)("p",null,"Also, we'll see the ",(0,r.kt)("inlineCode",{parentName:"p"},"Auth provider")," methods in action when using ",(0,r.kt)("inlineCode",{parentName:"p"},"LoginPage")," in the next sections."),(0,r.kt)("p",null,"At this point, our refine app is configured to communicate with Supabase API and ready to perform authentication operations using Supabase Auth methods."),(0,r.kt)("p",null,"If you head over to localhost:3000, you'll see a welcome page."),(0,r.kt)("div",{class:"img-container"},(0,r.kt)("div",{class:"window"},(0,r.kt)("div",{class:"control red"}),(0,r.kt)("div",{class:"control orange"}),(0,r.kt)("div",{class:"control green"})),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/supabase/welcome.png",alt:"welcome"})),(0,r.kt)("br",null),(0,r.kt)("p",null,"Now it's time to add some resources to our app."),(0,r.kt)("h2",{id:"adding-crud-pages"},"Adding CRUD pages"),(0,r.kt)("p",null,"Before diving into Supabase features, we'll add simple CRUD pages to make the app more interactive."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Since this post focuses on Supabase implementation, we'll not discuss how to create CRUD pages and how it works. You can refer to ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorial/introduction/index/"},"Tutorial")," to learn more about creating CRUD pages.")),(0,r.kt)("h3",{id:"adding-a-list-page"},"Adding a List page"),(0,r.kt)("p",null,"Let's add a listing page to show data retrieved from Supabase API in the table. Copy and paste the following code to ",(0,r.kt)("inlineCode",{parentName:"p"},"src/pages/posts")," folder and name it ",(0,r.kt)("inlineCode",{parentName:"p"},"list.tsx"),"."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show the List Page code"),(0,r.kt)("p",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'import {\n  List,\n  useTable,\n  EditButton,\n  ShowButton,\n  getDefaultSortOrder,\n  FilterDropdown,\n  useSelect,\n} from \'@refinedev/antd\'\nimport { Table, Space, Select } from \'antd\'\n\nimport { IPost, ICategory } from \'interfaces\'\n\nexport const PostList: React.FC = () => {\n  const { tableProps, sorter } = useTable<IPost>({\n    sorters: {\n      initial: [\n        {\n          field: \'id\',\n          order: \'asc\',\n        },\n      ],\n    },\n    meta: {\n      select: \'*, categories(title)\',\n    },\n  })\n\n  const { selectProps } = useSelect<ICategory>({\n    resource: \'categories\',\n  })\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column\n          key="id"\n          dataIndex="id"\n          title="ID"\n          sorter\n          defaultSortOrder={getDefaultSortOrder(\'id\', sorter)}\n        />\n        <Table.Column key="title" dataIndex="title" title="Title" sorter />\n        <Table.Column\n          key="categoryId"\n          dataIndex={[\'categories\', \'title\']}\n          title="Category"\n          defaultSortOrder={getDefaultSortOrder(\'categories.title\', sorter)}\n          filterDropdown={(props) => (\n            <FilterDropdown {...props}>\n              <Select\n                style={{ minWidth: 200 }}\n                mode="multiple"\n                placeholder="Select Category"\n                {...selectProps}\n              />\n            </FilterDropdown>\n          )}\n        />\n        <Table.Column<IPost>\n          title="Actions"\n          dataIndex="actions"\n          render={(_, record) => (\n            <Space>\n              <EditButton hideText size="small" recordItemId={record.id} />\n              <ShowButton hideText size="small" recordItemId={record.id} />\n            </Space>\n          )}\n        />\n      </Table>\n    </List>\n  )\n}\n')))),(0,r.kt)("h3",{id:"adding-a-create-page"},"Adding a Create page"),(0,r.kt)("p",null,"We'll need a page for creating a new record in Supabase API. Copy and paste following code to ",(0,r.kt)("inlineCode",{parentName:"p"},"src/pages/posts")," folder and name it ",(0,r.kt)("inlineCode",{parentName:"p"},"create.tsx"),"."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show the Create Page code"),(0,r.kt)("p",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/create.tsx"',title:'"src/pages/posts/create.tsx"'},'import { useState } from \'react\'\n\nimport { Create, useForm, useSelect } from \'@refinedev/antd\'\nimport { Form, Input, Select, Upload } from \'antd\'\nimport { RcFile } from \'antd/lib/upload/interface\'\n\nimport MDEditor from \'@uiw/react-md-editor\'\n\nimport { IPost, ICategory } from \'interfaces\'\nimport { supabaseClient, normalizeFile } from \'utility\'\n\nexport const PostCreate: React.FC = () => {\n  const { formProps, saveButtonProps } = useForm<IPost>()\n\n  const { selectProps: categorySelectProps } = useSelect<ICategory>({\n    resource: \'categories\',\n  })\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <Form {...formProps} layout="vertical">\n        <Form.Item\n          label="Title"\n          name="title"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label="Category"\n          name="categoryId"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Select {...categorySelectProps} />\n        </Form.Item>\n        <Form.Item\n          label="Content"\n          name="content"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <MDEditor data-color-mode="light" />\n        </Form.Item>\n        <Form.Item label="Images">\n          <Form.Item\n            name="images"\n            valuePropName="fileList"\n            normalize={normalizeFile}\n            noStyle\n          >\n            <Upload.Dragger\n              name="file"\n              listType="picture"\n              multiple\n              customRequest={async ({ file, onError, onSuccess }) => {\n                try {\n                  const rcFile = file as RcFile\n                  await supabaseClient.storage\n                    .from(\'refine\')\n                    .upload(`public/${rcFile.name}`, file, {\n                      cacheControl: \'3600\',\n                      upsert: true,\n                    })\n\n                  const { data } = await supabaseClient.storage\n                    .from(\'refine\')\n                    .getPublicUrl(`public/${rcFile.name}`)\n\n                  const xhr = new XMLHttpRequest()\n                  onSuccess && onSuccess({ url: data?.publicUrl }, xhr)\n                } catch (error) {\n                  onError && onError(new Error(\'Upload Error\'))\n                }\n              }}\n            >\n              <p className="ant-upload-text">Drag & drop a file in this area</p>\n            </Upload.Dragger>\n          </Form.Item>\n        </Form.Item>\n      </Form>\n    </Create>\n  )\n}\n')))),(0,r.kt)("h3",{id:"adding-an-edit-page"},"Adding an Edit page"),(0,r.kt)("p",null,"We'll need a page for editing a record in Supabase API. Copy and paste following code to ",(0,r.kt)("inlineCode",{parentName:"p"},"src/pages/posts")," folder and name it ",(0,r.kt)("inlineCode",{parentName:"p"},"edit.tsx"),"."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show the Edit Page code"),(0,r.kt)("p",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/edit.tsx"',title:'"src/pages/posts/edit.tsx"'},'import React, { useState } from \'react\'\n\nimport {\n  Edit,\n  ListButton,\n  RefreshButton,\n  useForm,\n  useSelect,\n} from \'@refinedev/antd\'\nimport { Alert, Button, Form, Input, Select, Upload } from \'antd\'\nimport { RcFile } from \'antd/lib/upload/interface\'\n\nimport MDEditor from \'@uiw/react-md-editor\'\n\nimport { IPost, ICategory } from \'interfaces\'\nimport { supabaseClient, normalizeFile } from \'utility\'\n\nexport const PostEdit: React.FC = () => {\n  const [isDeprecated, setIsDeprecated] = useState(false)\n  const { formProps, saveButtonProps, queryResult } = useForm<IPost>({\n    liveMode: \'manual\',\n    onLiveEvent: () => {\n      setIsDeprecated(true)\n    },\n  })\n\n  const postData = queryResult?.data?.data\n  const { selectProps: categorySelectProps } = useSelect<ICategory>({\n    resource: \'categories\',\n    defaultValue: postData?.categoryId,\n  })\n\n  const handleRefresh = () => {\n    queryResult?.refetch()\n    setIsDeprecated(false)\n  }\n\n  return (\n    <Edit\n      saveButtonProps={saveButtonProps}\n      pageHeaderProps={{\n        extra: (\n          <>\n            <ListButton />\n            <RefreshButton onClick={handleRefresh} />\n          </>\n        ),\n      }}\n    >\n      {isDeprecated && (\n        <Alert\n          message="This post is changed. Reload to see it\'s latest version."\n          type="warning"\n          style={{\n            marginBottom: 20,\n          }}\n          action={\n            <Button onClick={handleRefresh} size="small" type="ghost">\n              Refresh\n            </Button>\n          }\n        />\n      )}\n\n      <Form {...formProps} layout="vertical">\n        <Form.Item\n          label="Title"\n          name="title"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label="Category"\n          name="categoryId"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Select {...categorySelectProps} />\n        </Form.Item>\n        <Form.Item\n          label="Content"\n          name="content"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <MDEditor data-color-mode="light" />\n        </Form.Item>\n        <Form.Item label="Images">\n          <Form.Item\n            name="images"\n            valuePropName="fileList"\n            normalize={normalizeFile}\n            noStyle\n          >\n            <Upload.Dragger\n              name="file"\n              listType="picture"\n              multiple\n              customRequest={async ({ file, onError, onSuccess }) => {\n                const rcFile = file as RcFile\n                const fileUrl = `public/${rcFile.name}`\n\n                const { error } = await supabaseClient.storage\n                  .from(\'refine\')\n                  .upload(fileUrl, file, {\n                    cacheControl: \'3600\',\n                    upsert: true,\n                  })\n\n                if (error) {\n                  return onError?.(error)\n                }\n                const { data, error: urlError } = await supabaseClient.storage\n                  .from(\'refine\')\n                  .getPublicUrl(fileUrl)\n\n                if (urlError) {\n                  return onError?.(urlError)\n                }\n\n                onSuccess?.({ url: data?.publicUrl }, new XMLHttpRequest())\n              }}\n            >\n              <p className="ant-upload-text">Drag & drop a file in this area</p>\n            </Upload.Dragger>\n          </Form.Item>\n        </Form.Item>\n      </Form>\n    </Edit>\n  )\n}\n')))),(0,r.kt)("h3",{id:"adding-interfaces-and-normalize-file"},"Adding Interfaces and Normalize file"),(0,r.kt)("p",null,"We need to add interfaces for ",(0,r.kt)("inlineCode",{parentName:"p"},"Post")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Create")," pages to ",(0,r.kt)("inlineCode",{parentName:"p"},"src/interfaces/index.d.ts")," file."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show the interface code "),(0,r.kt)("p",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/interfaces/index.d.ts"',title:'"src/interfaces/index.d.ts"'},"export interface ICategory {\n  id: string\n  title: string\n}\n\nexport interface IFile {\n  name: string\n  percent: number\n  size: number\n  status: 'error' | 'success' | 'done' | 'uploading' | 'removed'\n  type: string\n  uid: string\n  url: string\n}\n\nexport interface IPost {\n  id: string\n  title: string\n  content: string\n  categoryId: string\n  images: IFile[]\n}\n")))),(0,r.kt)("p",null,"Also, the ",(0,r.kt)("inlineCode",{parentName:"p"},"normalizeFile")," function needed to be added to the ",(0,r.kt)("inlineCode",{parentName:"p"},"src/utility/normalize.ts")," file to perform file upload operations specifically for Supabase API."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show the Normalize file code"),(0,r.kt)("p",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/utility/normalize.ts"',title:'"src/utility/normalize.ts"'},"import { UploadFile } from 'antd/lib/upload/interface'\n\ninterface UploadResponse {\n  url: string\n}\ninterface EventArgs<T = UploadResponse> {\n  file: UploadFile<T>\n  fileList: Array<UploadFile<T>>\n}\n\nexport const normalizeFile = (event: EventArgs) => {\n  const { fileList } = event\n\n  return fileList.map((item) => {\n    const { uid, name, type, size, response, percent, status } = item\n\n    return {\n      uid,\n      name,\n      url: item.url || response?.url,\n      type,\n      size,\n      percent,\n      status,\n    }\n  })\n}\n")))),(0,r.kt)("p",null,"Finally expose those modules at ",(0,r.kt)("inlineCode",{parentName:"p"},"src/pages/posts")," by adding"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/index.ts"',title:'"src/pages/posts/index.ts"'},"export * from './create'\nexport * from './edit'\nexport * from './list'\n")),(0,r.kt)("h3",{id:"adding-resources"},"Adding Resources"),(0,r.kt)("p",null,"One last thing we need to do is to add newly created CRUD pages to the ",(0,r.kt)("inlineCode",{parentName:"p"},"resources")," property of ",(0,r.kt)("inlineCode",{parentName:"p"},"<Refine>")," component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { dataProvider } from \'@refinedev/supabase\';\nimport { supabaseClient } from \'utility\';\n\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router-dom";\n\n//highlight-next-line\nimport { PostList, PostCreate, PostEdit } from \'pages/posts\';\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <Refine\n                ...\n                dataProvider={dataProvider(supabaseClient)}\n                //highlight-start\n                resources={[\n                    {\n                        name: \'posts\',\n                        list: "/posts",\n                        create: "/posts/create",\n                        edit: "/posts/edit/:id",\n                    },\n                ]}\n                //highlight-end\n            >\n                <Routes>\n                    <Route path="/posts" element={<PostList />} />\n                    <Route path="/posts/create" element={<PostCreate />} />\n                    <Route path="/posts/edit/:id" element={<PostEdit />} />\n                </Routes>\n            </Refine>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n')),(0,r.kt)("p",null,"The resources property activates the connection between CRUD pages and Supabase API."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"refine")," automatically matches the Supabase API endpoint with CRUD pages for us. In this way, the pages can interact with data from the API."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," property refers to the name of the table in the Supabase database.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"list")," property registers ",(0,r.kt)("inlineCode",{parentName:"p"},"/posts")," endpoint to the ",(0,r.kt)("inlineCode",{parentName:"p"},"PostList")," component.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," property registers ",(0,r.kt)("inlineCode",{parentName:"p"},"/posts/create")," endpoint to the ",(0,r.kt)("inlineCode",{parentName:"p"},"PostCreate")," component. Thereby, when you head over to ",(0,r.kt)("inlineCode",{parentName:"p"},"yourdomain.com/posts/create"),", you will see the ",(0,r.kt)("inlineCode",{parentName:"p"},"PostCreate")," page you just created."))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/components/refine-config/#resources"},"Refer to resources docs for more information ","\u2192")),(0,r.kt)("h2",{id:"understanding-the-login-screen"},"Understanding the Login screen"),(0,r.kt)("p",null,"After adding the resources, the app will look like:"),(0,r.kt)("div",{style:{display:"flex",flexDirection:"column"}},(0,r.kt)("div",{class:"window",style:{alignSelf:"center",width:"700px"}},(0,r.kt)("div",{class:"control red"}),(0,r.kt)("div",{class:"control orange"}),(0,r.kt)("div",{class:"control green"})),(0,r.kt)("img",{style:{alignSelf:"center",width:"700px"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/supabase/login-screen.png",alt:"login"})),(0,r.kt)("br",null),(0,r.kt)("p",null,"Normally, refine shows a default login page when ",(0,r.kt)("inlineCode",{parentName:"p"},"authProvider")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"resources")," properties are passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"<Refine />")," component. However, our login screen is slightly different from the default one."),(0,r.kt)("h4",{id:"this-premade-and-ready-to-use-login-screen-consist-loginpage-and-authprovider-concepts-behind-the-scenes"},"This premade and ready to use Login screen consist ",(0,r.kt)("inlineCode",{parentName:"h4"},"LoginPage")," and ",(0,r.kt)("inlineCode",{parentName:"h4"},"authProvider")," concepts behind the scenes:"),(0,r.kt)("p",null,"Let's check out the ",(0,r.kt)("inlineCode",{parentName:"p"},"LoginPage")," property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine, Authenticated } from \'@refinedev/core\'\n//highlight-start\nimport { AuthPage, RefineThemes, ThemedLayout } from \'@refinedev/antd\'\nimport routerProvider, {\n  NavigateToResource,\n  CatchAllNavigate,\n} from \'@refinedev/react-router-v6\'\n//highlight-end\n\nimport { BrowserRouter, Routes, Route, Outlet } from \'react-router-dom\'\n\nimport { ConfigProvider } from \'antd\'\n\nimport authProvider from \'./authProvider\'\n\n/* ... */\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <ConfigProvider theme={RefineThemes.Blue}>\n        <Refine\n          /* ... */\n          //highlight-next-line\n          routerProvider={routerProvider}\n          authProvider={authProvider}\n        >\n          <Routes>\n            <Route\n              element={\n                <Authenticated fallback={<CatchAllNavigate to="/login" />}>\n                  <ThemedLayout>\n                    <Outlet />\n                  </ThemedLayout>\n                </Authenticated>\n              }\n            >\n              <Route path="/posts" element={<div>dummy list page</div>} />\n            </Route>\n            <Route\n              element={\n                <Authenticated fallback={<Outlet />}>\n                  <NavigateToResource />\n                </Authenticated>\n              }\n            >\n              {/* highlight-start */}\n              <Route path="/login" element={<AuthPage />} />\n              <Route path="/register" element={<AuthPage type="register" />} />\n              <Route\n                path="/forgot-password"\n                element={<AuthPage type="forgotPassword" />}\n              />\n              <Route\n                path="/update-password"\n                element={<AuthPage type="updatePassword" />}\n              />\n              {/* highlight-end */}\n            </Route>\n          </Routes>\n        </Refine>\n      </ConfigProvider>\n    </BrowserRouter>\n  )\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"AuthPage")," component returns ready-to-use authentication pages for login, register, update, and forgot password actions."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"This is where ",(0,r.kt)("inlineCode",{parentName:"strong"},"authProvider")," comes into play.")),(0,r.kt)("p",null,"Remember the ",(0,r.kt)("a",{parentName:"p",href:"#understanding-auth-provider"},"Understanding the Auth Provider")," section? We mentioned ",(0,r.kt)("inlineCode",{parentName:"p"},"login"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"register,"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"forgotPassword"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"updatePassword")," functions that use ",(0,r.kt)("a",{parentName:"p",href:"https://supabase.com/docs/guides/auth"},"Supabase Auth API")," methods internally in the ",(0,r.kt)("inlineCode",{parentName:"p"},"authProvider.ts")," file. These methods automatically bind to ",(0,r.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," components by ",(0,r.kt)("strong",{parentName:"p"},"refine")," to perform authentication operations."),(0,r.kt)("br",null),(0,r.kt)("div",{style:{display:"flex",flexDirection:"column"}},(0,r.kt)("img",{style:{alignSelf:"center",width:"800px"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/supabase/flow.png",alt:"flow"})),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"By defining the routes array in the ",(0,r.kt)("inlineCode",{parentName:"strong"},"routerProvider")," property, we can access the ",(0,r.kt)("inlineCode",{parentName:"strong"},"<AuthPage>")," authentication pages by navigating to ",(0,r.kt)("inlineCode",{parentName:"strong"},"/register"),", ",(0,r.kt)("inlineCode",{parentName:"strong"},"/forgot-password"),", and ",(0,r.kt)("inlineCode",{parentName:"strong"},"/update-password")," endpoints.")),(0,r.kt)("p",null,"We'll show how to implement third party logins in the next sections."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/components/antd-auth-page"},"Refer to AuthPage docs for more information ","\u2192")),(0,r.kt)("p",null,"Sign in the app with followings credentials:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"email: ",(0,r.kt)("a",{parentName:"li",href:"mailto:info@refine.dev"},"info@refine.dev")),(0,r.kt)("li",{parentName:"ul"},"password: refine-supabase")),(0,r.kt)("p",null,"We have successfully logged in to the app and ",(0,r.kt)("inlineCode",{parentName:"p"},"ListPage")," renders table of data at the ",(0,r.kt)("inlineCode",{parentName:"p"},"/post")," route."),(0,r.kt)("div",{class:"img-container"},(0,r.kt)("div",{class:"window"},(0,r.kt)("div",{class:"control red"}),(0,r.kt)("div",{class:"control orange"}),(0,r.kt)("div",{class:"control green"})),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/supabase/list.png",alt:"list"})),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("p",null,"Now click on the ",(0,r.kt)("inlineCode",{parentName:"p"},"Create")," button to create a new post. The app will navigate to the ",(0,r.kt)("inlineCode",{parentName:"p"},"post/create")," endpoint, and ",(0,r.kt)("inlineCode",{parentName:"p"},"CreatePage")," will render."),(0,r.kt)("p",null,"Thanks to ",(0,r.kt)("inlineCode",{parentName:"p"},"refine-supabase")," data provider, we can now start creating new records for the Supabase Database by just filling the form."),(0,r.kt)("div",{class:"img-container"},(0,r.kt)("div",{class:"window"},(0,r.kt)("div",{class:"control red"}),(0,r.kt)("div",{class:"control orange"}),(0,r.kt)("div",{class:"control green"})),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/supabase/create.png",alt:"create"})),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"social-logins"},"Social Logins"),(0,r.kt)("p",null,"We'll show how to add Google Login option to the app."),(0,r.kt)("p",null,"Social login feature can be activated by setting ",(0,r.kt)("inlineCode",{parentName:"p"},"provider")," property of the ",(0,r.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},"//highlight-start\nimport { AuthPage } from '@refinedev/antd'\nimport { GoogleOutlined } from '@ant-design/icons'\n//highlight-end\n\nconst MyLoginPage = () => {\n  return (\n    <AuthPage\n      type=\"login\"\n      providers={[\n        {\n          name: 'google',\n          label: 'Sign in with Google',\n          icon: <GoogleOutlined style={{ fontSize: 18, lineHeight: 0 }} />,\n        },\n      ]}\n    />\n  )\n}\n")),(0,r.kt)("p",null,"This will add a new Google login button to the login page. After the user successfully logs in, the app will redirect back to the app."),(0,r.kt)("h3",{id:"enable-google-auth-on-supabase"},"Enable Google Auth on Supabase"),(0,r.kt)("p",null,"Head over to app.supabase.com and sign in to your Supabase account. Next, go to Authentication -> Settings to configure the Auth providers."),(0,r.kt)("p",null,"You will find the Google Auth option in the Auth providers section; enable it and set your Google Credentials."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://supabase.com/docs/guides/auth/auth-google#create-your-google-credentials"},"Refer to Supabase docs for more information about Credentials ","\u2192")),(0,r.kt)("div",{class:"img-container"},(0,r.kt)("div",{class:"window"},(0,r.kt)("div",{class:"control red"}),(0,r.kt)("div",{class:"control orange"}),(0,r.kt)("div",{class:"control green"})),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/supabase/supabase-config.png",alt:"supabaseConfig"})),(0,r.kt)("br",null),(0,r.kt)("p",null,"Here is the result:"),(0,r.kt)("br",null),(0,r.kt)("div",{class:"img-container"},(0,r.kt)("div",{class:"window"},(0,r.kt)("div",{class:"control red"}),(0,r.kt)("div",{class:"control orange"}),(0,r.kt)("div",{class:"control green"})),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/supabase/social-login.gif",alt:"socialLogin"})),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"lets-recap-what-we-have-done-so-far"},"Let's recap what we have done so far"),(0,r.kt)("p",null,"So far, we have implemented the followings:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We have reviewed Supabase Client and data provider concepts. We've seen benefits of using ",(0,r.kt)("strong",{parentName:"li"},"refine")," and how it can handle complex setups for us."),(0,r.kt)("li",{parentName:"ul"},"We have talked about the ",(0,r.kt)("inlineCode",{parentName:"li"},"authProvider")," concept and how it works with Supabase Auth API. We also see the advantages of ",(0,r.kt)("strong",{parentName:"li"},"refine"),"'s built-in authentication support."),(0,r.kt)("li",{parentName:"ul"},"We have added CRUD pages to make the app interact with Supabase API. We've seen how the ",(0,r.kt)("inlineCode",{parentName:"li"},"resources")," property works and how it connects the pages with the API."),(0,r.kt)("li",{parentName:"ul"},"We have seen how the ",(0,r.kt)("inlineCode",{parentName:"li"},"LoginPage")," property works and how it overrides the default login page with the ",(0,r.kt)("inlineCode",{parentName:"li"},"AuthPage")," component. We've seen how ",(0,r.kt)("inlineCode",{parentName:"li"},"AuthPage")," component uses ",(0,r.kt)("inlineCode",{parentName:"li"},"authProvider")," methods internally."),(0,r.kt)("li",{parentName:"ul"},"We have seen how authorization handling in ",(0,r.kt)("strong",{parentName:"li"},"refine")," app by understanding the logic behind of ",(0,r.kt)("inlineCode",{parentName:"li"},"LoginPage")," property, ",(0,r.kt)("inlineCode",{parentName:"li"},"authProvider"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"<AuthPage>")," component.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"refine provides solutions for critical parts of the complete CRUD app requirements. It saves development time and effort by providing ready-to-use components and features.")),(0,r.kt)("h2",{id:"supabase-real-time-support"},"Supabase Real Time Support"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"refine")," has a built-in support for ",(0,r.kt)("a",{parentName:"p",href:"https://supabase.com/docs/guides/realtime"},"Supabase Real Time"),". It means that when you create, update, or delete a record, the changes will be reflected in the app in real-time.",(0,r.kt)("br",{parentName:"p"}),"\n","Required Supabase Real Time setup is already done in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/master/packages/supabase"},(0,r.kt)("inlineCode",{parentName:"a"},"@refinedev/supabase")),"` data provider."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/master/packages/supabase/src/index.ts#L325"},"You can check the Supabase Real Time integration in the data provider source code ","\u2192")),(0,r.kt)("p",null,"We only need to register refine's Supabase Live Provider to the ",(0,r.kt)("inlineCode",{parentName:"p"},"liveProvider")," property to enable real-time support."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},"import { Refine } from '@refinedev/core'\n//highlight-start\nimport { liveProvider } from '@refinedev/supabase'\nimport { supabaseClient } from 'utility'\n//highlight-end\n\n/* ... */\n\nfunction App() {\n  return (\n    <Refine\n      //highlight-start\n      liveProvider={liveProvider(supabaseClient)}\n      options={{ liveMode: 'auto' }}\n      //highlight-end\n      /* ... */\n    >\n      {/* ... */}\n    </Refine>\n  )\n}\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"For live features to work automatically, we setted ",(0,r.kt)("inlineCode",{parentName:"p"},'liveMode: "auto"')," in the options prop."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/#livemode"},"Refer to Live Provider docs for more information ","\u2192"))),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"With ",(0,r.kt)("a",{parentName:"p",href:"#"},"Supabase JS client v2"),", multiple subscription calls are not supported. Check out the related issue, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/supabase/realtime/issues/271"},"supabase/realtime#271"),". Multiple subscriptions needs to be made in a single call, which is not supported by the current version of the ",(0,r.kt)("inlineCode",{parentName:"p"},"@refinedev/supabase")," data provider. You can check out the related documentation in ",(0,r.kt)("a",{parentName:"p",href:"https://supabase.com/docs/guides/realtime/postgres-changes#combination-changes"},"Supabase Realtime Guides"),".")),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"let-see-how-real-time-feature-works-in-the-app"},"Let see how real-time feature works in the app"),(0,r.kt)("br",null),(0,r.kt)("div",{class:"img-container"},(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/supabase/real-time.gif",alt:"realTime"})),(0,r.kt)("br",null),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"refine")," offers out-of-the-box live provider support:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Ably")," ","\u2192"," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/blob/master/packages/ably/src/index.ts"},"Source Code")," - ",(0,r.kt)("a",{parentName:"li",href:"https://codesandbox.io/embed/github/refinedev/refine/tree/master/examples/live-provider-ably/?view=preview&theme=dark&codemirror=1"},"Demo")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Supabase")," ","\u2192"," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/blob/master/packages/supabase/src/index.ts#L187"},"Source Code")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Appwrite")," ","\u2192"," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/blob/master/packages/appwrite/src/index.ts#L252"},"Source Code")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Hasura")," ","\u2192"," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/blob/master/packages/hasura/src/liveProvider/index.ts#L16"},"Source Code")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Nhost")," ","\u2192"," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/blob/master/packages/nhost/src/liveProvider/index.ts#L16"},"Source Code"),"\n:::")),(0,r.kt)("h2",{parentName:"admonition",id:"using-meta-to-pass-values-to-data-provider"},"Using ",(0,r.kt)("inlineCode",{parentName:"h2"},"meta")," to pass values to data provider"),(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/general-concepts/#meta"},(0,r.kt)("inlineCode",{parentName:"a"},"meta"))," property is used to pass additional information that can be read by data provider methods."),(0,r.kt)("p",{parentName:"admonition"},"We'll show an example of getting relational data from different tables on Supabase API using ",(0,r.kt)("inlineCode",{parentName:"p"},"meta")," property."),(0,r.kt)("p",{parentName:"admonition"},"Take a look at the useTable hook in List page we created on the ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:3000/docs/advanced-tutorials/data-provider/supabase/#adding-a-list-page"},"previous sections"),"."),(0,r.kt)("h3",{parentName:"admonition",id:"select---handling-one-to-many-relationship"},(0,r.kt)("inlineCode",{parentName:"h3"},"select")," - Handling one-to-many relationship"),(0,r.kt)("p",{parentName:"admonition"},"We pass a ",(0,r.kt)("inlineCode",{parentName:"p"},"select")," value in ",(0,r.kt)("inlineCode",{parentName:"p"},"meta")," object to perform relational database operation in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/master/packages/supabase/src/index.ts"},"Supabase data provider"),". The data provider methods are using Supabase ",(0,r.kt)("a",{parentName:"p",href:"https://supabase.io/docs/reference/javascript/select"},(0,r.kt)("inlineCode",{parentName:"a"},"select"))," property internally."),(0,r.kt)("p",{parentName:"admonition"},"In this way, we can get the ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," data from the ",(0,r.kt)("inlineCode",{parentName:"p"},"categories")," table and display it on the List page."),(0,r.kt)("p",{parentName:"admonition"},"For example, for ",(0,r.kt)("inlineCode",{parentName:"p"},"posts -> categories")," relationship, we can get the ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," data from the ",(0,r.kt)("inlineCode",{parentName:"p"},"categories")," table and display it on the List page."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},"const { tableProps, sorter } = useTable<IPost>({\n  //highlight-start\n  resource: 'posts',\n  meta: {\n    select: '*, categories(title)',\n  },\n  // highlight-end\n})\n")),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"useList"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"useOne"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"useMany")," hooks are using Supabase ",(0,r.kt)("a",{parentName:"p",href:"https://supabase.io/docs/reference/javascript/select"},(0,r.kt)("inlineCode",{parentName:"a"},"select"))," property internally. So you can pass parameters to the Supbase select method using ",(0,r.kt)("inlineCode",{parentName:"p"},"meta")," property."),(0,r.kt)("h3",{parentName:"admonition",id:"select---handling-many-to-many-relationships"},(0,r.kt)("inlineCode",{parentName:"h3"},"select")," - Handling many-to-many relationships"),(0,r.kt)("p",{parentName:"admonition"},"For example, for ",(0,r.kt)("inlineCode",{parentName:"p"},"movies <-> categories_movies <-> categories")," many-to-many relationship, we can get the ",(0,r.kt)("inlineCode",{parentName:"p"},"categories")," data of a user using ",(0,r.kt)("inlineCode",{parentName:"p"},"meta")," property."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/users/list.tsx"',title:'"src/pages/users/list.tsx"'},"const { tableProps, sorter } = useTable<IUser>({\n  //highlight-start\n  resource: 'movies',\n  meta: {\n    select: '*, categories!inner(name)',\n  },\n  // highlight-end\n})\n")),(0,r.kt)("h3",{parentName:"admonition",id:"id"},(0,r.kt)("inlineCode",{parentName:"h3"},"id")),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"meta")," ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),' property is used to match the column name of the primary key(in case the column name is different than "id") in your Supabase data table to the column name you have assigned.'),(0,r.kt)("p",{parentName:"admonition"},"refine's ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useMany/"},"useMany")," hook accepts ",(0,r.kt)("inlineCode",{parentName:"p"},"meta")," property and uses ",(0,r.kt)("inlineCode",{parentName:"p"},"getMany")," method of data provider."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useMany({\n  resource: 'posts',\n  ids: [1, 2],\n})\n")),(0,r.kt)("p",{parentName:"admonition"},"By default, it searches for posts in the ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," column of the data table."),(0,r.kt)("p",{parentName:"admonition"},"With passing ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," parameter to the ",(0,r.kt)("inlineCode",{parentName:"p"},"meta")," property, we can change the column name to the ",(0,r.kt)("inlineCode",{parentName:"p"},"post_id")," that will be searched for the ids."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useMany({\n  resource: 'posts',\n  ids: [1, 2],\n  //highlight-start\n  meta: {\n    id: 'post_id',\n  },\n  // highlight-end\n})\n")),(0,r.kt)("p",{parentName:"admonition"},"Now it searches for posts in the ",(0,r.kt)("inlineCode",{parentName:"p"},"post_id")," column of the data table instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," column."),(0,r.kt)("h3",{parentName:"admonition",id:"deep-filtering"},"Deep Filtering"),(0,r.kt)("p",{parentName:"admonition"},"Deep filtering is filtering on a relation's fields."),(0,r.kt)("p",{parentName:"admonition"},"It gets the posts where the ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," of the ",(0,r.kt)("inlineCode",{parentName:"p"},"categories"),' is "Beginning". Also the inner fields of the categories can be reached with dot notation.'),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const { tableProps, sorter } = useTable({\n  resource: 'posts',\n  //highlight-start\n  filters: {\n    initial: [\n      { field: 'categories.title', operator: 'eq', value: 'Beginning' },\n    ],\n  },\n  meta: {\n    select: '*, categories!inner(title)',\n  },\n  //highlight-end\n})\n"))),(0,r.kt)("p",null,"If you filter based on a table from an inner join, you will need to use ",(0,r.kt)("inlineCode",{parentName:"p"},".select('*, mytable!inner(*)')")," within Supabase.\n:::"),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)(c,{path:"data-provider-supabase",mdxType:"CodeSandboxExample"}),(0,r.kt)("hr",null))}f.isMDXComponent=!0}}]);