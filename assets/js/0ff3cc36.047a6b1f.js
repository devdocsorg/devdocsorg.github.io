"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[47100],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||i;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},84280:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),r=n(4309);const i=e=>{let{hook:t,method:n,hasDefault:i=!0}=e;const o=`It will be passed to the [\`${n?.name}\`](${n?.URL}) method from the \`dataProvider\` as parameter via the [\`${t?.name}\`](${t?.URL}) hook. \n    The parameter is usually used as an API endpoint path.\n    It all depends on how to handle the \`resource\` in the [\`${n?.name}\`](${n?.URL}) method. \n    See the [creating a data provider](/docs/api-reference/core/providers/data-provider/#creating-a-data-provider) section for an example of how resources are handled.`;return a.createElement(a.Fragment,null,i&&a.createElement(r.D,null,"> Default: It reads the `resource` value from the current URL."),a.createElement(r.D,null,o))}},18392:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>T,contentTitle:()=>y,default:()=>D,frontMatter:()=>C,metadata:()=>x,toc:()=>w});var a=n(87462),r=(n(67294),n(3905));const i={toc:[]},o="wrapper";function l(e){let{components:t,...n}=e;return(0,r.kt)(o,(0,a.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css",metastring:"live shared",live:!0,shared:!0},"body {\n  padding: 4px;\n  background: white;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts previewHeight=420px",live:!0,url:"http://localhost:3000/posts",previewHeight:"420px"},'setInitialRoutes([\'/posts\'])\n\n// visible-block-start\nimport { IResourceComponentsProps, HttpError } from \'@pankod/refine-core\'\n\nimport { List, Table, TagField, useTable } from \'@pankod/refine-antd\'\n\ninterface IPost {\n  id: number\n  title: string\n  content: string\n  status: \'published\' | \'draft\' | \'rejected\'\n}\n\nconst PostList: React.FC<IResourceComponentsProps> = () => {\n  const { tableProps } = useTable<IPost, HttpError>()\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="id" title="ID" />\n        <Table.Column dataIndex="title" title="Title" />\n        <Table.Column dataIndex="content" title="Content" />\n        <Table.Column\n          dataIndex="status"\n          title="Status"\n          render={(value: string) => <TagField value={value} />}\n        />\n      </Table>\n    </List>\n  )\n}\n\n// visible-block-end\n\nsetRefineProps({\n  resources: [\n    {\n      name: \'posts\',\n      list: PostList,\n    },\n  ],\n})\n\nrender(<RefineAntdDemo />)\n')))}l.isMDXComponent=!0;const s={toc:[]},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css",metastring:"live shared",live:!0,shared:!0},"body {\n  padding: 4px;\n  background: white;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts previewHeight=420px",live:!0,url:"http://localhost:3000/posts",previewHeight:"420px"},"setInitialRoutes(['/posts'])\n\n// visible-block-start\nimport { IResourceComponentsProps, HttpError } from '@pankod/refine-core'\n\nimport {\n  List,\n  Table,\n  TagField,\n  useTable,\n  // highlight-next-line\n  getDefaultSortOrder,\n} from '@pankod/refine-antd'\n\ninterface IPost {\n  id: number\n  title: string\n  content: string\n  status: 'published' | 'draft' | 'rejected'\n}\n\nconst PostList: React.FC<IResourceComponentsProps> = () => {\n  // highlight-start\n  const { tableProps, sorter } = useTable<IPost>({\n    initialSorter: [\n      {\n        field: 'id',\n        order: 'desc',\n      },\n    ],\n  })\n  // highlight-end\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey=\"id\">\n        <Table.Column\n          dataIndex=\"id\"\n          title=\"ID\"\n          // highlight-start\n          sorter={{ multiple: 2 }}\n          defaultSortOrder={getDefaultSortOrder('id', sorter)}\n          // highlight-end\n        />\n        <Table.Column\n          dataIndex=\"title\"\n          title=\"Title\"\n          // highlight-start\n          sorter={{ multiple: 1 }}\n          defaultSortOrder={getDefaultSortOrder('title', sorter)}\n          // highlight-end\n        />\n        <Table.Column dataIndex=\"content\" title=\"Content\" />\n        <Table.Column\n          dataIndex=\"status\"\n          title=\"Status\"\n          render={(value: string) => <TagField value={value} />}\n        />\n      </Table>\n    </List>\n  )\n}\n// visible-block-end\n\nsetRefineProps({\n  resources: [\n    {\n      name: 'posts',\n      list: PostList,\n    },\n  ],\n})\n\nrender(<RefineAntdDemo />)\n")))}d.isMDXComponent=!0;const u={toc:[]},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css",metastring:"live shared",live:!0,shared:!0},"body {\n  padding: 4px;\n  background: white;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts previewHeight=420px",live:!0,url:"http://localhost:3000/posts",previewHeight:"420px"},'setInitialRoutes([\'/posts\'])\n\n// visible-block-start\nimport { IResourceComponentsProps, HttpError } from \'@pankod/refine-core\'\n\nimport {\n  List,\n  Table,\n  TagField,\n  useTable,\n  // highlight-start\n  FilterDropdown,\n  Radio,\n  Input,\n  // highlight-end\n} from \'@pankod/refine-antd\'\n\ninterface IPost {\n  id: number\n  title: string\n  content: string\n  status: \'published\' | \'draft\' | \'rejected\'\n}\n\nconst PostList: React.FC<IResourceComponentsProps> = () => {\n  const { tableProps } = useTable<IPost, HttpError>()\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="id" title="ID" />\n        <Table.Column dataIndex="title" title="Title" />\n        <Table.Column dataIndex="content" title="Content" />\n        <Table.Column\n          dataIndex="status"\n          title="Status"\n          render={(value: string) => <TagField value={value} />}\n          // highlight-start\n          filterDropdown={(props) => (\n            <FilterDropdown {...props}>\n              <Radio.Group>\n                <Radio value="published">Published</Radio>\n                <Radio value="draft">Draft</Radio>\n                <Radio value="rejected">Rejected</Radio>\n              </Radio.Group>\n            </FilterDropdown>\n          )}\n          // highlight-end\n        />\n      </Table>\n    </List>\n  )\n}\n\n// visible-block-end\n\nsetRefineProps({\n  resources: [\n    {\n      name: \'posts\',\n      list: PostList,\n    },\n  ],\n})\n\nrender(<RefineAntdDemo />)\n')))}m.isMDXComponent=!0;const h={toc:[]},k="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(k,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css",metastring:"live shared",live:!0,shared:!0},"body {\n  padding: 4px;\n  background: white;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts previewHeight=420px",live:!0,url:"http://localhost:3000/posts",previewHeight:"420px"},'setInitialRoutes([\'/posts\'])\n\n// visible-block-start\nimport { IResourceComponentsProps, HttpError } from \'@pankod/refine-core\'\n\nimport {\n  List,\n  Table,\n  TagField,\n  useTable,\n  // highlight-start\n  Form,\n  SaveButton,\n  Input,\n  // highlight-end\n} from \'@pankod/refine-antd\'\n\ninterface IPost {\n  id: number\n  title: string\n  content: string\n  status: \'published\' | \'draft\' | \'rejected\'\n}\n\ninterface ISearch {\n  title: string\n}\n\nconst PostList: React.FC<IResourceComponentsProps> = () => {\n  const { tableProps, searchFormProps } = useTable<IPost, HttpError, ISearch>({\n    // highlight-start\n    onSearch: (values) => {\n      return [\n        {\n          field: \'title\',\n          operator: \'contains\',\n          value: values.title,\n        },\n      ]\n    },\n    // highlight-end\n  })\n\n  return (\n    <List>\n      {/* highlight-start */}\n      <Form {...searchFormProps} layout="inline">\n        <Form.Item name="title">\n          <Input placeholder="Search by title" />\n        </Form.Item>\n        <SaveButton onClick={searchFormProps.form?.submit} />\n      </Form>\n      {/* highlight-end */}\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="id" title="ID" />\n        <Table.Column dataIndex="title" title="Title" />\n        <Table.Column dataIndex="content" title="Content" />\n        <Table.Column\n          dataIndex="status"\n          title="Status"\n          render={(value: string) => <TagField value={value} />}\n        />\n      </Table>\n    </List>\n  )\n}\n\n// visible-block-end\n\nsetRefineProps({\n  resources: [\n    {\n      name: \'posts\',\n      list: PostList,\n    },\n  ],\n})\n\nrender(<RefineAntdDemo />)\n')))}f.isMDXComponent=!0;const g={toc:[]},N="wrapper";function b(e){let{components:t,...n}=e;return(0,r.kt)(N,(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css",metastring:"live shared",live:!0,shared:!0},"body {\n  padding: 4px;\n  background: white;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts previewHeight=420px",live:!0,url:"http://localhost:3000/posts",previewHeight:"420px"},"setInitialRoutes(['/posts'])\n\n// visible-block-start\nimport {\n  IResourceComponentsProps,\n  HttpError,\n  useMany,\n  getDefaultFilter,\n} from '@pankod/refine-core'\n\nimport {\n  List,\n  Table,\n  TagField,\n  useTable,\n  // highlight-start\n  useSelect,\n  FilterDropdown,\n  Select,\n  // highlight-end\n} from '@pankod/refine-antd'\n\n// highlight-start\ninterface ICategory {\n  id: number\n  title: string\n}\n// highlight-end\n\ninterface IPost {\n  id: number\n  title: string\n  content: string\n  status: 'published' | 'draft' | 'rejected'\n  // highlight-start\n  category: {\n    id: number\n  }\n  // highlight-end\n}\n\nconst PostList: React.FC<IResourceComponentsProps> = () => {\n  const { tableProps, filters } = useTable<IPost, HttpError>()\n\n  // highlight-start\n  // Creates the array of ids. This will filter and fetch the category data for the relevant posts.\n  const categoryIds =\n    tableProps.dataSource?.map((p) => p.category.id.toString()) || []\n  // Fetches the category of each post. It uses the useMany hook to fetch the category data from the API.\n  const { data, isFetching } = useMany<ICategory>({\n    resource: 'categories',\n    ids: categoryIds,\n    queryOptions: {\n      // Set to true only if the posts array is not empty.\n      enabled: categoryIds.length > 0,\n    },\n  })\n  // highlight-end\n\n  // highlight-start\n  // Creates the props by needed the select component for filtering the posts by category.\n  const { selectProps } = useSelect<ICategory>({\n    resource: 'categories',\n    optionLabel: 'title',\n    optionValue: 'id',\n    defaultValue: getDefaultFilter('category.id', filters, 'in'),\n  })\n  // highlight-end\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey=\"id\">\n        <Table.Column dataIndex=\"id\" title=\"ID\" />\n        <Table.Column dataIndex=\"title\" title=\"Title\" />\n        <Table.Column dataIndex=\"content\" title=\"Content\" />\n        {/* highlight-start */}\n        <Table.Column\n          dataIndex={['category', 'id']}\n          title=\"Category\"\n          render={(value) => {\n            if (isFetching) return 'loading...'\n            // Gets the title of the category from the data object, which is the result of the useMany hook.\n            return data?.data.find((p) => p.id === value)?.title\n          }}\n          filterDropdown={(props: FilterDropdownProps) => (\n            <FilterDropdown\n              {...props}\n              mapValue={(selectedKeys) =>\n                selectedKeys.map((i) => parseInt(i.toString()))\n              }\n            >\n              <Select\n                style={{ minWidth: 200 }}\n                mode=\"multiple\"\n                {...selectProps}\n              />\n            </FilterDropdown>\n          )}\n        />\n        {/* highlight-end */}\n        <Table.Column\n          dataIndex=\"status\"\n          title=\"Status\"\n          render={(value: string) => <TagField value={value} />}\n        />\n      </Table>\n    </List>\n  )\n}\n\n// visible-block-end\n\nsetRefineProps({\n  resources: [\n    {\n      name: 'posts',\n      list: PostList,\n    },\n  ],\n})\n\nrender(<RefineAntdDemo />)\n")))}b.isMDXComponent=!0;var v=n(84280);const C={id:"useTable",title:"useTable",source:"packages/antd/src/hooks/table/useTable"},y=void 0,x={unversionedId:"api-reference/antd/hooks/table/useTable",id:"version-3.xx.xx/api-reference/antd/hooks/table/useTable",title:"useTable",description:"By using useTable, you can get properties that are compatible with Ant Design ` component. All features such as sorting, filtering, and pagination come out of the box. Under the hood it uses useList` for the fetch.",source:"@site/versioned_docs/version-3.xx.xx/api-reference/antd/hooks/table/useTable.md",sourceDirName:"api-reference/antd/hooks/table",slug:"/api-reference/antd/hooks/table/useTable",permalink:"/docs/3.xx.xx/api-reference/antd/hooks/table/useTable",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/versioned_docs/version-3.xx.xx/api-reference/antd/hooks/table/useTable.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{id:"useTable",title:"useTable",source:"packages/antd/src/hooks/table/useTable"},sidebar:"someSidebar",previous:{title:"useEditableTable",permalink:"/docs/3.xx.xx/api-reference/antd/hooks/table/useEditableTable"},next:{title:"useModal",permalink:"/docs/3.xx.xx/api-reference/antd/hooks/ui/useModal"}},T={},w=[{value:"Basic usage",id:"basic-usage",level:2},{value:"Pagination",id:"pagination",level:2},{value:"Sorting",id:"sorting",level:2},{value:"Filtering",id:"filtering",level:2},{value:"Initial Filter and Sorter",id:"initial-filter-and-sorter",level:2},{value:"Search",id:"search",level:2},{value:"Realtime Updates",id:"realtime-updates",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>resource</code>",id:"resource",level:3},{value:"<code>onSearch</code>",id:"onsearch",level:3},{value:"<code>dataProviderName</code>",id:"dataprovidername",level:3},{value:"<code>initialCurrent</code>",id:"initialcurrent",level:3},{value:"<code>initialPageSize</code>",id:"initialpagesize",level:3},{value:"<code>initialSorter</code>",id:"initialsorter",level:3},{value:"<code>permanentSorter</code>",id:"permanentsorter",level:3},{value:"<code>initialFilter</code>",id:"initialfilter",level:3},{value:"<code>permanentFilter</code>",id:"permanentfilter",level:3},{value:"<code>defaultSetFilterBehavior</code>",id:"defaultsetfilterbehavior",level:3},{value:"<code>hasPagination</code>",id:"haspagination",level:3},{value:"<code>syncWithLocation</code>",id:"syncwithlocation",level:3},{value:"<code>queryOptions</code>",id:"queryoptions",level:3},{value:"<code>metaData</code>",id:"metadata",level:3},{value:"<code>successNotification</code>",id:"successnotification",level:3},{value:"<code>errorNotification</code>",id:"errornotification",level:3},{value:"<code>liveMode</code>",id:"livemode",level:3},{value:"<code>onLiveEvent</code>",id:"onliveevent",level:3},{value:"<code>liveParams</code>",id:"liveparams",level:3},{value:"Return Values",id:"return-values",level:2},{value:"<code>tableProps</code>",id:"tableprops",level:3},{value:"<code>onChange</code>",id:"onchange",level:4},{value:"<code>dataSource</code>",id:"datasource",level:4},{value:"<code>loading</code>",id:"loading",level:4},{value:"<code>pagination</code>",id:"pagination-1",level:4},{value:"<code>scroll</code>",id:"scroll",level:4},{value:"<code>searchFormProps</code>",id:"searchformprops",level:3},{value:"<code>tableQueryResult</code>",id:"tablequeryresult",level:3},{value:"<code>sorter</code>",id:"sorter",level:3},{value:"<code>setSorter</code>",id:"setsorter",level:3},{value:"<code>filters</code>",id:"filters",level:3},{value:"<code>setFilters</code>",id:"setfilters",level:3},{value:"<code>current</code>",id:"current",level:3},{value:"<code>setCurrent</code>",id:"setcurrent",level:3},{value:"<code>pageSize</code>",id:"pagesize",level:3},{value:"<code>setPageSize</code>",id:"setpagesize",level:3},{value:"<code>pageCount</code>",id:"pagecount",level:3},{value:"<code>createLinkForSyncWithLocation</code>",id:"createlinkforsyncwithlocation",level:3},{value:"FAQ",id:"faq",level:2},{value:"How can I handle relational data?",id:"how-can-i-handle-relational-data",level:3},{value:"API",id:"api",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Return values",id:"return-values-1",level:3},{value:"Example",id:"example",level:2}],P=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},I=P("PropsTable"),S=P("CodeSandboxExample"),F={toc:w},R="wrapper";function D(e){let{components:t,...n}=e;return(0,r.kt)(R,(0,a.Z)({},F,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"By using ",(0,r.kt)("inlineCode",{parentName:"p"},"useTable"),", you can get properties that are compatible with Ant Design ",(0,r.kt)("a",{parentName:"p",href:"https://ant.design/components/table/#API"},(0,r.kt)("inlineCode",{parentName:"a"},"<Table>"))," component. All features such as sorting, filtering, and pagination come out of the box. Under the hood it uses ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useList/"},(0,r.kt)("inlineCode",{parentName:"a"},"useList"))," for the fetch."),(0,r.kt)("p",null,"For all the other features, you can refer to the Ant Design ",(0,r.kt)("a",{parentName:"p",href:"https://ant.design/components/table/#API"},(0,r.kt)("inlineCode",{parentName:"a"},"<Table>"))," documentation."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"useTable")," hook is extended from ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/useTable/"},(0,r.kt)("inlineCode",{parentName:"a"},"useTable"))," hook from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/master/packages/core"},(0,r.kt)("inlineCode",{parentName:"a"},"@pankod/refine-core"))," package. This means that you can use all the features of ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/useTable/"},(0,r.kt)("inlineCode",{parentName:"a"},"useTable"))," hook.")),(0,r.kt)("h2",{id:"basic-usage"},"Basic usage"),(0,r.kt)("p",null,"In basic usage, ",(0,r.kt)("inlineCode",{parentName:"p"},"useTable")," returns the data as it comes from the endpoint. By default, it reads ",(0,r.kt)("a",{parentName:"p",href:"#resource"},(0,r.kt)("inlineCode",{parentName:"a"},"resource"))," from the URL."),(0,r.kt)(l,{mdxType:"BasicUsageLivePreview"}),(0,r.kt)("h2",{id:"pagination"},"Pagination"),(0,r.kt)("p",null,"This feature comes out of the box with the ",(0,r.kt)("inlineCode",{parentName:"p"},"tableProps.pagination"),". It generates the pagination links for the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Table>")," component instead of react state and overrides ",(0,r.kt)("inlineCode",{parentName:"p"},"<Table>"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"pagination.itemRender")," value. It also syncs the pagination state with the URL."),(0,r.kt)("p",null,"It also syncs the pagination state with the URL if you enable the ",(0,r.kt)("a",{parentName:"p",href:"#syncwithlocation"},(0,r.kt)("inlineCode",{parentName:"a"},"syncWithLocation")),"."),(0,r.kt)("p",null,"If you want to make a change in the pagination of the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Table>"),". You should pass the pagination object of the ",(0,r.kt)("inlineCode",{parentName:"p"},"tableProps")," to the pagination property of the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Table>")," as below. You can override the values of the pagination object as your need."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const { tableProps } = useTable<IPost>()\n\n;<Table\n  {...tableProps}\n  rowKey=\"id\"\n  // highlight-start\n  pagination={{\n    ...tableProps.pagination,\n    position: ['bottomCenter'],\n    size: 'small',\n  }}\n  // highlight-end\n>\n  // ---\n</Table>\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"To disable pagination, you can set ",(0,r.kt)("inlineCode",{parentName:"p"},"hasPagination")," property to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," which is ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," by default. If ",(0,r.kt)("inlineCode",{parentName:"p"},"hasPagination")," has set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", pagination elements will be hidden in the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Table/>"),". If you want to handle the pagination on the client-side you can override the ",(0,r.kt)("inlineCode",{parentName:"p"},"pagination")," property in ",(0,r.kt)("inlineCode",{parentName:"p"},"tableProps"),".")),(0,r.kt)("h2",{id:"sorting"},"Sorting"),(0,r.kt)("p",null,"If we want to give a column the sorting property, the corresponding ",(0,r.kt)("a",{parentName:"p",href:"https://ant.design/components/table#column"},(0,r.kt)("inlineCode",{parentName:"a"},"<Table.Column>"))," component must be given the ",(0,r.kt)("a",{parentName:"p",href:"https://ant.design/components/table/#components-table-demo-head"},"sorter")," property."),(0,r.kt)("p",null,"It also syncs the sorting state with the URL if you enable the ",(0,r.kt)("a",{parentName:"p",href:"#syncwithlocation"},(0,r.kt)("inlineCode",{parentName:"a"},"syncWithLocation")),"."),(0,r.kt)(d,{mdxType:"SorterLivePreview"}),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"During the sorting process, the ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," property of your ",(0,r.kt)("inlineCode",{parentName:"p"},"<Column />")," component is used as the property name in the API request. If your Column component does not have a ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," value, the ",(0,r.kt)("inlineCode",{parentName:"p"},"dataIndex")," property is used.\nIt can be used when your DataIndex and your sorting key are different.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"When using multiple sorting, ",(0,r.kt)("inlineCode",{parentName:"p"},"multiple")," value is required for ",(0,r.kt)("inlineCode",{parentName:"p"},"sorter")," property. Which specifies the priority of the column in sorting.")),(0,r.kt)("h2",{id:"filtering"},"Filtering"),(0,r.kt)("p",null,"We can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"filterDropdown")," property from ",(0,r.kt)("a",{parentName:"p",href:"https://ant.design/components/table#column"},(0,r.kt)("inlineCode",{parentName:"a"},"<Table.Column>"))," to make filtering based on the column values. In order to do this, we need to put the filtering form inside the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/components/filter-dropdown/"},(0,r.kt)("inlineCode",{parentName:"a"},"<FilterDropdown>"))," component and pass the properties coming to the function to these component's properties."),(0,r.kt)("p",null,"It also syncs the filtering state with the URL if you enable the ",(0,r.kt)("a",{parentName:"p",href:"#syncwithlocation"},(0,r.kt)("inlineCode",{parentName:"a"},"syncWithLocation")),"."),(0,r.kt)(m,{mdxType:"FilteringPreview"}),(0,r.kt)("h2",{id:"initial-filter-and-sorter"},"Initial Filter and Sorter"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"If you're using the ",(0,r.kt)("inlineCode",{parentName:"p"},"initialSorter")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"initialFilter"),", don't forget to add ",(0,r.kt)("inlineCode",{parentName:"p"},"getDefaultSortOrder")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultFilteredValue")," to your ",(0,r.kt)("inlineCode",{parentName:"p"},"<Table.Column>")," component. Otherwise, during filter and paging operations, the ",(0,r.kt)("inlineCode",{parentName:"p"},"initialSorter")," might be lost."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'// ---\nconst { tableProps, sorter, filters } = useTable({\n    initialSorter: [\n        {\n            field: "title",\n            order: "asc",\n        },\n    ],\n    initialFilter: [\n        {\n            field: "status",\n            operator: "eq",\n            value: "published",\n        },\n    ],\n});\n\n// ---\n<Table.Column\n    dataIndex="title"\n    title="Title"\n    // highlight-next-line\n     defaultSortOrder={getDefaultSortOrder("title", sorter)}\n/>\n<Table.Column\n    dataIndex="status"\n    title="Status"\n    render={(value) => <TagField value={value} />}\n    // highlight-next-line\n    defaultFilteredValue={getDefaultFilter("status", filters)}\n    filterDropdown={(props) => (\n        <FilterDropdown {...props}>\n            <Radio.Group>\n                <Radio value="published">Published</Radio>\n                <Radio value="draft">Draft</Radio>\n                <Radio value="rejected">Rejected</Radio>\n            </Radio.Group>\n        </FilterDropdown>\n    )}\n/>\n// ---\n'))),(0,r.kt)("h2",{id:"search"},"Search"),(0,r.kt)("p",null,"We can use ",(0,r.kt)("a",{parentName:"p",href:"#onsearch"},(0,r.kt)("inlineCode",{parentName:"a"},"onSearch"))," and ",(0,r.kt)("a",{parentName:"p",href:"#searchformprops"},(0,r.kt)("inlineCode",{parentName:"a"},"searchFormProps"))," properties to make custom filter form. ",(0,r.kt)("inlineCode",{parentName:"p"},"onSearch")," is a function that is called when the form is submitted. ",(0,r.kt)("inlineCode",{parentName:"p"},"searchFormProps")," is a property that is passed to the ",(0,r.kt)("a",{parentName:"p",href:"https://ant.design/components/form"},(0,r.kt)("inlineCode",{parentName:"a"},"<Form>"))," component."),(0,r.kt)(f,{mdxType:"SearchPreview"}),(0,r.kt)("h2",{id:"realtime-updates"},"Realtime Updates"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This feature is only available if you use a ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider"},"Live Provider"),".")),(0,r.kt)("p",null,"When the ",(0,r.kt)("inlineCode",{parentName:"p"},"useTable")," hook is mounted, it will call the ",(0,r.kt)("inlineCode",{parentName:"p"},"subscribe")," method from the ",(0,r.kt)("inlineCode",{parentName:"p"},"liveProvider")," with some parameters such as ",(0,r.kt)("inlineCode",{parentName:"p"},"channel"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"resource")," etc. It is useful when you want to subscribe to live updates."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"liveProvider")," documentation for more information ","\u2192")),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"resource"},(0,r.kt)("inlineCode",{parentName:"h3"},"resource")),(0,r.kt)(v.Z,{hook:{name:"useList",URL:"/docs/api-reference/core/hooks/data/useList/"},method:{name:"getList",URL:"/docs/api-reference/core/providers/data-provider/#getlist"},mdxType:"PropResource"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useTable({\n  resource: 'categories',\n})\n")),(0,r.kt)("h3",{id:"onsearch"},(0,r.kt)("inlineCode",{parentName:"h3"},"onSearch")),(0,r.kt)("p",null,"When ",(0,r.kt)("a",{parentName:"p",href:"#searchformprops"},(0,r.kt)("inlineCode",{parentName:"a"},"searchFormProps.onFinish"))," is called, the ",(0,r.kt)("inlineCode",{parentName:"p"},"onSearch")," function is called with the values of the form. The ",(0,r.kt)("inlineCode",{parentName:"p"},"onSearch")," function should return ",(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#crudfilters"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudFilters | Promise<CrudFilters>")),".\nAlso, ",(0,r.kt)("inlineCode",{parentName:"p"},"onSearch")," will set the current page to 1."),(0,r.kt)("p",null,"It's useful when you want to filter the data with any query."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'const { searchFormProps, tableProps } = useTable({\n  onSearch: (values) => {\n    return [\n      {\n        field: \'title\',\n        operator: \'contains\',\n        value: values.title,\n      },\n    ]\n  },\n})\n\n// --\n;<List>\n  <Form {...searchFormProps}>\n    <Space>\n      <Form.Item name="title">\n        <Input placeholder="Search by title" />\n      </Form.Item>\n      <SaveButton onClick={searchFormProps.form?.submit} />\n    </Space>\n  </Form>\n  <Table {...tableProps} rowKey="id">\n    <Table.Column title="Title" dataIndex="title" />\n  </Table>\n</List>\n// ---\n')),(0,r.kt)("h3",{id:"dataprovidername"},(0,r.kt)("inlineCode",{parentName:"h3"},"dataProviderName")),(0,r.kt)("p",null,"If there is more than one ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProvider"),", you should use the ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProviderName")," that you will use. It is useful when you want to use a different ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProvider")," for a specific resource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useTable({\n  dataProviderName: 'second-data-provider',\n})\n")),(0,r.kt)("h3",{id:"initialcurrent"},(0,r.kt)("inlineCode",{parentName:"h3"},"initialCurrent")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"1"))),(0,r.kt)("p",null,"Sets the initial value of the page index."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useTable({\n  initialCurrent: 2, // This will cause the table to initially display the data for page 2, rather than the default of page 1\n})\n")),(0,r.kt)("h3",{id:"initialpagesize"},(0,r.kt)("inlineCode",{parentName:"h3"},"initialPageSize")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"10"))),(0,r.kt)("p",null,"Sets the initial value of the page size."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useTable({\n  initialPageSize: 20, // This will cause the table to initially display 20 rows per page, rather than the default of 10\n})\n")),(0,r.kt)("h3",{id:"initialsorter"},(0,r.kt)("inlineCode",{parentName:"h3"},"initialSorter")),(0,r.kt)("p",null,"Sets the initial value of the sorter. The ",(0,r.kt)("inlineCode",{parentName:"p"},"initialSorter")," is not permanent. It will be cleared when the user changes the sorter. If you want to set a permanent value, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"permanentSorter")," prop."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useTable({\n  initialSorter: [\n    {\n      field: 'title',\n      order: 'asc',\n    },\n  ],\n})\n")),(0,r.kt)("h3",{id:"permanentsorter"},(0,r.kt)("inlineCode",{parentName:"h3"},"permanentSorter")),(0,r.kt)("p",null,"Sets the permanent value of the sorter. The ",(0,r.kt)("inlineCode",{parentName:"p"},"permanentSorter")," is permanent and unchangeable. It will not be cleared when the user changes the sorter. If you want to set a temporary value, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"initialSorter")," prop."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useTable({\n  permanentSorter: [\n    {\n      field: 'title',\n      order: 'asc',\n    },\n  ],\n})\n")),(0,r.kt)("h3",{id:"initialfilter"},(0,r.kt)("inlineCode",{parentName:"h3"},"initialFilter")),(0,r.kt)("p",null,"Sets the initial value of the filter. The ",(0,r.kt)("inlineCode",{parentName:"p"},"initialFilter")," is not permanent. It will be cleared when the user changes the filter. If you want to set a permanent value, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"permanentFilter")," prop."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useTable({\n  initialFilter: [\n    {\n      field: 'title',\n      operator: 'contains',\n      value: 'Foo',\n    },\n  ],\n})\n")),(0,r.kt)("h3",{id:"permanentfilter"},(0,r.kt)("inlineCode",{parentName:"h3"},"permanentFilter")),(0,r.kt)("p",null,"Sets the permanent value of the filter. The ",(0,r.kt)("inlineCode",{parentName:"p"},"permanentFilter")," is permanent and unchangeable. It will not be cleared when the user changes the filter. If you want to set a temporary value, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"initialFilter")," prop."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useTable({\n  permanentFilter: [\n    {\n      field: 'title',\n      operator: 'contains',\n      value: 'Foo',\n    },\n  ],\n})\n")),(0,r.kt)("h3",{id:"defaultsetfilterbehavior"},(0,r.kt)("inlineCode",{parentName:"h3"},"defaultSetFilterBehavior")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"merge"))),(0,r.kt)("p",null,"The filtering behavior can be set to either ",(0,r.kt)("inlineCode",{parentName:"p"},'"merge"')," or ",(0,r.kt)("inlineCode",{parentName:"p"},'"replace"'),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"When the filter behavior is set to ",(0,r.kt)("inlineCode",{parentName:"p"},'"merge"'),", it will merge the new filter with the existing filters. This means that if the new filter has the same column as an existing filter, the new filter will replace the existing filter for that column. If the new filter has a different column than the existing filters, it will be added to the existing filters.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"When the filter behavior is set to ",(0,r.kt)("inlineCode",{parentName:"p"},'"replace"'),", it will replace all existing filters with the new filter. This means that any existing filters will be removed and only the new filter will be applied to the table."))),(0,r.kt)("p",null,"You can also override the default value by using the second parameter of the ",(0,r.kt)("a",{parentName:"p",href:"#setfilters"},(0,r.kt)("inlineCode",{parentName:"a"},"setFilters"))," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useTable({\n  defaultSetFilterBehavior: 'replace',\n})\n")),(0,r.kt)("h3",{id:"haspagination"},(0,r.kt)("inlineCode",{parentName:"h3"},"hasPagination")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"true"))),(0,r.kt)("p",null,"Determines whether to use server-side pagination or not."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useTable({\n  hasPagination: false,\n})\n")),(0,r.kt)("h3",{id:"syncwithlocation"},(0,r.kt)("inlineCode",{parentName:"h3"},"syncWithLocation")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"false"))),(0,r.kt)("p",null,"When you use the syncWithLocation feature, the ",(0,r.kt)("inlineCode",{parentName:"p"},"useTable"),"'s state (e.g. sort order, filters, pagination) is automatically encoded in the query parameters of the URL, and when the URL changes, the ",(0,r.kt)("inlineCode",{parentName:"p"},"useTable")," state is automatically updated to match. This makes it easy to share table state across different routes or pages, and to allow users to bookmark or share links to specific table views."),(0,r.kt)("p",null,"Also, you can set this value globally on ",(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/components/refine-config#syncwithlocation"},(0,r.kt)("inlineCode",{parentName:"a"},"<Refine>"))," component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useTable({\n  syncWithLocation: true,\n})\n")),(0,r.kt)("h3",{id:"queryoptions"},(0,r.kt)("inlineCode",{parentName:"h3"},"queryOptions")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useTable")," uses ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useList/"},(0,r.kt)("inlineCode",{parentName:"a"},"useList"))," hook to fetch data. You can pass ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/query/v4/docs/react/reference/useQuery"},(0,r.kt)("inlineCode",{parentName:"a"},"queryOptions")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useTable({\n  queryOptions: {\n    retry: 3,\n  },\n})\n")),(0,r.kt)("h3",{id:"metadata"},(0,r.kt)("inlineCode",{parentName:"h3"},"metaData")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/general-concepts/#metadata"},(0,r.kt)("inlineCode",{parentName:"a"},"metaData"))," is used following two purposes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To pass additional information to data provider methods."),(0,r.kt)("li",{parentName:"ul"},"Generate GraphQL queries using plain JavaScript Objects (JSON). Please refer ",(0,r.kt)("a",{parentName:"li",href:"/docs/advanced-tutorials/data-provider/graphql/#edit-page"},"GraphQL")," for more information.")),(0,r.kt)("p",null,"In the following example, we pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"headers")," property in the ",(0,r.kt)("inlineCode",{parentName:"p"},"metaData")," object to the ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," method. With similar logic, you can pass any properties to specifically handle the data provider methods."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useTable({\n  // highlight-start\n  metaData: {\n    headers: { 'x-meta-data': 'true' },\n  },\n  // highlight-end\n})\n\nconst myDataProvider = {\n  //...\n  getList: async ({\n    resource,\n    pagination,\n    hasPagination,\n    sort,\n    filters,\n    // highlight-next-line\n    metaData,\n  }) => {\n    // highlight-next-line\n    const headers = metaData?.headers ?? {}\n    const url = `${apiUrl}/${resource}`\n\n    //...\n    //...\n\n    // highlight-next-line\n    const { data, headers } = await httpClient.get(`${url}`, { headers })\n\n    return {\n      data,\n    }\n  },\n  //...\n}\n")),(0,r.kt)("h3",{id:"successnotification"},(0,r.kt)("inlineCode",{parentName:"h3"},"successNotification")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/providers/notification-provider"},(0,r.kt)("inlineCode",{parentName:"a"},"NotificationProvider"))," is required for this prop to work.")),(0,r.kt)("p",null,"After data is fetched successfully, ",(0,r.kt)("inlineCode",{parentName:"p"},"useTable")," can call ",(0,r.kt)("inlineCode",{parentName:"p"},"open")," function from ",(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/providers/notification-provider"},(0,r.kt)("inlineCode",{parentName:"a"},"NotificationProvider"))," to show a success notification. With this prop, you can customize the success notification."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useTable({\n  successNotification: (data, values, resource) => {\n    return {\n      message: `${data.title} Successfully fetched.`,\n      description: 'Success with no errors',\n      type: 'success',\n    }\n  },\n})\n")),(0,r.kt)("h3",{id:"errornotification"},(0,r.kt)("inlineCode",{parentName:"h3"},"errorNotification")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/providers/notification-provider"},(0,r.kt)("inlineCode",{parentName:"a"},"NotificationProvider"))," is required for this prop to work.")),(0,r.kt)("p",null,"After data fetching is failed, ",(0,r.kt)("inlineCode",{parentName:"p"},"useTable")," will call ",(0,r.kt)("inlineCode",{parentName:"p"},"open")," function from ",(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/providers/notification-provider"},(0,r.kt)("inlineCode",{parentName:"a"},"NotificationProvider"))," to show an error notification. With this prop, you can customize the error notification."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useTable({\n  errorNotification: (data, values, resource) => {\n    return {\n      message: `Something went wrong when getting ${data.id}`,\n      description: 'Error',\n      type: 'error',\n    }\n  },\n})\n")),(0,r.kt)("h3",{id:"livemode"},(0,r.kt)("inlineCode",{parentName:"h3"},"liveMode")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/"},(0,r.kt)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,r.kt)("p",null,'Determines whether to update data automatically ("auto") or not ("manual") if a related live event is received. It can be used to update and show data in Realtime throughout your app.\nFor more information about live mode, please check ',(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/#livemode"},"Live / Realtime")," page."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useTable({\n  liveMode: 'auto',\n})\n")),(0,r.kt)("h3",{id:"onliveevent"},(0,r.kt)("inlineCode",{parentName:"h3"},"onLiveEvent")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/"},(0,r.kt)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,r.kt)("p",null,"The callback function is executed when new events from a subscription have arrived."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useTable({\n  onLiveEvent: (event) => {\n    console.log(event)\n  },\n})\n")),(0,r.kt)("h3",{id:"liveparams"},(0,r.kt)("inlineCode",{parentName:"h3"},"liveParams")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/"},(0,r.kt)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,r.kt)("p",null,"Params to pass to liveProvider's ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/#subscribe"},"subscribe")," method."),(0,r.kt)("h2",{id:"return-values"},"Return Values"),(0,r.kt)("h3",{id:"tableprops"},(0,r.kt)("inlineCode",{parentName:"h3"},"tableProps")),(0,r.kt)("p",null,"The props needed by the ",(0,r.kt)("a",{parentName:"p",href:"https://ant.design/components/table/#API"},(0,r.kt)("inlineCode",{parentName:"a"},"<Table>"))," component."),(0,r.kt)("h4",{id:"onchange"},(0,r.kt)("inlineCode",{parentName:"h4"},"onChange")),(0,r.kt)("p",null,"The callback function is executed when a user interacts(filter, sort, etc.) with the table."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\ud83d\udea8 ",(0,r.kt)("inlineCode",{parentName:"p"},"useTable")," handles sorting, filtering, and pagination with this function. If you override this function, you need to handle these operations manually.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'const { tableProps } = useTable()\n\n<Table {...tableProps} onChange={tableProps.onChange} rowKey="id">\n    <Table.Column title="Title" dataIndex="title" />\n</Table>\n')),(0,r.kt)("h4",{id:"datasource"},(0,r.kt)("inlineCode",{parentName:"h4"},"dataSource")),(0,r.kt)("p",null,"Contains the data to be displayed in the table. Values fetched with ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useList/"},(0,r.kt)("inlineCode",{parentName:"a"},"useList"))," hook."),(0,r.kt)("h4",{id:"loading"},(0,r.kt)("inlineCode",{parentName:"h4"},"loading")),(0,r.kt)("p",null,"Indicates whether the data is being fetched."),(0,r.kt)("h4",{id:"pagination-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"pagination")),(0,r.kt)("p",null,"Returns pagination configuration values(pageSize, current, position, etc.)."),(0,r.kt)("h4",{id:"scroll"},(0,r.kt)("inlineCode",{parentName:"h4"},"scroll")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"{ x: true }"))),(0,r.kt)("p",null,"Whether the table can be scrollable."),(0,r.kt)("h3",{id:"searchformprops"},(0,r.kt)("inlineCode",{parentName:"h3"},"searchFormProps")),(0,r.kt)("p",null,"It returns ",(0,r.kt)("a",{parentName:"p",href:"https://ant.design/components/form/"},(0,r.kt)("inlineCode",{parentName:"a"},"<Form>"))," instance of Ant Design. When ",(0,r.kt)("inlineCode",{parentName:"p"},"searchFormProps.onFinish")," is called, it will trigger ",(0,r.kt)("a",{parentName:"p",href:"#onsearch"},(0,r.kt)("inlineCode",{parentName:"a"},"onSearch"))," function.\nYou can also use ",(0,r.kt)("inlineCode",{parentName:"p"},"searchFormProps.form.submit")," to submit the form manually."),(0,r.kt)("p",null,"It's useful when you want to create a filter form for your ",(0,r.kt)("inlineCode",{parentName:"p"},"<Table>"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { IResourceComponentsProps, HttpError } from \'@pankod/refine-core\'\nimport {\n  List,\n  Table,\n  useTable,\n  Form,\n  SaveButton,\n  Input,\n} from \'@pankod/refine-antd\'\n\ninterface IPost {\n  id: number\n  title: string\n}\n\ninterface ISearch {\n  title: string\n}\n\nconst PostList: React.FC<IResourceComponentsProps> = () => {\n  const { searchFormProps, tableProps } = useTable<IPost, HttpError, ISearch>({\n    onSearch: (values) => {\n      return [\n        {\n          field: \'title\',\n          operator: \'contains\',\n          value: values.title,\n        },\n      ]\n    },\n  })\n\n  return (\n    <List>\n      <Form {...searchFormProps} layout="inline">\n        <Form.Item name="title">\n          <Input placeholder="Search by title" />\n        </Form.Item>\n        {/* highlight-next-line */}\n        <SaveButton onClick={searchFormProps.form?.submit} />\n      </Form>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="id" title="ID" />\n        <Table.Column title="Title" dataIndex="title" />\n      </Table>\n    </List>\n  )\n}\n')),(0,r.kt)("h3",{id:"tablequeryresult"},(0,r.kt)("inlineCode",{parentName:"h3"},"tableQueryResult")),(0,r.kt)("p",null,"Returned values from ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useList/"},(0,r.kt)("inlineCode",{parentName:"a"},"useList"))," hook."),(0,r.kt)("h3",{id:"sorter"},(0,r.kt)("inlineCode",{parentName:"h3"},"sorter")),(0,r.kt)("p",null,"Current ",(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#crudsorting"},"sorter state"),"."),(0,r.kt)("h3",{id:"setsorter"},(0,r.kt)("inlineCode",{parentName:"h3"},"setSorter")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"}," (sorter: CrudSorting) => void;\n")),(0,r.kt)("p",null,"A function to set current ",(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#crudsorting"},"sorter state"),"."),(0,r.kt)("h3",{id:"filters"},(0,r.kt)("inlineCode",{parentName:"h3"},"filters")),(0,r.kt)("p",null,"Current ",(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#crudfilters"},"filters state"),"."),(0,r.kt)("h3",{id:"setfilters"},(0,r.kt)("inlineCode",{parentName:"h3"},"setFilters")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"((filters: CrudFilters, behavior?: SetFilterBehavior) => void) & ((setter: (prevFilters: CrudFilters) => CrudFilters) => void)\n")),(0,r.kt)("p",null,"A function to set current ",(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#crudfilters"},"filters state"),"."),(0,r.kt)("h3",{id:"current"},(0,r.kt)("inlineCode",{parentName:"h3"},"current")),(0,r.kt)("p",null,"Current page index state. If pagination is disabled, it will be ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,r.kt)("h3",{id:"setcurrent"},(0,r.kt)("inlineCode",{parentName:"h3"},"setCurrent")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"React.Dispatch<React.SetStateAction<number>> | undefined\n")),(0,r.kt)("p",null,"A function to set the current page index state. If pagination is disabled, it will be ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,r.kt)("h3",{id:"pagesize"},(0,r.kt)("inlineCode",{parentName:"h3"},"pageSize")),(0,r.kt)("p",null,"Current page size state. If pagination is disabled, it will be ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,r.kt)("h3",{id:"setpagesize"},(0,r.kt)("inlineCode",{parentName:"h3"},"setPageSize")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"React.Dispatch<React.SetStateAction<number>> | undefined\n")),(0,r.kt)("p",null,"A function to set the current page size state. If pagination is disabled, it will be ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,r.kt)("h3",{id:"pagecount"},(0,r.kt)("inlineCode",{parentName:"h3"},"pageCount")),(0,r.kt)("p",null,"Total page count state. If pagination is disabled, it will be ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,r.kt)("h3",{id:"createlinkforsyncwithlocation"},(0,r.kt)("inlineCode",{parentName:"h3"},"createLinkForSyncWithLocation")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},";(params: SyncWithLocationParams) => string\n")),(0,r.kt)("p",null,"A function creates accessible links for ",(0,r.kt)("inlineCode",{parentName:"p"},"syncWithLocation"),". It takes an ",(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#syncwithlocationparams"},"SyncWithLocationParams")," as parameters."),(0,r.kt)("h2",{id:"faq"},"FAQ"),(0,r.kt)("h3",{id:"how-can-i-handle-relational-data"},"How can I handle relational data?"),(0,r.kt)("p",null,"You can use ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useMany/"},(0,r.kt)("inlineCode",{parentName:"a"},"useMany"))," hook to fetch relational data and filter ",(0,r.kt)("inlineCode",{parentName:"p"},"<Table>")," by categories with help of ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:3000/docs/api-reference/antd/hooks/field/useSelect/"},(0,r.kt)("inlineCode",{parentName:"a"},"useSelect"))),(0,r.kt)(b,{mdxType:"RelationalLivePreview"}),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("h3",{id:"properties-1"},"Properties"),(0,r.kt)(I,{module:"@pankod/refine-antd/useTable",mdxType:"PropsTable"}),(0,r.kt)("h3",{id:"type-parameters"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Desription"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TData"),(0,r.kt)("td",{parentName:"tr",align:null},"Result data of the query. Extends ",(0,r.kt)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TError"),(0,r.kt)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,r.kt)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TSearchVariables"),(0,r.kt)("td",{parentName:"tr",align:null},"Values for search params"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{}"))))),(0,r.kt)("h3",{id:"return-values-1"},"Return values"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"searchFormProps"),(0,r.kt)("td",{parentName:"tr",align:null},"Ant Design ",(0,r.kt)("a",{parentName:"td",href:"https://ant.design/components/form/#API"},(0,r.kt)("inlineCode",{parentName:"a"},"<Form>"))," props"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://ant.design/components/form/#API"},(0,r.kt)("inlineCode",{parentName:"a"},"FormProps<TSearchVariables>")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"tableProps"),(0,r.kt)("td",{parentName:"tr",align:null},"Ant Design ",(0,r.kt)("a",{parentName:"td",href:"https://ant.design/components/table/#API"},(0,r.kt)("inlineCode",{parentName:"a"},"<Table>"))," props"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://ant.design/components/table/#API"},(0,r.kt)("inlineCode",{parentName:"a"},"TableProps<TData>")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"tableQueryResult"),(0,r.kt)("td",{parentName:"tr",align:null},"Result of the ",(0,r.kt)("inlineCode",{parentName:"td"},"react-query"),"'s ",(0,r.kt)("inlineCode",{parentName:"td"},"useQuery")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},(0,r.kt)("inlineCode",{parentName:"a"},"QueryObserverResult<{`` data: TData[];`` total: number; },`` TError>")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"current"),(0,r.kt)("td",{parentName:"tr",align:null},"Current page index state (returns ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"totalPage"),(0,r.kt)("td",{parentName:"tr",align:null},"Total page count (returns ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setCurrent"),(0,r.kt)("td",{parentName:"tr",align:null},"A function that changes the current (returns ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"React.Dispatch<React.SetStateAction<number>>")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pageSize"),(0,r.kt)("td",{parentName:"tr",align:null},"Current pageSize state (returns ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setPageSize"),(0,r.kt)("td",{parentName:"tr",align:null},"A function that changes the pageSize. (returns ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"React.Dispatch<React.SetStateAction<number>>")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sorter"),(0,r.kt)("td",{parentName:"tr",align:null},"Current sorting state"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#crudsorting"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudSorting")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"filters"),(0,r.kt)("td",{parentName:"tr",align:null},"Current filters state"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#crudfilters"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudFilters")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setFilters"),(0,r.kt)("td",{parentName:"tr",align:null},"A function that accepts a new filter state"),(0,r.kt)("td",{parentName:"tr",align:null},"- ",(0,r.kt)("inlineCode",{parentName:"td"},'(filters: CrudFilters, behavior?: "merge" \\| "replace" = "merge") => void')," - ",(0,r.kt)("inlineCode",{parentName:"td"},"(setter: (previousFilters: CrudFilters) => CrudFilters) => void"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setSorter"),(0,r.kt)("td",{parentName:"tr",align:null},"A function that accepts a new sorter state."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(sorter: CrudSorting) => void"))))),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)(S,{path:"table-antd-use-table",mdxType:"CodeSandboxExample"}))}D.isMDXComponent=!0}}]);