"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[11843],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),h=a,m=u["".concat(l,".").concat(h)]||u[h]||c[h]||o;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},29311:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={id:"chakra-auth-page",title:"<AuthPage>",sidebar_label:"<AuthPage>",description:"<AuthPage> component from refine is a authentication page that can be used to login, register, forgot password and update password.",swizzle:!0,source:"packages/chakra-ui/src/components/pages/auth/index.tsx"},i=void 0,s={unversionedId:"api-reference/chakra-ui/components/chakra-auth-page",id:"api-reference/chakra-ui/components/chakra-auth-page",title:"<AuthPage>",description:"<AuthPage> component from refine is a authentication page that can be used to login, register, forgot password and update password.",source:"@site/docs/api-reference/chakra-ui/components/auth-page.md",sourceDirName:"api-reference/chakra-ui/components",slug:"/api-reference/chakra-ui/components/chakra-auth-page",permalink:"/docs/api-reference/chakra-ui/components/chakra-auth-page",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/docs/api-reference/chakra-ui/components/auth-page.md",tags:[],version:"current",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{id:"chakra-auth-page",title:"<AuthPage>",sidebar_label:"<AuthPage>",description:"<AuthPage> component from refine is a authentication page that can be used to login, register, forgot password and update password.",swizzle:!0,source:"packages/chakra-ui/src/components/pages/auth/index.tsx"},sidebar:"someSidebar",previous:{title:"Chakra UI API",permalink:"/docs/api-reference/chakra-ui"},next:{title:"<ThemedLayout>",permalink:"/docs/api-reference/chakra-ui/components/chakra-ui-themed-layout"}},l={},p=[{value:"Usage",id:"usage",level:2},{value:"Types",id:"types",level:2},{value:"Login",id:"login",level:3},{value:"Register",id:"register",level:3},{value:"ForgotPassword",id:"forgotpassword",level:3},{value:"UpdatePassword",id:"updatepassword",level:3},{value:"Props",id:"props",level:2},{value:"<code>providers</code>",id:"providers",level:3},{value:"<code>rememberMe</code>",id:"rememberme",level:3},{value:"<code>loginLink</code>",id:"loginlink",level:3},{value:"<code>registerLink</code>",id:"registerlink",level:3},{value:"<code>forgotPasswordLink</code>",id:"forgotpasswordlink",level:3},{value:"<code>wrapperProps</code>",id:"wrapperprops",level:3},{value:"<code>contentProps</code>",id:"contentprops",level:3},{value:"<code>formProps</code>",id:"formprops",level:3},{value:"<code>title</code>",id:"title",level:3},{value:"<code>renderContent</code>",id:"rendercontent",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties",level:3},{value:"Interface",id:"interface",level:3}],d={toc:p},u="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component from ",(0,a.kt)("strong",{parentName:"p"},"refine")," for ",(0,a.kt)("strong",{parentName:"p"},"Chakra UI")," contains authentication pages that can be used to login, register, forgot password and update password."),(0,a.kt)("p",null,"Before using ",(0,a.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component you need to add ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/auth-provider"},"authProvider")," that will be used to handle authentication."),(0,a.kt)("admonition",{title:"Swizzle",type:"info-tip"},(0,a.kt)("p",{parentName:"admonition"},"You can swizzle this component to customize it with the ",(0,a.kt)("a",{parentName:"p",href:"/docs/packages/documentation/cli"},(0,a.kt)("strong",{parentName:"a"},"refine CLI")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode shared",live:!0,hideCode:!0,shared:!0},'const { default: sharedDataProvider } = RefineSimpleRest;\nconst { useLogout: useLogoutShared } = RefineCore;\nconst { Button } = ChakraUI;\n\nwindow.__refineAuthStatus = false;\n\nconst authProvider = {\n    login: async () => {\n        window.__refineAuthStatus = true;\n        return {\n            success: true,\n            redirectTo: "/",\n        };\n    },\n    register: async () => {\n        return {\n            success: true,\n        };\n    },\n    forgotPassword: async () => {\n        return {\n            success: true,\n        };\n    },\n    updatePassword: async () => {\n        return {\n            success: true,\n        };\n    },\n    logout: async () => {\n        window.__refineAuthStatus = false;\n        return {\n            success: true,\n            redirectTo: "/",\n        };\n    },\n    check: async () => {\n        return {\n            authenticated: window.__refineAuthStatus ? true : false,\n            redirectTo: window.__refineAuthStatus ? undefined : "/login",\n        };\n    },\n    onError: async (error) => {\n        console.error(error);\n        return { error };\n    },\n    getPermissions: async () => null,\n    getIdentity: async () => null,\n};\n\nsetRefineProps({ Sider: () => null, dataProvider: sharedDataProvider("api") });\n\nconst Wrapper = ({ children }) => {\n    return children;\n};\n\nconst DashboardPage = () => {\n    const { mutate } = useLogoutShared();\n\n    return (\n        <div\n            style={{\n                width: "100%",\n                maxWidth: "400px",\n                margin: "0 auto",\n                textAlign: "center",\n            }}\n        >\n            <h1 level={2}>Home Page</h1>\n            <br />\n            <button\n                onClick={() => {\n                    mutate();\n                }}\n            >\n                Logout\n            </button>\n        </div>\n    );\n};\n\nconst GoogleIcon = (\n    <svg\n        xmlns="http://www.w3.org/2000/svg"\n        width="24"\n        height="24"\n        viewBox="0 0 24 24"\n    >\n        <path\n            fill="#fff"\n            d="m23.7 12.3-.1-2.3H12.3v4.5h6.4a5.6 5.6 0 0 1-2.4 3.6v3h3.9c2.2-2.1 3.5-5.2 3.5-8.8Z M12.3 24c3.2 0 6-1 7.9-3l-3.9-3a7.2 7.2 0 0 1-10.8-3.7h-4v3c2 4 6 6.7 10.8 6.7Z M5.5 14.3a7 7 0 0 1 0-4.6v-3h-4a11.9 11.9 0 0 0 0 10.7l4-3.1Z M12.3 4.8c1.7 0 3.3.6 4.6 1.8L20.3 3A12 12 0 0 0 1.6 6.6l4 3.1c.9-2.8 3.5-5 6.7-5Z"\n        />\n    </svg>\n);\n\nconst GithubIcon = (\n    <svg\n        xmlns="http://www.w3.org/2000/svg"\n        width="24"\n        height="24"\n        viewBox="0 0 24 24"\n    >\n        <path\n            fill="#fff"\n            d="M12 0a12 12 0 0 0-3.8 23.4c.6.1.8-.3.8-.6v-2.2c-3.3.7-4-1.4-4-1.4-.6-1.4-1.4-1.8-1.4-1.8-1-.7.1-.7.1-.7 1.2 0 1.9 1.2 1.9 1.2 1 1.8 2.8 1.3 3.4 1 .2-.8.5-1.3.8-1.6-2.7-.3-5.5-1.3-5.5-6 0-1.2.5-2.3 1.3-3.1-.1-.4-.6-1.6.1-3.2 0 0 1-.3 3.3 1.2a11.5 11.5 0 0 1 6 0C17.3 4.7 18.3 5 18.3 5c.7 1.6.2 2.9.1 3.2.8.8 1.3 1.9 1.3 3.2 0 4.6-2.9 5.6-5.5 5.9.4.4.8 1.1.8 2.2v3.3c0 .3.2.7.8.6A12 12 0 0 0 12 0z"\n        />\n    </svg>\n);\n')),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component can be used like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/login previewHeight=600px",live:!0,url:"http://localhost:3000/login",previewHeight:"600px"},'setInitialRoutes(["/login"]);\nsetRefineProps({ Sider: () => null });\n\n// visible-block-start\nimport { AuthPage, ThemedLayout, RefineThemes } from "@refinedev/chakra-ui";\nimport { Authenticated, Refine } from "@refinedev/core";\nimport routerProvider, {\n    CatchAllNavigate,\n    NavigateToResource,\n} from "@refinedev/react-router-v6";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { ChakraProvider } from "@chakra-ui/react";\n\nimport { BrowserRouter, Outlet, Route, Routes } from "react-router-dom";\n\nimport { authProvider } from "./authProvider";\nimport { DashboardPage } from "./pages/dashboard";\n\nconst App = () => {\n    return (\n        <BrowserRouter>\n            <ChakraProvider theme={RefineThemes.Blue}>\n                <Refine\n                    dataProvider={dataProvider(\n                        "https://api.fake-rest.refine.dev",\n                    )}\n                    routerProvider={routerProvider}\n                    authProvider={authProvider}\n                >\n                    <Routes>\n                        <Route\n                            element={\n                                <Authenticated\n                                    fallback={<CatchAllNavigate to="/login" />}\n                                >\n                                    <ThemedLayout>\n                                        <Outlet />\n                                    </ThemedLayout>\n                                </Authenticated>\n                            }\n                        >\n                            <Route index element={<DashboardPage />} />\n                        </Route>\n                        <Route\n                            element={\n                                <Authenticated fallback={<Outlet />}>\n                                    <NavigateToResource />\n                                </Authenticated>\n                            }\n                        >\n                            {/* highlight-start */}\n                            <Route\n                                path="/login"\n                                element={<AuthPage type="login" />}\n                            />\n                            {/* highlight-end */}\n                        </Route>\n                    </Routes>\n                </Refine>\n            </ChakraProvider>\n        </BrowserRouter>\n    );\n};\n// visible-block-end\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,a.kt)("h2",{id:"types"},"Types"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component has the following types:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#login"},(0,a.kt)("inlineCode",{parentName:"a"},"login"))," - a type of login page and default type."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#register"},(0,a.kt)("inlineCode",{parentName:"a"},"register"))," - a type of registration page."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#forgotpassword"},(0,a.kt)("inlineCode",{parentName:"a"},"forgotPassword"))," - a type of forgot password page."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#updatepassword"},(0,a.kt)("inlineCode",{parentName:"a"},"updatePassword"))," - type of update password page.")),(0,a.kt)("h3",{id:"login"},"Login"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"login")," will be used as the default type of the ",(0,a.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component. The login page will be used to log in to the system."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode url=http://localhost:3000/login previewHeight=600px",live:!0,hideCode:!0,url:"http://localhost:3000/login",previewHeight:"600px"},'setInitialRoutes(["/login"]);\n\n// visible-block-start\nimport { Authenticated, Refine } from "@refinedev/core";\nimport routerProvider, {\n    CatchAllNavigate,\n    NavigateToResource,\n} from "@refinedev/react-router-v6";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { AuthPage, ThemedLayout, RefineThemes } from "@refinedev/chakra-ui";\n\nimport { ChakraProvider } from "@chakra-ui/react";\n\nimport { BrowserRouter, Outlet, Route, Routes } from "react-router-dom";\n\nimport { authProvider } from "./authProvider";\n\nimport { DashboardPage } from "pages/dashboard";\n\nconst App = () => {\n    return (\n        <BrowserRouter>\n            <ChakraProvider theme={RefineThemes.Blue}>\n                <Refine\n                    dataProvider={dataProvider(\n                        "https://api.fake-rest.refine.dev",\n                    )}\n                    routerProvider={routerProvider}\n                    authProvider={authProvider}\n                >\n                    <Routes>\n                        <Route\n                            element={\n                                <Authenticated\n                                    fallback={<CatchAllNavigate to="/login" />}\n                                >\n                                    <ThemedLayout>\n                                        <Outlet />\n                                    </ThemedLayout>\n                                </Authenticated>\n                            }\n                        >\n                            <Route index element={<DashboardPage />} />\n                        </Route>\n                        <Route\n                            element={\n                                <Authenticated fallback={<Outlet />}>\n                                    <NavigateToResource />\n                                </Authenticated>\n                            }\n                        >\n                            {/* highlight-next-line */}\n                            <Route path="/login" element={<AuthPage />} />\n                        </Route>\n                    </Routes>\n                </Refine>\n            </ChakraProvider>\n        </BrowserRouter>\n    );\n};\n// visible-block-end\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,a.kt)("p",null,"After form submission, the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/auth-provider/#login-"},(0,a.kt)("inlineCode",{parentName:"a"},"login"))," method of the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/auth-provider/"},(0,a.kt)("inlineCode",{parentName:"a"},"authProvider"))," will be called with the form values."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import { AuthBindings } from "@refinedev/core";\n\nconst authProvider: AuthBindings = {\n    // --\n    login: async ({ email, password, remember, providerName }) => {\n        // You can handle the login process according to your needs.\n\n        // If the process is successful.\n        return {\n            success: true,\n        };\n\n        return {\n            success: false,\n            error: {\n                name: "Login Error",\n                message: "Invalid email or password",\n            },\n        };\n    },\n    // --\n};\n')),(0,a.kt)("h3",{id:"register"},"Register"),(0,a.kt)("p",null,"The register page will be used to register new users. You can use the following props for the ",(0,a.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component when the type is ",(0,a.kt)("inlineCode",{parentName:"p"},'"register"'),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode url=http://localhost:3000/register previewHeight=600px",live:!0,hideCode:!0,url:"http://localhost:3000/register",previewHeight:"600px"},'setInitialRoutes(["/register"]);\n\n// visible-block-start\nimport { Authenticated, Refine } from "@refinedev/core";\nimport routerProvider, {\n    CatchAllNavigate,\n    NavigateToResource,\n} from "@refinedev/react-router-v6";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { AuthPage, ThemedLayout, RefineThemes } from "@refinedev/chakra-ui";\n\nimport { ChakraProvider } from "@chakra-ui/react";\n\nimport { BrowserRouter, Outlet, Route, Routes } from "react-router-dom";\n\nimport { authProvider } from "./authProvider";\n\nimport { DashboardPage } from "pages/dashboard";\n\nconst App = () => {\n    return (\n        <BrowserRouter>\n            <ChakraProvider theme={RefineThemes.Blue}>\n                <Refine\n                    dataProvider={dataProvider(\n                        "https://api.fake-rest.refine.dev",\n                    )}\n                    routerProvider={routerProvider}\n                    authProvider={authProvider}\n                >\n                    <Routes>\n                        <Route\n                            element={\n                                <Authenticated\n                                    fallback={<CatchAllNavigate to="/login" />}\n                                >\n                                    <ThemedLayout>\n                                        <Outlet />\n                                    </ThemedLayout>\n                                </Authenticated>\n                            }\n                        >\n                            <Route index element={<DashboardPage />} />\n                        </Route>\n                        <Route\n                            element={\n                                <Authenticated fallback={<Outlet />}>\n                                    <NavigateToResource />\n                                </Authenticated>\n                            }\n                        >\n                            <Route path="/login" element={<AuthPage />} />\n                            {/* highlight-next-line */}\n                            <Route\n                                path="/register"\n                                element={<AuthPage type="register" />}\n                            />\n                        </Route>\n                    </Routes>\n                </Refine>\n            </ChakraProvider>\n        </BrowserRouter>\n    );\n};\n// visible-block-end\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,a.kt)("p",null,"After form submission, the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/auth-provider/#register"},(0,a.kt)("inlineCode",{parentName:"a"},"register"))," method of the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/auth-provider/"},(0,a.kt)("inlineCode",{parentName:"a"},"authProvider"))," will be called with the form values."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import { AuthBindings } from "@refinedev/core";\n\nconst authProvider: AuthBindings = {\n    // --\n    register: async ({ email, password, providerName }) => {\n        // You can handle the register process according to your needs.\n\n        // If the process is successful.\n        return {\n            success: true,\n        };\n\n        return {\n            success: false,\n            error: {\n                name: "Register Error",\n                message: "Invalid email or password",\n            },\n        };\n    },\n    // --\n};\n')),(0,a.kt)("h3",{id:"forgotpassword"},"ForgotPassword"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"forgotPassword")," type is a page that allows users to reset their passwords. You can use this page to reset your password."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode url=http://localhost:3000/forgot-password previewHeight=600px",live:!0,hideCode:!0,url:"http://localhost:3000/forgot-password",previewHeight:"600px"},'setInitialRoutes(["/forgot-password"]);\n\n// visible-block-start\nimport { Authenticated, Refine } from "@refinedev/core";\nimport routerProvider, {\n    CatchAllNavigate,\n    NavigateToResource,\n} from "@refinedev/react-router-v6";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { AuthPage, ThemedLayout, RefineThemes } from "@refinedev/chakra-ui";\n\nimport { ChakraProvider } from "@chakra-ui/react";\n\nimport { BrowserRouter, Outlet, Route, Routes } from "react-router-dom";\n\nimport { authProvider } from "./authProvider";\n\nimport { DashboardPage } from "pages/dashboard";\n\nconst App = () => {\n    return (\n        <BrowserRouter>\n            <ChakraProvider theme={RefineThemes.Blue}>\n                <Refine\n                    dataProvider={dataProvider(\n                        "https://api.fake-rest.refine.dev",\n                    )}\n                    routerProvider={routerProvider}\n                    authProvider={authProvider}\n                >\n                    <Routes>\n                        <Route\n                            element={\n                                <Authenticated\n                                    fallback={<CatchAllNavigate to="/login" />}\n                                >\n                                    <ThemedLayout>\n                                        <Outlet />\n                                    </ThemedLayout>\n                                </Authenticated>\n                            }\n                        >\n                            <Route index element={<DashboardPage />} />\n                        </Route>\n                        <Route\n                            element={\n                                <Authenticated fallback={<Outlet />}>\n                                    <NavigateToResource />\n                                </Authenticated>\n                            }\n                        >\n                            <Route path="/login" element={<AuthPage />} />\n                            <Route\n                                path="/register"\n                                element={<AuthPage type="register" />}\n                            />\n                            {/* highlight-next-line */}\n                            <Route\n                                path="/forgot-password"\n                                element={<AuthPage type="forgotPassword" />}\n                            />\n                        </Route>\n                    </Routes>\n                </Refine>\n            </ChakraProvider>\n        </BrowserRouter>\n    );\n};\n// visible-block-end\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,a.kt)("p",null,"After form submission, the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/auth-provider/#forgotpassword"},(0,a.kt)("inlineCode",{parentName:"a"},"forgotPassword"))," method of the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/auth-provider/"},(0,a.kt)("inlineCode",{parentName:"a"},"authProvider"))," will be called with the form values."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import { AuthBindings } from "@refinedev/core";\n\nconst authProvider: AuthBindings = {\n    // --\n    forgotPassword: async ({ email }) => {\n        // You can handle the reset password process according to your needs.\n\n        // If process is successful.\n        return {\n            success: true,\n        };\n\n        return {\n            success: false,\n            error: {\n                name: "Forgot Password Error",\n                message: "Invalid email or password",\n            },\n        };\n    },\n    // --\n};\n')),(0,a.kt)("h3",{id:"updatepassword"},"UpdatePassword"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"updatePassword")," type is the page used to update the password of the user."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode url=http://localhost:3000/update-password previewHeight=600px",live:!0,hideCode:!0,url:"http://localhost:3000/update-password",previewHeight:"600px"},'setInitialRoutes(["/update-password"]);\n\n// visible-block-start\nimport { Authenticated, Refine } from "@refinedev/core";\nimport routerProvider, {\n    CatchAllNavigate,\n    NavigateToResource,\n} from "@refinedev/react-router-v6";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { AuthPage, ThemedLayout, RefineThemes } from "@refinedev/chakra-ui";\n\nimport { ChakraProvider } from "@chakra-ui/react";\n\nimport { BrowserRouter, Outlet, Route, Routes } from "react-router-dom";\n\nimport { authProvider } from "./authProvider";\n\nimport { DashboardPage } from "pages/dashboard";\n\nconst App = () => {\n    return (\n        <BrowserRouter>\n            <ChakraProvider theme={RefineThemes.Blue}>\n                <Refine\n                    dataProvider={dataProvider(\n                        "https://api.fake-rest.refine.dev",\n                    )}\n                    routerProvider={routerProvider}\n                    authProvider={authProvider}\n                >\n                    <Routes>\n                        <Route\n                            element={\n                                <Authenticated\n                                    fallback={<CatchAllNavigate to="/login" />}\n                                >\n                                    <ThemedLayout>\n                                        <Outlet />\n                                    </ThemedLayout>\n                                </Authenticated>\n                            }\n                        >\n                            <Route index element={<DashboardPage />} />\n                        </Route>\n                        <Route\n                            element={\n                                <Authenticated fallback={<Outlet />}>\n                                    <NavigateToResource />\n                                </Authenticated>\n                            }\n                        >\n                            <Route path="/login" element={<AuthPage />} />\n                            <Route\n                                path="/register"\n                                element={<AuthPage type="register" />}\n                            />\n                            <Route\n                                path="/forgot-password"\n                                element={<AuthPage type="forgotPassword" />}\n                            />\n                            {/* highlight-next-line */}\n                            <Route\n                                path="/update-password"\n                                element={<AuthPage type="updatePassword" />}\n                            />\n                        </Route>\n                    </Routes>\n                </Refine>\n            </ChakraProvider>\n        </BrowserRouter>\n    );\n};\n// visible-block-end\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,a.kt)("p",null,"After form submission, the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/auth-provider/#updatepassword"},(0,a.kt)("inlineCode",{parentName:"a"},"updatePassword"))," method of the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/auth-provider/"},(0,a.kt)("inlineCode",{parentName:"a"},"authProvider"))," will be called with the form values."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import { AuthBindings } from "@refinedev/core";\n\nconst authProvider: AuthBindings = {\n    // --\n    updatePassword: async ({ password, confirmPassword }) => {\n        // You can handle the update password process according to your needs.\n\n        // If the process is successful.\n        return {\n            success: true,\n        };\n\n        return {\n            success: false,\n            error: {\n                name: "Update Password Error",\n                message: "Invalid email or password",\n            },\n        };\n    },\n    // --\n};\n')),(0,a.kt)("h2",{id:"props"},"Props"),(0,a.kt)("h3",{id:"providers"},(0,a.kt)("inlineCode",{parentName:"h3"},"providers")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"providers")," property is only available for types ",(0,a.kt)("inlineCode",{parentName:"p"},"login")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"register"),".")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"providers")," property defines the list of providers used to handle login authentication. ",(0,a.kt)("inlineCode",{parentName:"p"},"providers")," accepts an array of ",(0,a.kt)("inlineCode",{parentName:"p"},"Provider")," type. Check out the ",(0,a.kt)("a",{parentName:"p",href:"#interface"},"Interface")," section for more information."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const MyLoginPage = () => {\n    return (\n        <AuthPage\n            providers={[\n                {\n                    name: "google",\n                    icon: GoogleIcon,\n                    label: "Sign in with Google",\n                },\n                {\n                    name: "github",\n                    icon: GithubIcon,\n                    label: "Sign in with GitHub",\n                },\n            ]}\n        />\n    );\n};\n')),(0,a.kt)("h3",{id:"rememberme"},(0,a.kt)("inlineCode",{parentName:"h3"},"rememberMe")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"rememberMe")," property is only available for type ",(0,a.kt)("inlineCode",{parentName:"p"},"login"),".")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"rememberMe")," property defines to render your own remember me component or you can pass ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," to don't render it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const MyLoginPage = () => {\n    return <AuthPage rememberMe={<Checkbox>Remember Me</Checkbox>} />;\n};\n")),(0,a.kt)("h3",{id:"loginlink"},(0,a.kt)("inlineCode",{parentName:"h3"},"loginLink")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"loginLink")," property is only available for types ",(0,a.kt)("inlineCode",{parentName:"p"},"register")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"forgotPassword"),".")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"loginLink")," property defines the link to the login page and also you can give a node to render. Default value is ",(0,a.kt)("inlineCode",{parentName:"p"},'"/login"'),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const MyRegisterPage = () => {\n    return (\n        <AuthPage\n            type="register"\n            // highlight-start\n            loginLink={\n                <Box mb="3" bg="gray.200">\n                    <Link to="/login">Login</Link>\n                </Box>\n            }\n            // highlight-end\n        />\n    );\n};\n')),(0,a.kt)("h3",{id:"registerlink"},(0,a.kt)("inlineCode",{parentName:"h3"},"registerLink")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"registerLink")," property is only available for type ",(0,a.kt)("inlineCode",{parentName:"p"},"login"),".")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"registerLink")," property defines the link to the registration page and also you can give a node to render. Default value is ",(0,a.kt)("inlineCode",{parentName:"p"},'"/register"'),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const MyLoginPage = () => {\n    return (\n        <AuthPage\n            type="login"\n            // highlight-start\n            registerLink={\n                <Box mb="3" bg="gray.200">\n                    <Link to="/register">Register</Link>\n                </Box>\n            }\n            // highlight-end\n        />\n    );\n};\n')),(0,a.kt)("h3",{id:"forgotpasswordlink"},(0,a.kt)("inlineCode",{parentName:"h3"},"forgotPasswordLink")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"forgotPasswordLink")," property is only available for type ",(0,a.kt)("inlineCode",{parentName:"p"},"login"),".")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"forgotPasswordLink")," property defines the link to the forgot password page and also you can give a node to render. Default value is ",(0,a.kt)("inlineCode",{parentName:"p"},'"/forgot-password"'),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const MyLoginPage = () => {\n    return (\n        <AuthPage\n            type="login"\n            // highlight-start\n            forgotPasswordLink={\n                <Box mb="3" bg="gray.200">\n                    <Link to="/register">Forgot Password</Link>\n                </Box>\n            }\n            // highlight-end\n        />\n    );\n};\n')),(0,a.kt)("h3",{id:"wrapperprops"},(0,a.kt)("inlineCode",{parentName:"h3"},"wrapperProps")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"wrapperProps")," uses for passing props to the wrapper component. In the example below you can see that the background color is changed with ",(0,a.kt)("inlineCode",{parentName:"p"},"wrapperProps")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const MyLoginPage = () => {\n    return (\n        <AuthPage\n            // highlight-start\n            wrapperProps={{\n                bg: "tomato",\n            }}\n            // highlight-end\n        />\n    );\n};\n')),(0,a.kt)("h3",{id:"contentprops"},(0,a.kt)("inlineCode",{parentName:"h3"},"contentProps")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"contentProps")," uses for passing props to the content component which is the card component. In the example below you can see that the title, header and content styles are changed with ",(0,a.kt)("inlineCode",{parentName:"p"},"contentProps"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const MyLoginPage = () => {\n    return (\n        <AuthPage\n            // highlight-start\n            contentProps={{\n                bg: "tomato",\n            }}\n            // highlight-end\n        />\n    );\n};\n')),(0,a.kt)("h3",{id:"formprops"},(0,a.kt)("inlineCode",{parentName:"h3"},"formProps")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"formProps")," uses for passing props to the form component. In the example below you can see that the ",(0,a.kt)("inlineCode",{parentName:"p"},"initialValues")," are changed with ",(0,a.kt)("inlineCode",{parentName:"p"},"formProps")," and also the ",(0,a.kt)("inlineCode",{parentName:"p"},"onSubmit")," function is changed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const MyLoginPage = () => {\n    return (\n        <AuthPage\n            // highlight-start\n            formProps={{\n                defaultValues: {\n                    email: "test@mail.com",\n                },\n                onSubmit: (e: any) => {\n                    e.preventDefault();\n                    console.log("e", e.target.email.value);\n\n                    const email = e.target.email.value;\n                    const password = e.target.password.value;\n\n                    alert(\n                        JSON.stringify({\n                            email,\n                            password,\n                        }),\n                    );\n                },\n            }}\n            // highlight-end\n        />\n    );\n};\n')),(0,a.kt)("h3",{id:"title"},(0,a.kt)("inlineCode",{parentName:"h3"},"title")),(0,a.kt)("p",null,"By default, ",(0,a.kt)("inlineCode",{parentName:"p"},"AuthPage")," uses text with icon on top of page. You can use this property to change the default title."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Default text is: refine Project"),(0,a.kt)("li",{parentName:"ul"},"Default icon is: refine Logo")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { AuthPage } from "@refinedev/chakra-ui";\n\nconst MyLoginPage = () => {\n    return <AuthPage type="login" title={<h1>My Title</h1>} />;\n};\n')),(0,a.kt)("p",null,"Or you can customize the title with ",(0,a.kt)("inlineCode",{parentName:"p"},"ThemedTitle")," component."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { AuthPage, ThemedTitle } from "@refinedev/chakra-ui";\n\nconst MyLoginPage = () => {\n    return (\n        <AuthPage\n            type="login"\n            title={\n                <ThemedTitle\n                    title="My Title"\n                    icon={<img src="https://refine.dev/img/logo.png" />}\n                />\n            }\n        />\n    );\n};\n')),(0,a.kt)("h3",{id:"rendercontent"},(0,a.kt)("inlineCode",{parentName:"h3"},"renderContent")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"renderContent")," uses to render the form content and ",(0,a.kt)("a",{parentName:"p",href:"#title"},"title"),". You can use this property to render your own content or ",(0,a.kt)("inlineCode",{parentName:"p"},"renderContent")," gives you default content and title you can use to add some extra elements to the content."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Box, Heading } from "@chakra-ui/react";\nimport { AuthPage } from "@refinedev/chakra-ui";\n\nconst MyLoginPage = () => {\n    return (\n        <AuthPage\n            contentProps={{\n                style: {\n                    width: "400px",\n                },\n            }}\n            renderContent={(\n                content: React.ReactNode,\n                title: React.ReactNode,\n            ) => {\n                return (\n                    <Box\n                        bg="white"\n                        borderRadius="md"\n                        px="5"\n                        display="flex"\n                        flexDirection="column"\n                        justifyContent="center"\n                        alignItems="center"\n                    >\n                        <Heading color="white">Extra Header</Heading>\n                        {content}\n                        <Heading color="white">Extra Footer</Heading>\n                    </Box>\n                );\n            }}\n        />\n    );\n};\n')),(0,a.kt)("h2",{id:"api-reference"},"API Reference"),(0,a.kt)("h3",{id:"properties"},"Properties"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"type"),(0,a.kt)("td",{parentName:"tr",align:null},"Render ",(0,a.kt)("inlineCode",{parentName:"td"},"<AuthPage>")," forms by ",(0,a.kt)("inlineCode",{parentName:"td"},"type")," property."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"login")," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},"register")," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},"forgotPassword")," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},"updatePassword"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"providers"),(0,a.kt)("td",{parentName:"tr",align:null},"Render auth logins if ",(0,a.kt)("inlineCode",{parentName:"td"},"type")," is ",(0,a.kt)("inlineCode",{parentName:"td"},'"login"'),"."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#interface"},(0,a.kt)("inlineCode",{parentName:"a"},"IProvider[]")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"registerLink"),(0,a.kt)("td",{parentName:"tr",align:null},"A custom node that will be rendered as a register link to the ",(0,a.kt)("inlineCode",{parentName:"td"},"<AuthPage>"),"."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"React.ReactNode"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"loginLink"),(0,a.kt)("td",{parentName:"tr",align:null},"A custom node that will be rendered as a link to the ",(0,a.kt)("inlineCode",{parentName:"td"},"<AuthPage>"),"."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"React.ReactNode"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"forgotPasswordLink"),(0,a.kt)("td",{parentName:"tr",align:null},"A custom node that will be rendered as a forgot password link to the ",(0,a.kt)("inlineCode",{parentName:"td"},"<AuthPage>"),"."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"React.ReactNode"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"wrapperProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Wrapper element props."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://chakra-ui.com/docs/components/box/props"},(0,a.kt)("inlineCode",{parentName:"a"},"BoxProps")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"contentProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Content wrapper element props."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://chakra-ui.com/docs/components/box/props"},(0,a.kt)("inlineCode",{parentName:"a"},"BoxProps")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"formProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Props for the form component."),(0,a.kt)("td",{parentName:"tr",align:null},"[",(0,a.kt)("inlineCode",{parentName:"td"},"FormPropsType"),"]")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"renderContent"),(0,a.kt)("td",{parentName:"tr",align:null},"Gives you default content you can use it to add some extra elements to the content."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"function(content: React.ReactNode) => React.ReactNode"))))),(0,a.kt)("h3",{id:"interface"},"Interface"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"interface OAuthProvider {\n    name: string;\n    icon?: React.ReactNode;\n    label?: string;\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { UseFormProps } from "@refinedev/react-hook-form";\n\ninterface FormPropsType extends UseFormProps {\n    onSubmit?: (values: any) => void;\n}\n')))}c.isMDXComponent=!0}}]);