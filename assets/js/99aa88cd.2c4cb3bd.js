"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[12823],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,d=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=p(n),c=o,k=m["".concat(d,".").concat(c)]||m[c]||u[c]||r;return n?a.createElement(k,l(l({ref:t},s),{},{components:n})):a.createElement(k,l({ref:t},s))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=c;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[m]="string"==typeof e?e:o,l[1]=i;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9158:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>N,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const r={id:"useModalForm",title:"useModalForm"},l=void 0,i={unversionedId:"api-reference/antd/hooks/form/useModalForm",id:"version-3.xx.xx/api-reference/antd/hooks/form/useModalForm",title:"useModalForm",description:"useModalForm hook allows you to manage a form within a `. It returns Ant Design ` and Modal components props.",source:"@site/versioned_docs/version-3.xx.xx/api-reference/antd/hooks/form/useModalForm.md",sourceDirName:"api-reference/antd/hooks/form",slug:"/api-reference/antd/hooks/form/useModalForm",permalink:"/docs/3.xx.xx/api-reference/antd/hooks/form/useModalForm",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/versioned_docs/version-3.xx.xx/api-reference/antd/hooks/form/useModalForm.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{id:"useModalForm",title:"useModalForm"},sidebar:"someSidebar",previous:{title:"useForm",permalink:"/docs/3.xx.xx/api-reference/antd/hooks/form/useForm"},next:{title:"useStepsForm",permalink:"/docs/3.xx.xx/api-reference/antd/hooks/form/useStepsForm"}},d={},p=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>defaultFormValues</code>",id:"defaultformvalues",level:3},{value:"<code>defaultVisible</code>",id:"defaultvisible",level:3},{value:"<code>autoSubmitClose</code>",id:"autosubmitclose",level:3},{value:"<code>autoResetForm</code>",id:"autoresetform",level:3},{value:"<code>warnWhenUnsavedChanges</code>",id:"warnwhenunsavedchanges",level:3},{value:"Return Values",id:"return-values",level:2},{value:"<code>formProps</code>",id:"formprops",level:3},{value:"<code>modalProps</code>",id:"modalprops",level:3},{value:"<code>title</code>",id:"title",level:4},{value:"<code>okText</code>",id:"oktext",level:4},{value:"<code>cancelText</code>",id:"canceltext",level:4},{value:"<code>width</code>",id:"width",level:4},{value:"<code>forceRender</code>",id:"forcerender",level:4},{value:"<code>okButtonProps</code>",id:"okbuttonprops",level:4},{value:"<code>onOk</code>",id:"onok",level:4},{value:"<code>onCancel</code>",id:"oncancel",level:4},{value:"<code>visible</code>",id:"visible",level:4},{value:"<code>open</code>",id:"open",level:3},{value:"<code>close</code>",id:"close",level:3},{value:"<code>submit</code>",id:"submit",level:3},{value:"<code>show</code>",id:"show",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Example",id:"example",level:2}],s=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},m=s("Tabs"),u=s("TabItem"),c=s("PropsTable"),k=s("CodeSandboxExample"),h={toc:p},f="wrapper";function N(e){let{components:t,...n}=e;return(0,o.kt)(f,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"useModalForm")," hook allows you to manage a form within a ",(0,o.kt)("a",{parentName:"p",href:"https://ant.design/components/modal/"},(0,o.kt)("inlineCode",{parentName:"a"},"<Modal>")),". It returns Ant Design ",(0,o.kt)("a",{parentName:"p",href:"https://ant.design/components/form/"},(0,o.kt)("inlineCode",{parentName:"a"},"<Form>"))," and ",(0,o.kt)("a",{parentName:"p",href:"https://ant.design/components/modal/"},"Modal")," components props."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"useModalForm")," hook is extended from ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm"},(0,o.kt)("inlineCode",{parentName:"a"},"useForm"))," from the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/master/packages/antd"},(0,o.kt)("inlineCode",{parentName:"a"},"@pankod/refine-antd"))," package. This means that you can use all the features of ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm"},(0,o.kt)("inlineCode",{parentName:"a"},"useForm"))," hook.")),(0,o.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,o.kt)("p",null,"We'll show three examples, ",(0,o.kt)("inlineCode",{parentName:"p"},'"create"'),", ",(0,o.kt)("inlineCode",{parentName:"p"},'"edit"')," and ",(0,o.kt)("inlineCode",{parentName:"p"},'"clone"'),". Let's see how ",(0,o.kt)("inlineCode",{parentName:"p"},"useModalForm")," is used in all."),(0,o.kt)(m,{defaultValue:"create",values:[{label:"create",value:"create"},{label:"edit",value:"edit"},{label:"clone",value:"clone"}],mdxType:"Tabs"},(0,o.kt)(u,{value:"create",mdxType:"TabItem"},(0,o.kt)("p",null,"In this example, we will show you how to create a record with ",(0,o.kt)("inlineCode",{parentName:"p"},"useModalForm"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts",live:!0,url:"http://localhost:3000/posts"},"setInitialRoutes(['/posts'])\n\n// visible-block-start\n\nimport React from 'react'\nimport { IResourceComponentsProps } from '@pankod/refine-core'\n\nimport {\n  List,\n  Table,\n  Form,\n  Select,\n  Input,\n  Modal,\n  Space,\n  EditButton,\n  useTable,\n  useModalForm,\n} from '@pankod/refine-antd'\n\nconst PostList: React.FC<IResourceComponentsProps> = () => {\n  const { tableProps } = useTable<IPost>()\n\n  // highlight-start\n  const {\n    modalProps: createModalProps,\n    formProps: createFormProps,\n    show: createModalShow,\n  } = useModalForm<IPost>({\n    action: 'create',\n  })\n  // highlight-end\n\n  return (\n    <>\n      <List\n        // createButtonProps allows us to create and manage a button above the table.\n        // This code block makes <Modal> appear when you click the button.\n        createButtonProps={{\n          // highlight-start\n          onClick: () => {\n            createModalShow()\n          },\n          // highlight-end\n        }}\n      >\n        <Table {...tableProps} rowKey=\"id\">\n          <Table.Column dataIndex=\"id\" title=\"ID\" />\n          <Table.Column dataIndex=\"title\" title=\"Title\" />\n          <Table.Column dataIndex=\"status\" title=\"Status\" />\n        </Table>\n      </List>\n      {/* highlight-start */}\n      <Modal {...createModalProps}>\n        <Form {...createFormProps} layout=\"vertical\">\n          <Form.Item\n            label=\"Title\"\n            name=\"title\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            label=\"Status\"\n            name=\"status\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select\n              options={[\n                {\n                  label: 'Published',\n                  value: 'published',\n                },\n                {\n                  label: 'Draft',\n                  value: 'draft',\n                },\n                {\n                  label: 'Rejected',\n                  value: 'rejected',\n                },\n              ]}\n            />\n          </Form.Item>\n        </Form>\n      </Modal>\n      {/* highlight-end */}\n    </>\n  )\n}\n\ninterface IPost {\n  id: number\n  title: string\n  status: 'published' | 'draft' | 'rejected'\n}\n// visible-block-end\n\nsetRefineProps({\n  resources: [\n    {\n      name: 'posts',\n      list: PostList,\n    },\n  ],\n})\n\nrender(<RefineAntdDemo />)\n"))),(0,o.kt)(u,{value:"edit",mdxType:"TabItem"},(0,o.kt)("p",null,"Let's learn how to add editing capabilities to records that will be opening form in Modal by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"action")," prop."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts",live:!0,url:"http://localhost:3000/posts"},'setInitialRoutes([\'/posts\'])\n\nimport React from \'react\'\nimport { IResourceComponentsProps } from \'@pankod/refine-core\'\n\nimport {\n  List,\n  Table,\n  Form,\n  Select,\n  Input,\n  Modal,\n  Space,\n  EditButton,\n  useTable,\n  useModalForm,\n} from \'@pankod/refine-antd\'\n\nconst PostList: React.FC<IResourceComponentsProps> = () => {\n  const { tableProps } = useTable<IPost>()\n\n  // highlight-start\n  const {\n    modalProps: editModalProps,\n    formProps: editFormProps,\n    show: editModalShow,\n  } = useModalForm<IPost>({\n    action: \'edit\',\n    warnWhenUnsavedChanges: true,\n  })\n  // highlight-end\n\n  return (\n    <>\n      <List>\n        <Table {...tableProps} rowKey="id">\n          <Table.Column dataIndex="id" title="ID" />\n          <Table.Column dataIndex="title" title="Title" />\n          <Table.Column dataIndex="status" title="Status" />\n          <Table.Column<IPost>\n            title="Actions"\n            dataIndex="actions"\n            key="actions"\n            render={(_, record) => (\n              <Space>\n                {/* highlight-start */}\n                <EditButton\n                  hideText\n                  size="small"\n                  recordItemId={record.id}\n                  onClick={() => editModalShow(record.id)}\n                />\n                {/* highlight-end */}\n              </Space>\n            )}\n          />\n        </Table>\n      </List>\n      {/* highlight-start */}\n      <Modal {...editModalProps}>\n        <Form {...editFormProps} layout="vertical">\n          <Form.Item\n            label="Title"\n            name="title"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            label="Status"\n            name="status"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select\n              options={[\n                {\n                  label: \'Published\',\n                  value: \'published\',\n                },\n                {\n                  label: \'Draft\',\n                  value: \'draft\',\n                },\n                {\n                  label: \'Rejected\',\n                  value: \'rejected\',\n                },\n              ]}\n            />\n          </Form.Item>\n        </Form>\n      </Modal>\n      {/* highlight-end */}\n    </>\n  )\n}\n\ninterface IPost {\n  id: number\n  title: string\n  status: \'published\' | \'draft\' | \'rejected\'\n}\n// visible-block-end\n\nsetRefineProps({\n  resources: [\n    {\n      name: \'posts\',\n      list: PostList,\n    },\n  ],\n})\n\nrender(<RefineAntdDemo />)\n')),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"refine")," doesn't automatically add a ",(0,o.kt)("inlineCode",{parentName:"p"},"<EditButton/>")," to the each record in ",(0,o.kt)("inlineCode",{parentName:"p"},"<PostList>")," which opens edit form in ",(0,o.kt)("inlineCode",{parentName:"p"},"<Modal>")," when clicked."),(0,o.kt)("p",{parentName:"admonition"},"So, we have to put the ",(0,o.kt)("inlineCode",{parentName:"p"},"<EditButton/>")," on our list. In that way, ",(0,o.kt)("inlineCode",{parentName:"p"},"<Edit>")," form in ",(0,o.kt)("inlineCode",{parentName:"p"},"<Modal>")," can fetch data by the record ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<Table.Column<IPost>\n  title="Actions"\n  dataIndex="actions"\n  key="actions"\n  render={(_value, record) => <EditButton onClick={() => show(record.id)} />}\n/>\n'))),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Don't forget to pass the record ",(0,o.kt)("inlineCode",{parentName:"p"},'"id"')," to ",(0,o.kt)("inlineCode",{parentName:"p"},"show")," to fetch the record data. This is necessary for both ",(0,o.kt)("inlineCode",{parentName:"p"},'"edit"')," and ",(0,o.kt)("inlineCode",{parentName:"p"},'"clone"')," forms."))),(0,o.kt)(u,{value:"clone",mdxType:"TabItem"},(0,o.kt)("p",null,"Let's learn how to add cloning capabilities to records that will be opening form in Modal by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"action")," prop."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts",live:!0,url:"http://localhost:3000/posts"},'setInitialRoutes([\'/posts\'])\n\nimport React from \'react\'\nimport { IResourceComponentsProps } from \'@pankod/refine-core\'\n\nimport {\n  List,\n  Table,\n  Form,\n  Select,\n  Input,\n  Modal,\n  Space,\n  CloneButton,\n  useTable,\n  useModalForm,\n} from \'@pankod/refine-antd\'\n\nconst PostList: React.FC<IResourceComponentsProps> = () => {\n  const { tableProps } = useTable<IPost>()\n\n  // highlight-start\n  const {\n    modalProps: cloneModalProps,\n    formProps: cloneFormProps,\n    show: cloneModalShow,\n  } = useModalForm<IPost>({\n    action: \'clone\',\n  })\n  // highlight-end\n\n  return (\n    <>\n      <List>\n        <Table {...tableProps} rowKey="id">\n          <Table.Column dataIndex="id" title="ID" />\n          <Table.Column dataIndex="title" title="Title" />\n          <Table.Column dataIndex="status" title="Status" />\n          <Table.Column<IPost>\n            title="Actions"\n            dataIndex="actions"\n            key="actions"\n            render={(_, record) => (\n              <Space>\n                {/* highlight-start */}\n                <CloneButton\n                  hideText\n                  size="small"\n                  recordItemId={record.id}\n                  onClick={() => cloneModalShow(record.id)}\n                />\n                {/* highlight-end */}\n              </Space>\n            )}\n          />\n        </Table>\n      </List>\n      {/* highlight-start */}\n      <Modal {...cloneModalProps}>\n        <Form {...cloneFormProps} layout="vertical">\n          <Form.Item\n            label="Title"\n            name="title"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            label="Status"\n            name="status"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select\n              options={[\n                {\n                  label: \'Published\',\n                  value: \'published\',\n                },\n                {\n                  label: \'Draft\',\n                  value: \'draft\',\n                },\n                {\n                  label: \'Rejected\',\n                  value: \'rejected\',\n                },\n              ]}\n            />\n          </Form.Item>\n        </Form>\n      </Modal>\n      {/* highlight-end */}\n    </>\n  )\n}\n\ninterface IPost {\n  id: number\n  title: string\n  status: \'published\' | \'draft\' | \'rejected\'\n}\n// visible-block-end\n\nsetRefineProps({\n  resources: [\n    {\n      name: \'posts\',\n      list: PostList,\n    },\n  ],\n})\n\nrender(<RefineAntdDemo />)\n')),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"refine")," doesn't automatically add a ",(0,o.kt)("inlineCode",{parentName:"p"},"<CloneButton/>")," to the each record in ",(0,o.kt)("inlineCode",{parentName:"p"},"<PostList>")," which opens clone form in ",(0,o.kt)("inlineCode",{parentName:"p"},"<Modal>")," when clicked."),(0,o.kt)("p",{parentName:"admonition"},"So, we have to put the ",(0,o.kt)("inlineCode",{parentName:"p"},"<CloneButton/>")," on our list. In that way, ",(0,o.kt)("inlineCode",{parentName:"p"},"<Clone>")," form in ",(0,o.kt)("inlineCode",{parentName:"p"},"<Modal>")," can fetch data by the record ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<Table.Column<IPost>\n  title="Actions"\n  dataIndex="actions"\n  key="actions"\n  render={(_value, record) => <CloneButton onClick={() => show(record.id)} />}\n/>\n'))),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Don't forget to pass the record id to ",(0,o.kt)("inlineCode",{parentName:"p"},"show")," to fetch the record data. This is necessary for both ",(0,o.kt)("inlineCode",{parentName:"p"},'"edit"')," and ",(0,o.kt)("inlineCode",{parentName:"p"},'"clone"')," forms.")))),(0,o.kt)("h2",{id:"properties"},"Properties"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"All ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm"},(0,o.kt)("inlineCode",{parentName:"a"},"useForm"))," props also available in ",(0,o.kt)("inlineCode",{parentName:"p"},"useModalForm"),". You can find descriptions on ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm/#properties"},(0,o.kt)("inlineCode",{parentName:"a"},"useForm"))," docs.")),(0,o.kt)("h3",{id:"defaultformvalues"},(0,o.kt)("inlineCode",{parentName:"h3"},"defaultFormValues")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Only available in ",(0,o.kt)("inlineCode",{parentName:"p"},'"create"')," form.")),(0,o.kt)("p",null,"Default values for the form. Use this to pre-populate the form with data that needs to be displayed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n  defaultFormValues: {\n    title: 'Hello World',\n  },\n})\n")),(0,o.kt)("h3",{id:"defaultvisible"},(0,o.kt)("inlineCode",{parentName:"h3"},"defaultVisible")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Default: ",(0,o.kt)("inlineCode",{parentName:"p"},"false"))),(0,o.kt)("p",null,"When ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", modal will be visible by default."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n  defaultVisible: true,\n})\n")),(0,o.kt)("h3",{id:"autosubmitclose"},(0,o.kt)("inlineCode",{parentName:"h3"},"autoSubmitClose")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Default: ",(0,o.kt)("inlineCode",{parentName:"p"},"true"))),(0,o.kt)("p",null,"When ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", modal will be closed after successful submit."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n  autoSubmitClose: false,\n})\n")),(0,o.kt)("h3",{id:"autoresetform"},(0,o.kt)("inlineCode",{parentName:"h3"},"autoResetForm")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Default: ",(0,o.kt)("inlineCode",{parentName:"p"},"true"))),(0,o.kt)("p",null,"When ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", form will be reset after successful submit."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n  autoResetForm: false,\n})\n")),(0,o.kt)("h3",{id:"warnwhenunsavedchanges"},(0,o.kt)("inlineCode",{parentName:"h3"},"warnWhenUnsavedChanges")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Default: ",(0,o.kt)("inlineCode",{parentName:"p"},"false"))),(0,o.kt)("p",null,"When you have unsaved changes and try to leave the current page, refine shows a confirmation modal box. To activate this feature."),(0,o.kt)("p",null,"You can also set this value in ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/components/refine-config/#warnwhenunsavedchanges"},(0,o.kt)("inlineCode",{parentName:"a"},"<Refine>"))," component."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n  warnWhenUnsavedChanges: true,\n})\n")),(0,o.kt)("h2",{id:"return-values"},"Return Values"),(0,o.kt)("h3",{id:"formprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"formProps")),(0,o.kt)("p",null,"It's required to manage ",(0,o.kt)("inlineCode",{parentName:"p"},"<Form>")," state and actions. Under the hood the ",(0,o.kt)("inlineCode",{parentName:"p"},"formProps")," came from ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm"},(0,o.kt)("inlineCode",{parentName:"a"},"useForm")),"."),(0,o.kt)("p",null,"It contains the props to manage the ",(0,o.kt)("a",{parentName:"p",href:"https://ant.design/components/form#api"},"Antd ",(0,o.kt)("inlineCode",{parentName:"a"},"<Form>"))," component such as ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm/#return-values"},(0,o.kt)("em",{parentName:"a"},(0,o.kt)("inlineCode",{parentName:"em"},"onValuesChange"),", ",(0,o.kt)("inlineCode",{parentName:"em"},"initialValues"),", ",(0,o.kt)("inlineCode",{parentName:"em"},"onFieldsChange"),", ",(0,o.kt)("inlineCode",{parentName:"em"},"onFinish")," etc."))),(0,o.kt)("h3",{id:"modalprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"modalProps")),(0,o.kt)("p",null,"The props needed by the ",(0,o.kt)("a",{parentName:"p",href:"https://ant.design/components/modal/"},(0,o.kt)("inlineCode",{parentName:"a"},"<Modal>"))," component."),(0,o.kt)("h4",{id:"title"},(0,o.kt)("inlineCode",{parentName:"h4"},"title")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Default when url is ",(0,o.kt)("inlineCode",{parentName:"p"},'"/posts/create"'),': "Create Post"')),(0,o.kt)("p",null,"Title of the modal. Value is based on resource and action values."),(0,o.kt)("h4",{id:"oktext"},(0,o.kt)("inlineCode",{parentName:"h4"},"okText")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Default: ",(0,o.kt)("inlineCode",{parentName:"p"},'"Save"'))),(0,o.kt)("p",null,"Text of the ",(0,o.kt)("inlineCode",{parentName:"p"},'"submit"')," button within the modal."),(0,o.kt)("h4",{id:"canceltext"},(0,o.kt)("inlineCode",{parentName:"h4"},"cancelText")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Default: ",(0,o.kt)("inlineCode",{parentName:"p"},'"Cancel"'))),(0,o.kt)("p",null,"Text of the ",(0,o.kt)("inlineCode",{parentName:"p"},'"cancel"')," button within the modal."),(0,o.kt)("h4",{id:"width"},(0,o.kt)("inlineCode",{parentName:"h4"},"width")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Default: ",(0,o.kt)("inlineCode",{parentName:"p"},"1000px"))),(0,o.kt)("p",null,"Width of the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Modal>")),(0,o.kt)("h4",{id:"forcerender"},(0,o.kt)("inlineCode",{parentName:"h4"},"forceRender")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Default: ",(0,o.kt)("inlineCode",{parentName:"p"},"true"))),(0,o.kt)("p",null,"It renders ",(0,o.kt)("inlineCode",{parentName:"p"},"<Modal>")," instead of lazy rendering it."),(0,o.kt)("h4",{id:"okbuttonprops"},(0,o.kt)("inlineCode",{parentName:"h4"},"okButtonProps")),(0,o.kt)("p",null,"It contains all the props needed by the ",(0,o.kt)("inlineCode",{parentName:"p"},'"submit"')," button within the modal (disabled,loading etc.). When ",(0,o.kt)("inlineCode",{parentName:"p"},"okButtonProps.onClick")," is called, it triggers ",(0,o.kt)("inlineCode",{parentName:"p"},"form.submit()"),". You can manually pass these props to your custom button."),(0,o.kt)("h4",{id:"onok"},(0,o.kt)("inlineCode",{parentName:"h4"},"onOk")),(0,o.kt)("p",null,"A function that can submit the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Form>")," inside ",(0,o.kt)("inlineCode",{parentName:"p"},"<Modal>"),". It's useful when you want to submit the form manually."),(0,o.kt)("h4",{id:"oncancel"},(0,o.kt)("inlineCode",{parentName:"h4"},"onCancel")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Same as ",(0,o.kt)("inlineCode",{parentName:"p"},"close"))),(0,o.kt)("p",null,"A function that can close the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Modal>"),". It's useful when you want to close the modal manually."),(0,o.kt)("h4",{id:"visible"},(0,o.kt)("inlineCode",{parentName:"h4"},"visible")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"@deprecated. Please use ",(0,o.kt)("inlineCode",{parentName:"p"},"open")," instead.")),(0,o.kt)("p",null,"Current visible state of ",(0,o.kt)("inlineCode",{parentName:"p"},"<Modal>"),". Default value depends on ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultVisible")," prop."),(0,o.kt)("h3",{id:"open"},(0,o.kt)("inlineCode",{parentName:"h3"},"open")),(0,o.kt)("p",null,"Current visible state of ",(0,o.kt)("inlineCode",{parentName:"p"},"<Modal>"),". Default value depends on ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultVisible")," prop."),(0,o.kt)("h3",{id:"close"},(0,o.kt)("inlineCode",{parentName:"h3"},"close")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Same as ",(0,o.kt)("inlineCode",{parentName:"p"},"onCancel"))),(0,o.kt)("p",null,"A function that can close the modal. It's useful when you want to close the modal manually."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'const { close, modalProps, formProps, onFinish } = useModalForm()\n\nconst onFinishHandler = (values) => {\n  onFinish(values)\n  close()\n}\n\n// ---\n\nreturn (\n  <Modal {...modalProps}>\n    <Form {...formProps} onFinish={onFinishHandler} layout="vertical">\n      <Form.Item label="Title" name="title">\n        <Input />\n      </Form.Item>\n    </Form>\n  </Modal>\n)\n')),(0,o.kt)("h3",{id:"submit"},(0,o.kt)("inlineCode",{parentName:"h3"},"submit")),(0,o.kt)("p",null,"A function that can submit the form. It's useful when you want to submit the form manually."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'const { modalProps, formProps, submit } = useModalForm()\n\n// ---\n\nreturn (\n  <Modal\n    {...modalProps}\n    footer={[\n      <Button key="submit" type="primary" onClick={submit}>\n        Submit\n      </Button>,\n    ]}\n  >\n    <Form {...formProps} layout="vertical">\n      <Form.Item label="Title" name="title">\n        <Input />\n      </Form.Item>\n    </Form>\n  </Modal>\n)\n')),(0,o.kt)("h3",{id:"show"},(0,o.kt)("inlineCode",{parentName:"h3"},"show")),(0,o.kt)("p",null,"A function that can show the modal."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'const { modalProps, formProps, show } = useModalForm()\n\nreturn (\n  <>\n    <Button type="primary" onClick={() => show()}>\n      Show Modal\n    </Button>\n    <Modal\n      {...modalProps}\n      footer={[\n        <Button key="submit" type="primary" onClick={submit}>\n          Submit\n        </Button>,\n      ]}\n    >\n      <Form {...formProps} onFinish={onFinishHandler} layout="vertical">\n        <Form.Item label="Title" name="title">\n          <Input />\n        </Form.Item>\n      </Form>\n    </Modal>\n  </>\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'const { modalProps, formProps } = useModalForm()\n\n// ---\n\nreturn (\n  <Modal\n    {...modalProps}\n    footer={\n      <Button\n        onClick={(\n          e: React.MouseEvent<HTMLAnchorElement, MouseEvent> &\n            React.MouseEvent<HTMLButtonElement, MouseEvent>,\n        ) => modalProps.onCancel(e)}\n      >\n        Cancel\n      </Button>\n    }\n  >\n    <Form {...formProps} layout="vertical">\n      <Form.Item label="Title" name="title">\n        <Input />\n      </Form.Item>\n    </Form>\n  </Modal>\n)\n')),(0,o.kt)("h2",{id:"api-reference"},"API Reference"),(0,o.kt)("h3",{id:"properties-1"},"Properties"),(0,o.kt)(c,{module:"@pankod/refine-antd/useModalForm",mdxType:"PropsTable"}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"*"),": These props have default values in ",(0,o.kt)("inlineCode",{parentName:"p"},"RefineContext")," and can also be set on ",(0,o.kt)("strong",{parentName:"p"},"<",(0,o.kt)("a",{parentName:"strong",href:"/docs/3.xx.xx/api-reference/core/components/refine-config"},"Refine"),">")," component. ",(0,o.kt)("inlineCode",{parentName:"p"},"useModalForm")," will use what is passed to ",(0,o.kt)("inlineCode",{parentName:"p"},"<Refine>")," as default but a local value will override it.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"**"),": If not explicitly configured, default value of ",(0,o.kt)("inlineCode",{parentName:"p"},"redirect")," depends on which ",(0,o.kt)("inlineCode",{parentName:"p"},"action")," used. If ",(0,o.kt)("inlineCode",{parentName:"p"},"action")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"create"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"redirect"),"s default value is ",(0,o.kt)("inlineCode",{parentName:"p"},"edit")," (created resources edit page). If ",(0,o.kt)("inlineCode",{parentName:"p"},"action")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"edit")," instead, ",(0,o.kt)("inlineCode",{parentName:"p"},"redirect"),"s default value is ",(0,o.kt)("inlineCode",{parentName:"p"},"list"),".")),(0,o.kt)("h3",{id:"return-value"},"Return Value"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Key"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"show"),(0,o.kt)("td",{parentName:"tr",align:null},"A function that can open the modal"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"(id?: BaseKey) => void"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"formProps"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/api-reference/antd/hooks/form/useModalForm/#formprops"},"Props needed to manage form component")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://ant.design/components/form/#Form"},(0,o.kt)("inlineCode",{parentName:"a"},"FormProps")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"modalProps"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/api-reference/antd/hooks/form/useModalForm/#modalprops"},"Props for needed to manage modal component")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://ant.design/components/modal/#API"},(0,o.kt)("inlineCode",{parentName:"a"},"ModalProps")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"formLoading"),(0,o.kt)("td",{parentName:"tr",align:null},"Loading status of form"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"submit"),(0,o.kt)("td",{parentName:"tr",align:null},"Submit method, the parameter is the value of the form fields"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"() => void"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"open"),(0,o.kt)("td",{parentName:"tr",align:null},"Whether the modal dialog is open or not"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"close"),(0,o.kt)("td",{parentName:"tr",align:null},"Specify a function that can close the modal"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"() => void"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"defaultFormValuesLoading"),(0,o.kt)("td",{parentName:"tr",align:null},"DefaultFormValues loading status of form"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"form"),(0,o.kt)("td",{parentName:"tr",align:null},"Ant Design form instance"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://ant.design/components/form/#FormInstance"},(0,o.kt)("inlineCode",{parentName:"a"},"FormInstance<TVariables>")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"id"),(0,o.kt)("td",{parentName:"tr",align:null},"Record id for edit action"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#basekey"},(0,o.kt)("inlineCode",{parentName:"a"},"BaseKey"))," ","|"," ",(0,o.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"setId"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"id")," setter"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"Dispatch<SetStateAction<")," ",(0,o.kt)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#basekey"},(0,o.kt)("inlineCode",{parentName:"a"},"BaseKey"))," ","|"," ",(0,o.kt)("inlineCode",{parentName:"td"},"undefined>>"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"queryResult"),(0,o.kt)("td",{parentName:"tr",align:null},"Result of the query of a record"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},(0,o.kt)("inlineCode",{parentName:"a"},"QueryObserverResult<{ data: TData }>")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"mutationResult"),(0,o.kt)("td",{parentName:"tr",align:null},"Result of the mutation triggered by submitting the form"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useMutation"},(0,o.kt)("inlineCode",{parentName:"a"},"UseMutationResult<"),(0,o.kt)("br",null),(0,o.kt)("inlineCode",{parentName:"a"},"{ data: TData },"),(0,o.kt)("br",null),(0,o.kt)("inlineCode",{parentName:"a"},"TError,"),(0,o.kt)("br",null),(0,o.kt)("inlineCode",{parentName:"a"}," { resource: string; values: TVariables; },"),(0,o.kt)("br",null),(0,o.kt)("inlineCode",{parentName:"a"}," unknown>")))))),(0,o.kt)("h3",{id:"type-parameters"},"Type Parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Property"),(0,o.kt)("th",{parentName:"tr",align:null},"Desription"),(0,o.kt)("th",{parentName:"tr",align:null},"Default"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"TData"),(0,o.kt)("td",{parentName:"tr",align:null},"Result data of the query that extends ",(0,o.kt)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#baserecord"},(0,o.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#baserecord"},(0,o.kt)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"TError"),(0,o.kt)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,o.kt)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#httperror"},(0,o.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#httperror"},(0,o.kt)("inlineCode",{parentName:"a"},"HttpError")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"TVariables"),(0,o.kt)("td",{parentName:"tr",align:null},"Values for params."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"{}"))))),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)(k,{path:"form-antd-use-modal-form",mdxType:"CodeSandboxExample"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"")))}N.isMDXComponent=!0}}]);