"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[14084,66579,34569,8088,45420,59868],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,h=u["".concat(l,".").concat(m)]||u[m]||c[m]||r;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},53767:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const r={},i=void 0,s={unversionedId:"api-reference/mui/hooks/useAutocomplete/basic-usage-live-preview",id:"version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/basic-usage-live-preview",title:"basic-usage-live-preview",description:"",source:"@site/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/basic-usage-live-preview.md",sourceDirName:"api-reference/mui/hooks/useAutocomplete",slug:"/api-reference/mui/hooks/useAutocomplete/basic-usage-live-preview",permalink:"/docs/3.xx.xx/api-reference/mui/hooks/useAutocomplete/basic-usage-live-preview",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/basic-usage-live-preview.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{}},l={},p=[],d={toc:p},u="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=300px",live:!0,url:"http://localhost:3000",previewHeight:"300px"},"setInitialRoutes(['/posts/create'])\n// visible-block-start\nimport { Autocomplete, useAutocomplete, TextField } from '@pankod/refine-mui'\n\ninterface ICategory {\n  id: number\n  title: string\n}\n\nconst PostCreate: React.FC = () => {\n  const { autocompleteProps } = useAutocomplete<ICategory>({\n    resource: 'categories',\n  })\n\n  return (\n    <Autocomplete\n      {...autocompleteProps}\n      getOptionLabel={(item) => item.title}\n      isOptionEqualToValue={(option, value) =>\n        value === undefined ||\n        option?.id?.toString() === (value?.id ?? value)?.toString()\n      }\n      placeholder=\"Select a category\"\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Category\"\n          margin=\"normal\"\n          variant=\"outlined\"\n          required\n        />\n      )}\n    />\n  )\n}\n// visible-block-end\nsetRefineProps({\n  resources: [\n    {\n      name: 'posts',\n      create: PostCreate,\n    },\n  ],\n})\nrender(<RefineMuiDemo />)\n")))}c.isMDXComponent=!0},24326:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const r={},i=void 0,s={unversionedId:"api-reference/mui/hooks/useAutocomplete/crud-live-preview",id:"version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/crud-live-preview",title:"crud-live-preview",description:"",source:"@site/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/crud-live-preview.md",sourceDirName:"api-reference/mui/hooks/useAutocomplete",slug:"/api-reference/mui/hooks/useAutocomplete/crud-live-preview",permalink:"/docs/3.xx.xx/api-reference/mui/hooks/useAutocomplete/crud-live-preview",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/crud-live-preview.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{}},l={},p=[],d={toc:p},u="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=400px",live:!0,url:"http://localhost:3000",previewHeight:"400px"},"setInitialRoutes(['/posts/create'])\n// visible-block-start\nimport {\n  Create,\n  Box,\n  Autocomplete,\n  useAutocomplete,\n  TextField,\n} from '@pankod/refine-mui'\nimport { useForm, Controller } from '@pankod/refine-react-hook-form'\n\ninterface ICategory {\n  id: number\n  title: string\n}\n\nconst PostCreate: React.FC = () => {\n  const {\n    saveButtonProps,\n    refineCore: { formLoading, queryResult },\n    register,\n    control,\n    formState: { errors },\n  } = useForm<IPost, HttpError, IPost & { category: ICategory }>()\n\n  const { autocompleteProps } = useAutocomplete<ICategory>({\n    resource: 'categories',\n  })\n\n  return (\n    <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>\n      <Box component=\"form\">\n        <Controller\n          control={control}\n          name=\"category\"\n          rules={{ required: 'This field is required' }}\n          render={({ field }) => (\n            <Autocomplete\n              //highlight-next-line\n              {...autocompleteProps}\n              {...field}\n              onChange={(_, value) => {\n                field.onChange(value)\n              }}\n              getOptionLabel={({ title }) => title}\n              isOptionEqualToValue={(option, value) =>\n                value === undefined ||\n                option?.id?.toString() === (value?.id ?? value)?.toString()\n              }\n              placeholder=\"Select a category\"\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Category\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  error={!!errors.category}\n                  helperText={errors.category?.message}\n                  required\n                />\n              )}\n            />\n          )}\n        />\n      </Box>\n    </Create>\n  )\n}\n// visible-block-end\nsetRefineProps({\n  resources: [\n    {\n      name: 'posts',\n      create: PostCreate,\n    },\n  ],\n})\nrender(<RefineMuiDemo />)\n")))}c.isMDXComponent=!0},95833:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const r={},i=void 0,s={unversionedId:"api-reference/mui/hooks/useAutocomplete/default-value-live-preview",id:"version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/default-value-live-preview",title:"default-value-live-preview",description:"",source:"@site/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/default-value-live-preview.md",sourceDirName:"api-reference/mui/hooks/useAutocomplete",slug:"/api-reference/mui/hooks/useAutocomplete/default-value-live-preview",permalink:"/docs/3.xx.xx/api-reference/mui/hooks/useAutocomplete/default-value-live-preview",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/default-value-live-preview.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{}},l={},p=[],d={toc:p},u="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=300px",live:!0,url:"http://localhost:3000",previewHeight:"300px"},"setInitialRoutes(['/posts/create'])\n// visible-block-start\nimport { Autocomplete, useAutocomplete, TextField } from '@pankod/refine-mui'\n\ninterface ICategory {\n  id: number\n  title: string\n}\n\nconst PostCreate: React.FC = () => {\n  const { autocompleteProps } = useAutocomplete<ICategory>({\n    resource: 'categories',\n    // highlight-next-line\n    defaultValue: 11,\n  })\n\n  return (\n    <Autocomplete\n      {...autocompleteProps}\n      getOptionLabel={(item) => item.title}\n      isOptionEqualToValue={(option, value) =>\n        value === undefined ||\n        option?.id?.toString() === (value?.id ?? value)?.toString()\n      }\n      placeholder=\"Select a category\"\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Category\"\n          margin=\"normal\"\n          variant=\"outlined\"\n          required\n        />\n      )}\n    />\n  )\n}\n// visible-block-end\nsetRefineProps({\n  resources: [\n    {\n      name: 'posts',\n      create: PostCreate,\n    },\n  ],\n})\nrender(<RefineMuiDemo />)\n")))}c.isMDXComponent=!0},96163:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>u,default:()=>y,frontMatter:()=>d,metadata:()=>c,toc:()=>h});var a=n(87462),o=(n(67294),n(3905)),r=n(53767),i=n(95833),s=n(24326),l=n(66121),p=n(91679);const d={title:"useAutocomplete",siderbar_label:"useAutocomplete",source:"https://github.com/refinedev/refine/blob/next/packages/mui/src/hooks/useAutocomplete/index.ts"},u=void 0,c={unversionedId:"api-reference/mui/hooks/useAutocomplete/index",id:"version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/index",title:"useAutocomplete",description:"useAutocomplete hook allows you to manage Material UI `` component when records in a resource needs to be used as select options.",source:"@site/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/index.md",sourceDirName:"api-reference/mui/hooks/useAutocomplete",slug:"/api-reference/mui/hooks/useAutocomplete/",permalink:"/docs/3.xx.xx/api-reference/mui/hooks/useAutocomplete/",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/index.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{title:"useAutocomplete",siderbar_label:"useAutocomplete",source:"https://github.com/refinedev/refine/blob/next/packages/mui/src/hooks/useAutocomplete/index.ts"},sidebar:"someSidebar",previous:{title:"Material UI API",permalink:"/docs/3.xx.xx/api-reference/mui"},next:{title:"useDataGrid",permalink:"/docs/3.xx.xx/api-reference/mui/hooks/useDataGrid"}},m={},h=[{value:"Client-side filtering",id:"client-side-filtering",level:4},{value:"<code>metaData</code>",id:"metadata",level:3},{value:"<code>dataProviderName</code>",id:"dataprovidername",level:3},{value:"<code>successNotification</code>",id:"successnotification",level:3},{value:"<code>errorNotification</code>",id:"errornotification",level:3},{value:"<code>liveMode</code>",id:"livemode",level:3},{value:"<code>onLiveEvent</code>",id:"onliveevent",level:3},{value:"<code>liveParams</code>",id:"liveparams",level:3},{value:"FAQ",id:"faq",level:2},{value:"How to ensure <code>defaultValue</code> is included in the options?",id:"how-to-ensure-defaultvalue-is-included-in-the-options",level:3},{value:"Can I create the options manually?",id:"can-i-create-the-options-manually",level:3},{value:"How do I use it with <code>CRUD</code> components and <code>useForm</code>?",id:"how-do-i-use-it-with-crud-components-and-useform",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Return values",id:"return-values",level:3},{value:"Example",id:"example",level:2}],k=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},f=k("PropTag"),v=k("PropsTable"),g=k("CodeSandboxExample"),N={toc:h},x="wrapper";function y(e){let{components:t,...n}=e;return(0,o.kt)(x,(0,a.Z)({},N,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"useAutocomplete")," hook allows you to manage Material UI ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/react-autocomplete/"},(0,o.kt)("inlineCode",{parentName:"a"},"<Autocomplete>"))," component when records in a resource needs to be used as select options."),(0,o.kt)("p",null,"This hook uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"useList")," hook for fetching data. ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useList/"},"Refer to useList hook for details. \u2192")),(0,o.kt)("admonition",{title:"DERIVATIVES",type:"info-tip"},(0,o.kt)("p",{parentName:"admonition"},"If you're looking for a complete select library, refine has out-of-the-box support for the libraries below:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"refine's ",(0,o.kt)("inlineCode",{parentName:"li"},"useSelect")," (for Headless users) - ",(0,o.kt)("a",{parentName:"li",href:"/docs/api-reference/core/hooks/useSelect/"},"Documentation")," - ",(0,o.kt)("a",{parentName:"li",href:"/docs/examples/core/useSelect"},"Example")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://ant.design/components/select"},"Ant Design Select")," (for Ant Design users) - ",(0,o.kt)("a",{parentName:"li",href:"/docs/api-reference/antd/hooks/field/useSelect"},"Documentation")," - ",(0,o.kt)("a",{parentName:"li",href:"/docs/examples/field/useSelect"},"Example")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://mantine.dev/core/select/"},"Mantine Select")," (for Mantine users) - ",(0,o.kt)("a",{parentName:"li",href:"/docs/api-reference/mantine/hooks/useSelect"},"Documentation"),"\n:::")),(0,o.kt)("h2",{parentName:"admonition",id:"basic-usage"},"Basic Usage"),(0,o.kt)("p",{parentName:"admonition"},"Here is a basic example of how to use ",(0,o.kt)("inlineCode",{parentName:"p"},"useAutocomplete")," hook."),(0,o.kt)(r.default,{mdxType:"BasicUsageLivePreview"}),(0,o.kt)("h2",{parentName:"admonition",id:"realtime-updates"},"Realtime Updates"),(0,o.kt)("blockquote",{parentName:"admonition"},(0,o.kt)("p",{parentName:"blockquote"},"This feature is only available if you use a ",(0,o.kt)("a",{parentName:"p",href:"docs/api-reference/core/providers/live-provider"},"Live Provider"))),(0,o.kt)("p",{parentName:"admonition"},"When ",(0,o.kt)("inlineCode",{parentName:"p"},"useAutocomplete")," hook is mounted, it passes some parameters (",(0,o.kt)("inlineCode",{parentName:"p"},"channel"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"resource")," etc.) to the ",(0,o.kt)("inlineCode",{parentName:"p"},"subscribe")," method from the ",(0,o.kt)("inlineCode",{parentName:"p"},"liveProvider"),".\nIt is useful when you want to subscribe to the live updates."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"liveProvider")," documentation for more information ","\u2192")),(0,o.kt)("h2",{parentName:"admonition",id:"properties"},"Properties"),(0,o.kt)("h3",{parentName:"admonition",id:"resource-"},(0,o.kt)("inlineCode",{parentName:"h3"},"resource")," ",(0,o.kt)(f,{required:!0,mdxType:"PropTag"})),(0,o.kt)("p",{parentName:"admonition"},"It will be passed to the ",(0,o.kt)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,o.kt)("inlineCode",{parentName:"p"},"dataProvider")," as parameter via the ",(0,o.kt)("inlineCode",{parentName:"p"},"useList")," hook. The parameter is usually used as an API endpoint path. It all depends on how to handle the ",(0,o.kt)("inlineCode",{parentName:"p"},"resource")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"getList")," method. See the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/data-provider#creating-a-data-provider"},"creating a data provider")," section for an example of how resources are handled."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  resource: 'categories',\n})\n")),(0,o.kt)("h3",{parentName:"admonition",id:"sort"},(0,o.kt)("inlineCode",{parentName:"h3"},"sort")),(0,o.kt)("p",{parentName:"admonition"},"It allows to show the options in the desired order. ",(0,o.kt)("inlineCode",{parentName:"p"},"sort")," will be passed to the ",(0,o.kt)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,o.kt)("inlineCode",{parentName:"p"},"dataProvider")," as parameter via the ",(0,o.kt)("inlineCode",{parentName:"p"},"useList")," hook. It is used to send sort query parameters to the API."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"docs/api-reference/core/interfaceReferences#crudsorting"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"CrudSorting")," interface for more information ","\u2192")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  sort: [\n    {\n      field: 'title',\n      order: 'asc',\n    },\n  ],\n})\n")),(0,o.kt)(l.default,{mdxType:"SortLivePreview"}),(0,o.kt)("h3",{parentName:"admonition",id:"filters"},(0,o.kt)("inlineCode",{parentName:"h3"},"filters")),(0,o.kt)("p",{parentName:"admonition"},"It is used to show options by filtering them. ",(0,o.kt)("inlineCode",{parentName:"p"},"filters")," will be passed to the ",(0,o.kt)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,o.kt)("inlineCode",{parentName:"p"},"dataProvider")," as parameter via the ",(0,o.kt)("inlineCode",{parentName:"p"},"useList")," hook. It is used to send filter query parameters to the API."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudfilters"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"CrudFilters")," interface for more information ","\u2192")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  filter: [\n    {\n      field: 'isActive',\n      operator: 'eq',\n      value: true,\n    },\n  ],\n})\n")),(0,o.kt)("h3",{parentName:"admonition",id:"defaultvalue"},(0,o.kt)("inlineCode",{parentName:"h3"},"defaultValue")),(0,o.kt)("p",{parentName:"admonition"},"Allows to make options selected by default. Adds extra options to ",(0,o.kt)("inlineCode",{parentName:"p"},"<select>")," component. In some cases like there are many entries for the ",(0,o.kt)("inlineCode",{parentName:"p"},"<select>")," and pagination is required, ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultValue")," may not be present in the current visible options and this can break the ",(0,o.kt)("inlineCode",{parentName:"p"},"<select>")," component. To avoid such cases, A seperate ",(0,o.kt)("inlineCode",{parentName:"p"},"useMany")," query is sent to the backend with the ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultValue")," and appended to the options of ",(0,o.kt)("inlineCode",{parentName:"p"},"<select>"),", ensuring the default values exist in the current options array. Since it uses ",(0,o.kt)("inlineCode",{parentName:"p"},"useMany")," to query the necessary data, the ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultValue")," can be a single value or an array of values like the following:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  defaultValue: 1, // or [1, 2]\n})\n")),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useMany/"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"useMany")," documentation for detailed usage. ","\u2192")),(0,o.kt)("h3",{parentName:"admonition",id:"debounce"},(0,o.kt)("inlineCode",{parentName:"h3"},"debounce")),(0,o.kt)("p",{parentName:"admonition"},"It allows us to ",(0,o.kt)("inlineCode",{parentName:"p"},"debounce")," the ",(0,o.kt)("inlineCode",{parentName:"p"},"onSearch")," function."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  debounce: 500,\n})\n")),(0,o.kt)("h3",{parentName:"admonition",id:"queryoptions"},(0,o.kt)("inlineCode",{parentName:"h3"},"queryOptions")),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"queryOptions")," is used to pass additional options to the ",(0,o.kt)("inlineCode",{parentName:"p"},"useQuery")," hook. It is useful when you want to pass additional options to the ",(0,o.kt)("inlineCode",{parentName:"p"},"useQuery")," hook."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"https://tanstack.com/query/v4/docs/react/reference/useQuery"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"useQuery")," documentation for more information ","\u2192")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  queryOptions: {\n    retry: 3,\n  },\n})\n")),(0,o.kt)("h3",{parentName:"admonition",id:"pagination"},(0,o.kt)("inlineCode",{parentName:"h3"},"pagination")),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"pagination")," will be passed to the ",(0,o.kt)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,o.kt)("inlineCode",{parentName:"p"},"dataProvider")," as parameter. It is used to send pagination query parameters to the API."),(0,o.kt)("h4",{parentName:"admonition",id:"current"},(0,o.kt)("inlineCode",{parentName:"h4"},"current")),(0,o.kt)("p",{parentName:"admonition"},"You can pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"current")," page number to the ",(0,o.kt)("inlineCode",{parentName:"p"},"pagination")," property."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  pagination: {\n    current: 2,\n  },\n})\n")),(0,o.kt)("h4",{parentName:"admonition",id:"pagesize"},(0,o.kt)("inlineCode",{parentName:"h4"},"pageSize")),(0,o.kt)("p",{parentName:"admonition"},"You can pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"pageSize")," to the ",(0,o.kt)("inlineCode",{parentName:"p"},"pagination")," property."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  pagination: {\n    pageSize: 20,\n  },\n})\n")),(0,o.kt)("h3",{parentName:"admonition",id:"haspagination"},(0,o.kt)("inlineCode",{parentName:"h3"},"hasPagination")),(0,o.kt)("blockquote",{parentName:"admonition"},(0,o.kt)("p",{parentName:"blockquote"},"Default: ",(0,o.kt)("inlineCode",{parentName:"p"},"false"))),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"hasPagination")," will be passed to the ",(0,o.kt)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,o.kt)("inlineCode",{parentName:"p"},"dataProvider")," as parameter via the ",(0,o.kt)("inlineCode",{parentName:"p"},"useList")," hook. It is used to determine whether to use server-side pagination or not."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  hasPagination: false,\n})\n")),(0,o.kt)("h3",{parentName:"admonition",id:"defaultvaluequeryoptions"},(0,o.kt)("inlineCode",{parentName:"h3"},"defaultValueQueryOptions")),(0,o.kt)("p",{parentName:"admonition"},"When the ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultValue")," property is given, the ",(0,o.kt)("inlineCode",{parentName:"p"},"useMany")," data hook is called for the selected records. With this property, you can change the options of this query. If not given, the values given in ",(0,o.kt)("inlineCode",{parentName:"p"},"queryOptions")," will be used."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  resource: 'categories',\n  defaultValueQueryOptions: {\n    onSuccess: (data) => {\n      console.log('triggers when on query return on success')\n    },\n  },\n})\n")),(0,o.kt)("h3",{parentName:"admonition",id:"onsearch"},(0,o.kt)("inlineCode",{parentName:"h3"},"onSearch")),(0,o.kt)("p",{parentName:"admonition"},"It allows us to ",(0,o.kt)("inlineCode",{parentName:"p"},"AutoComplete")," the ",(0,o.kt)("inlineCode",{parentName:"p"},"options"),"."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudfilters"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"CrudFilters")," interface for more information ","\u2192")),(0,o.kt)(p.default,{mdxType:"OnSearchLivePreview"})),(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"onSearch")," is used, it will override the existing ",(0,o.kt)("inlineCode",{parentName:"p"},"filters"),".\n:::"),(0,o.kt)("h4",{id:"client-side-filtering"},"Client-side filtering"),(0,o.kt)("p",null,"Sometimes, you may want to filter the options on the client-side. You can do this by passing ",(0,o.kt)("inlineCode",{parentName:"p"},"onSearch")," function as ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined"),". This will disable the server-side filtering and will filter the options on the client-side."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'// highlight-next-line\nimport { createFilterOptions } from \'@pankod/refine-mui\'\n\nconst { autocompleteProps } = useAutocomplete({\n  resource: \'categories\',\n})\n\n// highlight-start\nconst filterOptions = createFilterOptions({\n  matchFrom: \'start\',\n  stringify: (option: any) => option.title,\n})\n// highlight-end\n\n;<Autocomplete\n  {...autocompleteProps}\n  getOptionLabel={(item) => item.title}\n  // highlight-start\n  onInputChange={(event, value) => {}}\n  filterOptions={filterOptions}\n  // highlight-end\n  isOptionEqualToValue={(option, value) =>\n    value === undefined ||\n    option?.id?.toString() === (value?.id ?? value)?.toString()\n  }\n  placeholder="Select a category"\n  renderInput={(params) => (\n    <TextField\n      {...params}\n      label="Category"\n      margin="normal"\n      variant="outlined"\n      required\n    />\n  )}\n/>\n')),(0,o.kt)("h3",{id:"metadata"},(0,o.kt)("inlineCode",{parentName:"h3"},"metaData")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/general-concepts/#metadata"},(0,o.kt)("inlineCode",{parentName:"a"},"metaData"))," is used following two purposes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"To pass additional information to data provider methods."),(0,o.kt)("li",{parentName:"ul"},"Generate GraphQL queries using plain JavaScript Objects (JSON). Please refer ",(0,o.kt)("a",{parentName:"li",href:"/docs/advanced-tutorials/data-provider/graphql/#edit-page"},"GraphQL")," for more information.")),(0,o.kt)("p",null,"In the following example, we pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"headers")," property in the ",(0,o.kt)("inlineCode",{parentName:"p"},"metaData")," object to the ",(0,o.kt)("inlineCode",{parentName:"p"},"create")," method. With similar logic, you can pass any properties to specifically handle the data provider methods."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  // highlight-start\n  metaData: {\n    headers: { 'x-meta-data': 'true' },\n  },\n  // highlight-end\n})\n\nconst myDataProvider = {\n  //...\n  getList: async ({\n    resource,\n    pagination,\n    hasPagination,\n    sort,\n    filters,\n    // highlight-next-line\n    metaData,\n  }) => {\n    // highlight-next-line\n    const headers = metaData?.headers ?? {}\n    const url = `${apiUrl}/${resource}`\n    //...\n    //...\n    // highlight-next-line\n    const { data, headers } = await httpClient.get(`${url}`, { headers })\n    return {\n      data,\n    }\n  },\n  //...\n}\n")),(0,o.kt)("h3",{id:"dataprovidername"},(0,o.kt)("inlineCode",{parentName:"h3"},"dataProviderName")),(0,o.kt)("p",null,"If there is more than one ",(0,o.kt)("inlineCode",{parentName:"p"},"dataProvider"),", you can specify which one to use by passing the ",(0,o.kt)("inlineCode",{parentName:"p"},"dataProviderName")," prop. It is useful when you have a different data provider for different resources."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  dataProviderName: 'second-data-provider',\n})\n")),(0,o.kt)("h3",{id:"successnotification"},(0,o.kt)("inlineCode",{parentName:"h3"},"successNotification")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/notification-provider/"},(0,o.kt)("inlineCode",{parentName:"a"},"NotificationProvider"))," is required for this prop to work.")),(0,o.kt)("p",null,"After data is fetched successfully, ",(0,o.kt)("inlineCode",{parentName:"p"},"useAutocomplete")," can call ",(0,o.kt)("inlineCode",{parentName:"p"},"open")," function from ",(0,o.kt)("inlineCode",{parentName:"p"},"NotificationProvider")," to show a success notification. With this prop, you can customize the success notification."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  successNotification: (data, values, resource) => {\n    return {\n      message: `${data.title} Successfully fetched.`,\n      description: 'Success with no errors',\n      type: 'success',\n    }\n  },\n})\n")),(0,o.kt)("h3",{id:"errornotification"},(0,o.kt)("inlineCode",{parentName:"h3"},"errorNotification")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/notification-provider/"},(0,o.kt)("inlineCode",{parentName:"a"},"NotificationProvider"))," is required for this prop to work.")),(0,o.kt)("p",null,"After data fetching is failed, ",(0,o.kt)("inlineCode",{parentName:"p"},"useAutocomplete")," will call ",(0,o.kt)("inlineCode",{parentName:"p"},"open")," function from ",(0,o.kt)("inlineCode",{parentName:"p"},"NotificationProvider")," to show a error notification. With this prop, you can customize the error notification."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  errorNotification: (data, values, resource) => {\n    return {\n      message: `Something went wrong when getting ${data.id}`,\n      description: 'Error',\n      type: 'error',\n    }\n  },\n})\n")),(0,o.kt)("h3",{id:"livemode"},(0,o.kt)("inlineCode",{parentName:"h3"},"liveMode")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/"},(0,o.kt)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,o.kt)("p",null,'Determines whether to update data automatically ("auto") or not ("manual") if a related live event is received. It can be used to update and show data in Realtime throughout your app.\nFor more information about live mode, please check ',(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/#livemode"},"Live / Realtime")," page."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  liveMode: 'auto',\n})\n")),(0,o.kt)("h3",{id:"onliveevent"},(0,o.kt)("inlineCode",{parentName:"h3"},"onLiveEvent")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/"},(0,o.kt)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,o.kt)("p",null,"The callback function that is executed when new events from a subscription are arrived."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  onLiveEvent: (event) => {\n    console.log(event)\n  },\n})\n")),(0,o.kt)("h3",{id:"liveparams"},(0,o.kt)("inlineCode",{parentName:"h3"},"liveParams")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/"},(0,o.kt)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,o.kt)("p",null,"Params to pass to liveProvider's ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/#subscribe"},"subscribe")," method."),(0,o.kt)("h2",{id:"faq"},"FAQ"),(0,o.kt)("h3",{id:"how-to-ensure-defaultvalue-is-included-in-the-options"},"How to ensure ",(0,o.kt)("inlineCode",{parentName:"h3"},"defaultValue")," is included in the options?"),(0,o.kt)("p",null,"In some cases we only have ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),", it may be necessary to show it selected in the selection box. This hook sends the request via ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useMany/"},(0,o.kt)("inlineCode",{parentName:"a"},"useMany")),", gets the data and mark as seleted."),(0,o.kt)(i.default,{mdxType:"DefaultValueLivePreview"}),(0,o.kt)("h3",{id:"can-i-create-the-options-manually"},"Can I create the options manually?"),(0,o.kt)("p",null,"You can create a new ",(0,o.kt)("inlineCode",{parentName:"p"},"options")," object with ",(0,o.kt)("inlineCode",{parentName:"p"},"queryResult"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const { autocompleteProps, queryResult } = useAutocomplete()\n\nconst options = queryResult.data?.data.map((item) => ({\n  title: item.title,\n  value: item.id,\n}))\n\nreturn <Autocomplete {...autocompleteProps} options={options || []} />\n")),(0,o.kt)("h3",{id:"how-do-i-use-it-with-crud-components-and-useform"},"How do I use it with ",(0,o.kt)("inlineCode",{parentName:"h3"},"CRUD")," components and ",(0,o.kt)("inlineCode",{parentName:"h3"},"useForm"),"?"),(0,o.kt)(s.default,{mdxType:"CrudLivePreview"}),(0,o.kt)("p",null,"The use of ",(0,o.kt)("inlineCode",{parentName:"p"},"useAutocomplete")," with ",(0,o.kt)("a",{parentName:"p",href:"/docs/packages/documentation/react-hook-form/useForm/"},(0,o.kt)("inlineCode",{parentName:"a"},"useForm"))," is demonstrated in the code above. You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"useAutocomplete")," hook independently of the ",(0,o.kt)("inlineCode",{parentName:"p"},"useForm")," hook."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"By default, refine does the search using the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useDelete/"},(0,o.kt)("inlineCode",{parentName:"a"},"useList"))," hook and passes it to the search parameter. If you get a problem you should check your ",(0,o.kt)("inlineCode",{parentName:"p"},"getList")," function in your Data Provider. If you want to change this behavior to make client-side filtering, you can examine ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/react-autocomplete/#search-as-you-type"},"this")," documentation.")),(0,o.kt)("h2",{id:"api-reference"},"API Reference"),(0,o.kt)("h3",{id:"properties-1"},"Properties"),(0,o.kt)(v,{module:"@pankod/refine-mui/useAutocomplete",mdxType:"PropsTable"}),(0,o.kt)("h3",{id:"return-values"},"Return values"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Property"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"autocompleteProps"),(0,o.kt)("td",{parentName:"tr",align:null},"Material UI Autocomplete props"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#autocompletereturnvalues"},(0,o.kt)("inlineCode",{parentName:"a"},"AutoCompleteReturnValues")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"queryResult"),(0,o.kt)("td",{parentName:"tr",align:null},"Result of the query of a record"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},(0,o.kt)("inlineCode",{parentName:"a"},"QueryObserverResult<{ data: TData }>")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"defaultValueQueryResult"),(0,o.kt)("td",{parentName:"tr",align:null},"Result of the query of a ",(0,o.kt)("inlineCode",{parentName:"td"},"defaultValue")," record"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},(0,o.kt)("inlineCode",{parentName:"a"},"QueryObserverResult<{ data: TData }>")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"defaultValueQueryOnSuccess"),(0,o.kt)("td",{parentName:"tr",align:null},"Default value onSuccess method"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"() => void"))))),(0,o.kt)("blockquote",null,(0,o.kt)("h4",{parentName:"blockquote",id:"autocompletereturnvalues"},"AutoCompleteReturnValues"),(0,o.kt)("table",{parentName:"blockquote"},(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Property"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"options"),(0,o.kt)("td",{parentName:"tr",align:null},"Array of options"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"TData"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"loading"),(0,o.kt)("td",{parentName:"tr",align:null},"Loading state"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"onInputChange"),(0,o.kt)("td",{parentName:"tr",align:null},"Callback fired when the input value changes"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"(event: React.SyntheticEvent, value: string, reason: string) => void"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"filterOptions"),(0,o.kt)("td",{parentName:"tr",align:null},"Determines the filtered options to be rendered on search."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"(options: TData, state: object) => TData")))))),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)(g,{path:"field-mui-use-autocomplete",mdxType:"CodeSandboxExample"}))}y.isMDXComponent=!0},91679:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const r={},i=void 0,s={unversionedId:"api-reference/mui/hooks/useAutocomplete/on-search-live-preview",id:"version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/on-search-live-preview",title:"on-search-live-preview",description:"",source:"@site/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/on-search-live-preview.md",sourceDirName:"api-reference/mui/hooks/useAutocomplete",slug:"/api-reference/mui/hooks/useAutocomplete/on-search-live-preview",permalink:"/docs/3.xx.xx/api-reference/mui/hooks/useAutocomplete/on-search-live-preview",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/on-search-live-preview.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{}},l={},p=[],d={toc:p},u="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=300px",live:!0,url:"http://localhost:3000",previewHeight:"300px"},"setInitialRoutes(['/posts/create'])\n// visible-block-start\nimport { Autocomplete, useAutocomplete, TextField } from '@pankod/refine-mui'\n\ninterface ICategory {\n  id: number\n  title: string\n}\n\nconst PostCreate: React.FC = () => {\n  const { autocompleteProps } = useAutocomplete<ICategory>({\n    resource: 'categories',\n    // highlight-start\n    onSearch: (value) => [\n      {\n        field: 'title',\n        operator: 'contains',\n        value,\n      },\n    ],\n    // highlight-end\n  })\n\n  return (\n    <Autocomplete\n      {...autocompleteProps}\n      getOptionLabel={(item) => item.title}\n      isOptionEqualToValue={(option, value) =>\n        value === undefined ||\n        option?.id?.toString() === (value?.id ?? value)?.toString()\n      }\n      placeholder=\"Select a category\"\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Category\"\n          margin=\"normal\"\n          variant=\"outlined\"\n          required\n        />\n      )}\n    />\n  )\n}\n// visible-block-end\nsetRefineProps({\n  resources: [\n    {\n      name: 'posts',\n      create: PostCreate,\n    },\n  ],\n})\nrender(<RefineMuiDemo />)\n")))}c.isMDXComponent=!0},66121:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const r={},i=void 0,s={unversionedId:"api-reference/mui/hooks/useAutocomplete/sort-live-preview",id:"version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/sort-live-preview",title:"sort-live-preview",description:"",source:"@site/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/sort-live-preview.md",sourceDirName:"api-reference/mui/hooks/useAutocomplete",slug:"/api-reference/mui/hooks/useAutocomplete/sort-live-preview",permalink:"/docs/3.xx.xx/api-reference/mui/hooks/useAutocomplete/sort-live-preview",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/sort-live-preview.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{}},l={},p=[],d={toc:p},u="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=300px",live:!0,url:"http://localhost:3000",previewHeight:"300px"},"setInitialRoutes(['/posts/create'])\n// visible-block-start\nimport {\n  Autocomplete,\n  useAutocomplete,\n  TextField,\n  Button,\n} from '@pankod/refine-mui'\n\ninterface ICategory {\n  id: number\n  title: string\n}\n\nconst PostCreate: React.FC = () => {\n  const [order, setOrder] = React.useState<'asc' | 'desc'>('asc')\n  const { autocompleteProps } = useAutocomplete<ICategory>({\n    resource: 'categories',\n    // highlight-start\n    sort: [\n      {\n        field: 'title',\n        order,\n      },\n    ],\n    // highlight-end\n  })\n\n  return (\n    <>\n      <Autocomplete\n        {...autocompleteProps}\n        getOptionLabel={(item) => item.title}\n        isOptionEqualToValue={(option, value) =>\n          value === undefined ||\n          option?.id?.toString() === (value?.id ?? value)?.toString()\n        }\n        placeholder=\"Select a category\"\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label=\"Category\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            required\n          />\n        )}\n      />\n      <Button\n        onClick={() => setOrder(order === 'asc' ? 'desc' : 'asc')}\n        variant=\"contained\"\n        size=\"small\"\n      >\n        Toggle Order\n      </Button>\n    </>\n  )\n}\n// visible-block-end\nsetRefineProps({\n  resources: [\n    {\n      name: 'posts',\n      create: PostCreate,\n    },\n  ],\n})\nrender(<RefineMuiDemo />)\n")))}c.isMDXComponent=!0}}]);