"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[68758],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,h=u["".concat(p,".").concat(m)]||u[m]||c[m]||o;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},56945:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={id:"create",title:"Create",swizzle:!0},i=void 0,s={unversionedId:"api-reference/mui/components/basic-views/create",id:"version-3.xx.xx/api-reference/mui/components/basic-views/create",title:"Create",description:"`` provides us a layout to display the page. It does not contain any logic but adds extra functionalities like action buttons and giving titles to the page.",source:"@site/versioned_docs/version-3.xx.xx/api-reference/mui/components/basic-views/create.md",sourceDirName:"api-reference/mui/components/basic-views",slug:"/api-reference/mui/components/basic-views/create",permalink:"/docs/3.xx.xx/api-reference/mui/components/basic-views/create",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/versioned_docs/version-3.xx.xx/api-reference/mui/components/basic-views/create.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{id:"create",title:"Create",swizzle:!0},sidebar:"someSidebar",previous:{title:"Inferencer",permalink:"/docs/3.xx.xx/api-reference/mui/components/inferencer"},next:{title:"Edit",permalink:"/docs/3.xx.xx/api-reference/mui/components/basic-views/edit"}},p={},l=[{value:"Properties",id:"properties",level:2},{value:"<code>title</code>",id:"title",level:3},{value:"<code>resource</code>",id:"resource",level:3},{value:"<code>saveButtonProps</code>",id:"savebuttonprops",level:3},{value:"<code>goBack</code>",id:"goback",level:3},{value:"<code>isLoading</code>",id:"isloading",level:3},{value:"<code>breadcrumb</code>",id:"breadcrumb",level:3},{value:"<code>wrapperProps</code>",id:"wrapperprops",level:3},{value:"<code>headerProps</code>",id:"headerprops",level:3},{value:"<code>contentProps</code>",id:"contentprops",level:3},{value:"<code>headerButtons</code>",id:"headerbuttons",level:3},{value:"<code>headerButtonProps</code>",id:"headerbuttonprops",level:3},{value:"<code>footerButtons</code>",id:"footerbuttons",level:3},{value:"<code>footerButtonProps</code>",id:"footerbuttonprops",level:3},{value:"<del><code>actionButtons</code></del>",id:"actionbuttons",level:3},{value:"<del><code>cardProps</code></del>",id:"cardprops",level:3},{value:"<del><code>cardHeaderProps</code></del>",id:"cardheaderprops",level:3},{value:"<del><code>cardContentProps</code></del>",id:"cardcontentprops",level:3},{value:"<del><code>cardActionsProps</code></del>",id:"cardactionsprops",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3}],d=(u="PropsTable",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var u;const c={toc:l},m="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<Create>")," provides us a layout to display the page. It does not contain any logic but adds extra functionalities like action buttons and giving titles to the page."),(0,r.kt)("p",null,"We'll show what ",(0,r.kt)("inlineCode",{parentName:"p"},"<Create>")," does using properties with examples."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode url=http://localhost:3000/posts/create",live:!0,hideCode:!0,url:"http://localhost:3000/posts/create"},"// visible-block-start\nimport React from 'react'\nimport {\n  Create,\n  useAutocomplete,\n  TextField,\n  Autocomplete,\n  Box,\n} from '@pankod/refine-mui'\nimport { useForm, Controller } from '@pankod/refine-react-hook-form'\n\nconst SampleCreate = () => {\n  const {\n    saveButtonProps,\n    refineCore: { formLoading },\n    register,\n    control,\n    formState: { errors },\n  } = useForm()\n\n  const { autocompleteProps: categoryAutocompleteProps } = useAutocomplete({\n    resource: 'categories',\n  })\n\n  return (\n    <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>\n      <Box\n        component=\"form\"\n        sx={{ display: 'flex', flexDirection: 'column' }}\n        autoComplete=\"off\"\n      >\n        <TextField\n          {...register('title', {\n            required: 'This field is required',\n          })}\n          error={!!(errors as any)?.title}\n          helperText={(errors as any)?.title?.message}\n          margin=\"normal\"\n          fullWidth\n          InputLabelProps={{ shrink: true }}\n          type=\"text\"\n          label=\"Title\"\n          name=\"title\"\n        />\n        <TextField\n          {...register('content', {\n            required: 'This field is required',\n          })}\n          error={!!(errors as any)?.content}\n          helperText={(errors as any)?.content?.message}\n          margin=\"normal\"\n          fullWidth\n          InputLabelProps={{ shrink: true }}\n          multiline\n          label=\"Content\"\n          name=\"content\"\n        />\n        <Controller\n          control={control}\n          name=\"category\"\n          rules={{ required: 'This field is required' }}\n          // eslint-disable-next-line\n          defaultValue={null as any}\n          render={({ field }) => (\n            <Autocomplete\n              {...categoryAutocompleteProps}\n              {...field}\n              onChange={(_, value) => {\n                field.onChange(value)\n              }}\n              getOptionLabel={(item) => {\n                return (\n                  categoryAutocompleteProps?.options?.find(\n                    (p) => p?.id?.toString() === item?.id?.toString(),\n                  )?.title ?? ''\n                )\n              }}\n              isOptionEqualToValue={(option, value) =>\n                value === undefined ||\n                option?.id?.toString() === (value?.id ?? value)?.toString()\n              }\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Category\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  error={!!(errors as any)?.category?.id}\n                  helperText={(errors as any)?.category?.id?.message}\n                  required\n                />\n              )}\n            />\n          )}\n        />\n      </Box>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={['/samples/create']}\n    resources={[{ name: 'samples', create: SampleCreate, list: SampleList }]}\n  />,\n)\n")),(0,r.kt)("admonition",{title:"Swizzle",type:"info-tip"},(0,r.kt)("p",{parentName:"admonition"},"You can swizzle this component to customize it with the ",(0,r.kt)("a",{parentName:"p",href:"/docs/packages/documentation/cli"},(0,r.kt)("strong",{parentName:"a"},"refine CLI")))),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"title"},(0,r.kt)("inlineCode",{parentName:"h3"},"title")),(0,r.kt)("p",null,"It allows adding title inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Create>"),' component. if you don\'t pass title props it uses "Create" prefix and singular resource name by default. For example, for the ',(0,r.kt)("inlineCode",{parentName:"p"},"/posts/create"),' resource, it will be "Create post".'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},"// visible-block-start\nimport { Create, Typography } from '@pankod/refine-mui'\n\nconst CreatePage: React.FC = () => {\n  return (\n    <Create\n      // highlight-next-line\n      title={<Typography variant=\"h5\">Custom Title</Typography>}\n    >\n      <span>Rest of your page here</span>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={['/posts/create']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <RefineMui.CreateButton />\n          </div>\n        ),\n        create: CreatePage,\n      },\n    ]}\n  />,\n)\n")),(0,r.kt)("h3",{id:"resource"},(0,r.kt)("inlineCode",{parentName:"h3"},"resource")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"<Create>")," component reads the ",(0,r.kt)("inlineCode",{parentName:"p"},"resource")," information from the route by default. This default behavior will not work on custom pages. If you want to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Create>")," component in a custom page, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"resource")," prop."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/advanced-tutorials/custom-pages"},"Refer to the custom pages documentation for detailed usage. ","\u2192")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/custom",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/custom"},"// handle initial routes in new way\nsetInitialRoutes(['/custom'])\n\n// visible-block-start\nimport { Refine } from '@pankod/refine-core'\nimport { Create, Layout } from '@pankod/refine-mui'\nimport routerProvider from '@pankod/refine-react-router-v6'\nimport dataProvider from '@pankod/refine-simple-rest'\n\nconst CustomPage: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Create resource=\"posts\">\n      <span>Rest of your page here</span>\n    </Create>\n  )\n}\n\nconst App: React.FC = () => {\n  return (\n    <Refine\n      routerProvider={{\n        ...routerProvider,\n        // highlight-start\n        routes: [\n          {\n            element: <CustomPage />,\n            path: '/custom',\n          },\n        ],\n        // highlight-end\n      }}\n      Layout={Layout}\n      dataProvider={dataProvider('https://api.fake-rest.refine.dev')}\n      resources={[{ name: 'posts' }]}\n    />\n  )\n}\n// visible-block-end\n\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n)\n")),(0,r.kt)("h3",{id:"savebuttonprops"},(0,r.kt)("inlineCode",{parentName:"h3"},"saveButtonProps")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<Create>")," component has a default button that submits the form. If you want to customize this button you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"saveButtonProps")," property like the code below."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/mui/components/buttons/save-button"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"<SaveButton>")," documentation for detailed usage. ","\u2192")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},"// visible-block-start\nimport { Create } from '@pankod/refine-mui'\n\nconst PostCreate: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Create saveButtonProps={{ size: 'small' }}>\n      <span>Rest of your page here</span>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={['/posts/create']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <RefineMui.CreateButton />\n          </div>\n        ),\n        create: PostCreate,\n      },\n    ]}\n  />,\n)\n")),(0,r.kt)("h3",{id:"goback"},(0,r.kt)("inlineCode",{parentName:"h3"},"goBack")),(0,r.kt)("p",null,"To customize the back button or to disable it, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"goBack")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},"// visible-block-start\nimport { Create, Button } from '@pankod/refine-mui'\nimport { useNavigation } from '@pankod/refine-core'\n\nconst BackButton = () => {\n  const { goBack } = useNavigation()\n\n  return <Button onClick={() => goBack()}>BACK!</Button>\n}\n\nconst PostCreate: React.FC = () => {\n  return (\n    <Create\n      // highlight-next-line\n      goBack={<BackButton />}\n    >\n      <span>Rest of your page here</span>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={['/posts', '/posts/create']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <RefineMui.CreateButton />\n          </div>\n        ),\n        create: PostCreate,\n      },\n    ]}\n  />,\n)\n")),(0,r.kt)("h3",{id:"isloading"},(0,r.kt)("inlineCode",{parentName:"h3"},"isLoading")),(0,r.kt)("p",null,"To toggle the loading state of the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Create/>")," component, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"isLoading")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},"// visible-block-start\nimport { Create } from '@pankod/refine-mui'\n\nconst PostCreate: React.FC = () => {\n  const [loading, setLoading] = React.useState(true)\n\n  return (\n    <Create\n      // highlight-next-line\n      isLoading={loading}\n    >\n      <span>Rest of your page here</span>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={['/posts', '/posts/create']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <RefineMui.CreateButton />\n          </div>\n        ),\n        create: PostCreate,\n      },\n    ]}\n  />,\n)\n")),(0,r.kt)("h3",{id:"breadcrumb"},(0,r.kt)("inlineCode",{parentName:"h3"},"breadcrumb")),(0,r.kt)("p",null,"To customize or disable the breadcrumb, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"breadcrumb")," property. By default it uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"Breadcrumb")," component from ",(0,r.kt)("inlineCode",{parentName:"p"},"@pankod/refine-mui")," package."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/mui/components/mui-breadcrumb"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"Breadcrumb")," documentation for detailed usage. ","\u2192")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"This feature can be managed globally via the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Refine>")," component's ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/components/refine-config/#breadcrumb"},"options"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},"// visible-block-start\nimport { Create, Breadcrumb } from '@pankod/refine-mui'\n\nconst PostCreate: React.FC = () => {\n  return (\n    <Create\n      // highlight-start\n      breadcrumb={\n        <div\n          style={{\n            padding: '3px 6px',\n            border: '2px dashed cornflowerblue',\n          }}\n        >\n          <Breadcrumb />\n        </div>\n      }\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={['/posts', '/posts/create']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <RefineMui.CreateButton />\n          </div>\n        ),\n        create: PostCreate,\n      },\n    ]}\n  />,\n)\n")),(0,r.kt)("h3",{id:"wrapperprops"},(0,r.kt)("inlineCode",{parentName:"h3"},"wrapperProps")),(0,r.kt)("p",null,"If you want to customize the wrapper of the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Create/>")," component, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"wrapperProps")," property."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card/"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"Card")," documentation from Material UI for detailed usage. ","\u2192")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},"// visible-block-start\nimport { Create } from '@pankod/refine-mui'\n\nconst PostCreate: React.FC = () => {\n  const [loading, setLoading] = React.useState(true)\n\n  return (\n    <Create\n      // highlight-start\n      wrapperProps={{\n        sx: {\n          backgroundColor: 'lightsteelblue',\n        },\n      }}\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={['/posts', '/posts/create']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <RefineMui.CreateButton />\n          </div>\n        ),\n        create: PostCreate,\n      },\n    ]}\n  />,\n)\n")),(0,r.kt)("h3",{id:"headerprops"},(0,r.kt)("inlineCode",{parentName:"h3"},"headerProps")),(0,r.kt)("p",null,"If you want to customize the header of the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Create/>")," component, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"headerProps")," property."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card-header/"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"CardHeader")," documentation from Material UI for detailed usage. ","\u2192")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},"// visible-block-start\nimport { Create } from '@pankod/refine-mui'\n\nconst PostCreate: React.FC = () => {\n  const [loading, setLoading] = React.useState(true)\n\n  return (\n    <Create\n      // highlight-start\n      headerProps={{\n        sx: {\n          backgroundColor: 'lightsteelblue',\n        },\n      }}\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={['/posts', '/posts/create']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <RefineMui.CreateButton />\n          </div>\n        ),\n        create: PostCreate,\n      },\n    ]}\n  />,\n)\n")),(0,r.kt)("h3",{id:"contentprops"},(0,r.kt)("inlineCode",{parentName:"h3"},"contentProps")),(0,r.kt)("p",null,"If you want to customize the content of the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Create/>")," component, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"contentProps")," property."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card-content/"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"CardContent")," documentation from Material UI for detailed usage. ","\u2192")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},"// visible-block-start\nimport { Create } from '@pankod/refine-mui'\n\nconst PostCreate: React.FC = () => {\n  const [loading, setLoading] = React.useState(true)\n\n  return (\n    <Create\n      // highlight-start\n      contentProps={{\n        sx: {\n          backgroundColor: 'lightsteelblue',\n        },\n      }}\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={['/posts', '/posts/create']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <RefineMui.CreateButton />\n          </div>\n        ),\n        create: PostCreate,\n      },\n    ]}\n  />,\n)\n")),(0,r.kt)("h3",{id:"headerbuttons"},(0,r.kt)("inlineCode",{parentName:"h3"},"headerButtons")),(0,r.kt)("p",null,"You can customize the buttons at the header by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"headerButtons")," property. It accepts ",(0,r.kt)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,r.kt)("inlineCode",{parentName:"p"},"({ defaultButtons }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},"// visible-block-start\nimport { Create, Button } from '@pankod/refine-mui'\n\nconst PostCreate: React.FC = () => {\n  const [loading, setLoading] = React.useState(true)\n\n  return (\n    <Create\n      // highlight-start\n      headerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button type=\"primary\">Custom Button</Button>\n        </>\n      )}\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={['/posts', '/posts/create']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <RefineMui.CreateButton />\n          </div>\n        ),\n        create: PostCreate,\n      },\n    ]}\n  />,\n)\n")),(0,r.kt)("h3",{id:"headerbuttonprops"},(0,r.kt)("inlineCode",{parentName:"h3"},"headerButtonProps")),(0,r.kt)("p",null,"You can customize the wrapper element of the buttons at the header by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"headerButtonProps")," property."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/box/"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"Box")," documentation from Material UI for detailed usage. ","\u2192")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},"// visible-block-start\nimport { Create, Button } from '@pankod/refine-mui'\n\nconst PostCreate: React.FC = () => {\n  const [loading, setLoading] = React.useState(true)\n\n  return (\n    <Create\n      // highlight-start\n      headerButtonProps={{\n        sx: {\n          backgroundColor: 'lightsteelblue',\n        },\n      }}\n      // highlight-end\n      headerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button type=\"primary\">Custom Button</Button>\n        </>\n      )}\n    >\n      <span>Rest of your page here</span>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={['/posts', '/posts/create']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <RefineMui.CreateButton />\n          </div>\n        ),\n        create: PostCreate,\n      },\n    ]}\n  />,\n)\n")),(0,r.kt)("h3",{id:"footerbuttons"},(0,r.kt)("inlineCode",{parentName:"h3"},"footerButtons")),(0,r.kt)("p",null,"You can customize the buttons at the footer by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"footerButtons")," property. It accepts ",(0,r.kt)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,r.kt)("inlineCode",{parentName:"p"},"({ defaultButtons }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},"// visible-block-start\nimport { Create, Button } from '@pankod/refine-mui'\n\nconst PostCreate: React.FC = () => {\n  const [loading, setLoading] = React.useState(true)\n\n  return (\n    <Create\n      // highlight-start\n      footerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button type=\"primary\">Custom Button</Button>\n        </>\n      )}\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={['/posts', '/posts/create']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <RefineMui.CreateButton />\n          </div>\n        ),\n        create: PostCreate,\n      },\n    ]}\n  />,\n)\n")),(0,r.kt)("h3",{id:"footerbuttonprops"},(0,r.kt)("inlineCode",{parentName:"h3"},"footerButtonProps")),(0,r.kt)("p",null,"You can customize the wrapper element of the buttons at the footer by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"footerButtonProps")," property."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card-actions/"},"Refer to the ",(0,r.kt)("inlineCode",{parentName:"a"},"CardActions")," documentation from Material UI for detailed usage. ","\u2192")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},"// visible-block-start\nimport { Create, Button } from '@pankod/refine-mui'\n\nconst PostCreate: React.FC = () => {\n  const [loading, setLoading] = React.useState(true)\n\n  return (\n    <Create\n      // highlight-start\n      footerButtonProps={{\n        sx: {\n          backgroundColor: 'lightsteelblue',\n        },\n      }}\n      // highlight-end\n      footerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button type=\"primary\">Custom Button</Button>\n        </>\n      )}\n    >\n      <span>Rest of your page here</span>\n    </Create>\n  )\n}\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={['/posts', '/posts/create']}\n    resources={[\n      {\n        name: 'posts',\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <RefineMui.CreateButton />\n          </div>\n        ),\n        create: PostCreate,\n      },\n    ]}\n  />,\n)\n")),(0,r.kt)("h3",{id:"actionbuttons"},(0,r.kt)("del",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"del"},"actionButtons"))),(0,r.kt)("admonition",{title:"Deprecated",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"headerButtons")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"footerButtons")," instead.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<Create>")," uses the Material UI ",(0,r.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card-actions/#main-content"},(0,r.kt)("inlineCode",{parentName:"a"},"<CardActions>"))," component. The children of the ",(0,r.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card-actions/#main-content"},(0,r.kt)("inlineCode",{parentName:"a"},"<CardActions>"))," component shows ",(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/mui/components/buttons/save-button"},(0,r.kt)("inlineCode",{parentName:"a"},"<SaveButton>"))," and ",(0,r.kt)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/mui/components/buttons/delete-button"},(0,r.kt)("inlineCode",{parentName:"a"},"<DeleteButton>"))," based on your resource definition in the",(0,r.kt)("inlineCode",{parentName:"p"},"resources")," property you pass to ",(0,r.kt)("inlineCode",{parentName:"p"},"<Refine>"),". If you want to use other things instead of these buttons, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"actionButton")," property like the code below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/create.tsx"',title:'"src/pages/posts/create.tsx"'},"// highlight-next-line\nimport { Create, Button } from '@pankod/refine-mui'\n\nexport const CreatePage: React.FC = () => {\n  return (\n    <Create\n      // highlight-start\n      actionButtons={\n        <>\n          <Button>Custom Button 1</Button>\n          <Button>Custom Button 2</Button>\n        </>\n      }\n      // highlight-end\n    >\n      ...\n    </Create>\n  )\n}\n")),(0,r.kt)("h3",{id:"cardprops"},(0,r.kt)("del",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"del"},"cardProps"))),(0,r.kt)("admonition",{title:"Deprecated",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"wrapperProps")," instead.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<Create>")," uses the Material UI ",(0,r.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/react-card/#main-content"},(0,r.kt)("inlineCode",{parentName:"a"},"<Card>"))," components so you can customize with the props of ",(0,r.kt)("inlineCode",{parentName:"p"},"cardProps"),"."),(0,r.kt)("h3",{id:"cardheaderprops"},(0,r.kt)("del",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"del"},"cardHeaderProps"))),(0,r.kt)("admonition",{title:"Deprecated",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"headerProps")," instead.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<Create>")," uses the Material UI ",(0,r.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card-header/"},(0,r.kt)("inlineCode",{parentName:"a"},"<CardHeader>"))," components so you can customize with the props of ",(0,r.kt)("inlineCode",{parentName:"p"},"cardHeaderProps"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"// highlight-next-line\nimport { Create, Typography } from '@pankod/refine-mui'\n\nexport const CreatePage: React.FC = () => {\n  return (\n    <Create\n      // highlight-start\n      cardHeaderProps={{\n        title: <Typography variant=\"h5\">Custom Title</Typography>,\n      }}\n      // highlight-end\n    >\n      ...\n    </Create>\n  )\n}\n")),(0,r.kt)("h3",{id:"cardcontentprops"},(0,r.kt)("del",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"del"},"cardContentProps"))),(0,r.kt)("admonition",{title:"Deprecated",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"contentProps")," instead.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<Create>")," uses the Material UI ",(0,r.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card-content/"},(0,r.kt)("inlineCode",{parentName:"a"},"<CardContent>"))," components so you can customize with the props of ",(0,r.kt)("inlineCode",{parentName:"p"},"cardContentProps"),"."),(0,r.kt)("h3",{id:"cardactionsprops"},(0,r.kt)("del",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"del"},"cardActionsProps"))),(0,r.kt)("admonition",{title:"Deprecated",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"headerButtonProps")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"footerButtonProps")," instead.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<Create>")," uses the Material UI ",(0,r.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card-actions/"},(0,r.kt)("inlineCode",{parentName:"a"},"<CardActions>"))," components so you can customize with the props of ",(0,r.kt)("inlineCode",{parentName:"p"},"cardActionsProps"),"."),(0,r.kt)("h2",{id:"api-reference"},"API Reference"),(0,r.kt)("h3",{id:"properties-1"},"Properties"),(0,r.kt)(d,{module:"@pankod/refine-mui/Create","goBack-default":"`<ArrowLeft />`",mdxType:"PropsTable"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live shared",live:!0,shared:!0},"const SampleList = () => {\n  const { dataGridProps } = RefineMui.useDataGrid()\n\n  const { data: categoryData, isLoading: categoryIsLoading } =\n    RefineCore.useMany({\n      resource: 'categories',\n      ids: dataGridProps?.rows?.map((item: any) => item?.category?.id) ?? [],\n      queryOptions: {\n        enabled: !!dataGridProps?.rows,\n      },\n    })\n\n  const columns = React.useMemo<GridColumns<any>>(\n    () => [\n      {\n        field: 'id',\n        headerName: 'Id',\n        type: 'number',\n        minWidth: 50,\n      },\n      {\n        field: 'title',\n        headerName: 'Title',\n        minWidth: 200,\n      },\n      {\n        field: 'category',\n        headerName: 'Category',\n        valueGetter: ({ row }) => {\n          const value = row?.category?.id\n\n          return value\n        },\n        minWidth: 300,\n        renderCell: function render({ value }) {\n          return categoryIsLoading ? (\n            <>Loading...</>\n          ) : (\n            categoryData?.data?.find((item) => item.id === value)?.title\n          )\n        },\n      },\n      {\n        field: 'createdAt',\n        headerName: 'Created At',\n        minWidth: 250,\n        renderCell: function render({ value }) {\n          return <RefineMui.DateField value={value} />\n        },\n      },\n    ],\n    [categoryData?.data],\n  )\n\n  return (\n    <RefineMui.List>\n      <RefineMui.DataGrid {...dataGridProps} columns={columns} autoHeight />\n    </RefineMui.List>\n  )\n}\n\nconst Wrapper = ({ children }) => {\n  return (\n    <RefineMui.ThemeProvider theme={RefineMui.LightTheme}>\n      <RefineMui.CssBaseline />\n      <RefineMui.GlobalStyles\n        styles={{ html: { WebkitFontSmoothing: 'auto' } }}\n      />\n      {children}\n    </RefineMui.ThemeProvider>\n  )\n}\n")))}h.isMDXComponent=!0}}]);