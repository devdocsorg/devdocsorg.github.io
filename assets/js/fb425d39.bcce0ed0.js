"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[98075],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>v});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),u=s(n),c=i,v=u["".concat(p,".").concat(c)]||u[c]||m[c]||o;return n?r.createElement(v,a(a({ref:t},l),{},{components:n})):r.createElement(v,a({ref:t},l))}));function v(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=c;var d={};for(var p in t)hasOwnProperty.call(t,p)&&(d[p]=t[p]);d.originalType=e,d[u]="string"==typeof e?e:i,a[1]=d;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},54601:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>v,frontMatter:()=>o,metadata:()=>d,toc:()=>s});var r=n(87462),i=(n(67294),n(3905));const o={id:"edit",title:"Edit",swizzle:!0},a=void 0,d={unversionedId:"api-reference/mantine/components/basic-views/edit",id:"api-reference/mantine/components/basic-views/edit",title:"Edit",description:"`` provides us a layout for displaying the page. It does not contain any logic but adds extra functionalities like a refresh button.",source:"@site/docs/api-reference/mantine/components/basic-views/edit.md",sourceDirName:"api-reference/mantine/components/basic-views",slug:"/api-reference/mantine/components/basic-views/edit",permalink:"/docs/api-reference/mantine/components/basic-views/edit",draft:!1,editUrl:"https://github.com/devdocsorg/devdocs/tree/master/docs/api-reference/mantine/components/basic-views/edit.md",tags:[],version:"current",lastUpdatedBy:"ashishdevdocs",lastUpdatedAt:1684241945,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{id:"edit",title:"Edit",swizzle:!0},sidebar:"someSidebar",previous:{title:"Create",permalink:"/docs/api-reference/mantine/components/basic-views/create"},next:{title:"List",permalink:"/docs/api-reference/mantine/components/basic-views/list"}},p={},s=[{value:"Properties",id:"properties",level:2},{value:"<code>title</code>",id:"title",level:3},{value:"<code>saveButtonProps</code>",id:"savebuttonprops",level:3},{value:"<code>canDelete</code> and <code>deleteButtonProps</code>",id:"candelete-and-deletebuttonprops",level:3},{value:"<code>resource</code>",id:"resource",level:3},{value:"<code>recordItemId</code>",id:"recorditemid",level:3},{value:"<code>mutationMode</code>",id:"mutationmode",level:3},{value:"<code>dataProviderName</code>",id:"dataprovidername",level:3},{value:"<code>goBack</code>",id:"goback",level:3},{value:"<code>isLoading</code>",id:"isloading",level:3},{value:"<code>breadcrumb</code>",id:"breadcrumb",level:3},{value:"<code>wrapperProps</code>",id:"wrapperprops",level:3},{value:"<code>headerProps</code>",id:"headerprops",level:3},{value:"<code>contentProps</code>",id:"contentprops",level:3},{value:"<code>headerButtons</code>",id:"headerbuttons",level:3},{value:"<code>headerButtonProps</code>",id:"headerbuttonprops",level:3},{value:"<code>footerButtons</code>",id:"footerbuttons",level:3},{value:"<code>footerButtonProps</code>",id:"footerbuttonprops",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Props",id:"props",level:3}],l=(u="PropsTable",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var u;const m={toc:s},c="wrapper";function v(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live shared",live:!0,shared:!0},'window.__refineAuthStatus = false;\n\nsetRefineProps({\n    notificationProvider: RefineMantine.notificationProvider,\n    Layout: RefineMantine.Layout,\n    Sider: () => null,\n});\n\nconst Wrapper = ({ children }) => {\n    return (\n        <MantineCore.MantineProvider\n            theme={RefineMantine.LightTheme}\n            withNormalizeCSS\n            withGlobalStyles\n        >\n            <MantineCore.Global\n                styles={{ body: { WebkitFontSmoothing: "auto" } }}\n            />\n            <MantineNotifications.NotificationsProvider position="top-right">\n                {children}\n            </MantineNotifications.NotificationsProvider>\n        </MantineCore.MantineProvider>\n    );\n};\n\ninterface ICategory {\n    id: number;\n    title: string;\n}\n\ninterface IPost {\n    id: number;\n    title: string;\n    content: string;\n    status: "published" | "draft" | "rejected";\n    category: { id: number };\n}\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"<Edit>")," provides us a layout for displaying the page. It does not contain any logic but adds extra functionalities like a refresh button."),(0,i.kt)("p",null,"We will show what ",(0,i.kt)("inlineCode",{parentName:"p"},"<Edit>")," does using properties with examples."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=420px hideCode",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"420px",hideCode:!0},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@refinedev/core";\nimport { EditButton } from "@refinedev/mantine";\nimport routerProvider from "@refinedev/react-router-v6/legacy";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Edit, useForm, useSelect } from "@refinedev/mantine";\nimport { Select, TextInput } from "@mantine/core";\n\nconst PostEdit: React.FC = () => {\n    const {\n        saveButtonProps,\n        getInputProps,\n        refineCore: { queryResult },\n    } = useForm<IPost>({\n        initialValues: {\n            title: "",\n            status: "",\n            category: {\n                id: "",\n            },\n        },\n        validate: {\n            title: (value) => (value.length < 2 ? "Too short title" : null),\n            status: (value) =>\n                value.length <= 0 ? "Status is required" : null,\n            category: {\n                id: (value) =>\n                    value.length <= 0 ? "Category is required" : null,\n            },\n        },\n    });\n\n    const postData = queryResult?.data?.data;\n    const { selectProps } = useSelect<ICategory>({\n        resource: "categories",\n        defaultValue: postData?.category.id,\n    });\n\n    return (\n        <Edit saveButtonProps={saveButtonProps}>\n            <form>\n                <TextInput\n                    mt={8}\n                    label="Title"\n                    placeholder="Title"\n                    {...getInputProps("title")}\n                />\n                <Select\n                    mt={8}\n                    label="Status"\n                    placeholder="Pick one"\n                    {...getInputProps("status")}\n                    data={[\n                        { label: "Published", value: "published" },\n                        { label: "Draft", value: "draft" },\n                        { label: "Rejected", value: "rejected" },\n                    ]}\n                />\n                <Select\n                    mt={8}\n                    label="Category"\n                    placeholder="Pick one"\n                    {...getInputProps("category.id")}\n                    {...selectProps}\n                />\n            </form>\n        </Edit>\n    );\n};\n// visible-block-end\n\nconst App = () => {\n    return (\n        <Refine\n            legacyRouterProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            resources={[\n                {\n                    name: "posts",\n                    edit: PostEdit,\n                    list: () => (\n                        <div>\n                            <p>This page is empty.</p>\n                            <EditButton recordItemId="123">\n                                Edit Item 123\n                            </EditButton>\n                        </div>\n                    ),\n                },\n            ]}\n        />\n    );\n};\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,i.kt)("admonition",{title:"Swizzle",type:"info-tip"},(0,i.kt)("p",{parentName:"admonition"},"You can swizzle this component to customize it with the ",(0,i.kt)("a",{parentName:"p",href:"/docs/packages/documentation/cli"},(0,i.kt)("strong",{parentName:"a"},"refine CLI")))),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("h3",{id:"title"},(0,i.kt)("inlineCode",{parentName:"h3"},"title")),(0,i.kt)("p",null,"It allows adding titles inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"<Edit>"),' component. if you don\'t pass title props it uses the "Edit" prefix and singular resource name by default. For example, for the "posts" resource, it will be "Edit post".'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@refinedev/core";\nimport { EditButton } from "@refinedev/mantine";\nimport routerProvider from "@refinedev/react-router-v6/legacy";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\nimport { Title } from "@mantine/core";\n\nconst PostEdit: React.FC = () => {\n    return (\n        /* highlight-next-line */\n        <Edit title={<Title order={3}>Custom Title</Title>}>\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nconst App = () => {\n    return (\n        <Refine\n            legacyRouterProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            resources={[\n                {\n                    name: "posts",\n                    edit: PostEdit,\n                    list: () => (\n                        <div>\n                            <p>This page is empty.</p>\n                            <EditButton recordItemId="123">\n                                Edit Item 123\n                            </EditButton>\n                        </div>\n                    ),\n                },\n            ]}\n        />\n    );\n};\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,i.kt)("h3",{id:"savebuttonprops"},(0,i.kt)("inlineCode",{parentName:"h3"},"saveButtonProps")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"<Edit>")," component has a save button by default. If you want to customize this button you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"saveButtonProps")," property like the code below."),(0,i.kt)("p",null,"Clicking on the save button will submit your form."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/api-reference/mantine/components/buttons/save-button"},"Refer to the ",(0,i.kt)("inlineCode",{parentName:"a"},"<SaveButton>")," documentation for detailed usage. ","\u2192")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@refinedev/core";\nimport { EditButton } from "@refinedev/mantine";\nimport routerProvider from "@refinedev/react-router-v6/legacy";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\n\nconst PostEdit: React.FC = () => {\n    return (\n        /* highlight-next-line */\n        <Edit saveButtonProps={{ size: "xs" }}>\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nconst App = () => {\n    return (\n        <Refine\n            legacyRouterProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            resources={[\n                {\n                    name: "posts",\n                    edit: PostEdit,\n                    list: () => (\n                        <div>\n                            <p>This page is empty.</p>\n                            <EditButton recordItemId="123">\n                                Edit Item 123\n                            </EditButton>\n                        </div>\n                    ),\n                },\n            ]}\n        />\n    );\n};\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,i.kt)("h3",{id:"candelete-and-deletebuttonprops"},(0,i.kt)("inlineCode",{parentName:"h3"},"canDelete")," and ",(0,i.kt)("inlineCode",{parentName:"h3"},"deleteButtonProps")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"canDelete")," allows us to add the delete button inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"<Edit>")," component. If the resource has the ",(0,i.kt)("inlineCode",{parentName:"p"},"canDelete")," property,refine adds the delete button by default. If you want to customize this button you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"deleteButtonProps")," property like the code below."),(0,i.kt)("p",null,"When clicked on, the delete button executes the ",(0,i.kt)("inlineCode",{parentName:"p"},"useDelete")," method provided by the ",(0,i.kt)("inlineCode",{parentName:"p"},"dataProvider"),"."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/api-reference/mantine/components/buttons/delete-button"},"Refer to the ",(0,i.kt)("inlineCode",{parentName:"a"},"<DeleteButton>")," documentation for detailed usage. ","\u2192")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@refinedev/core";\nimport { EditButton } from "@refinedev/mantine";\nimport routerProvider from "@refinedev/react-router-v6/legacy";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\nimport { usePermissions } from "@refinedev/core";\n\nconst PostEdit: React.FC = () => {\n    const { data: permissionsData } = usePermissions();\n    return (\n        <Edit\n            /* highlight-start */\n            canDelete={permissionsData?.includes("admin")}\n            deleteButtonProps={{ size: "xs" }}\n            /* highlight-end */\n            saveButtonProps={{ variant: "outline", size: "xs" }}\n        >\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nconst App = () => {\n    const simpleRestDataProvider = dataProvider(\n        "https://api.fake-rest.refine.dev",\n    );\n\n    const customDataProvider = {\n        ...simpleRestDataProvider,\n        deleteOne: async ({ resource, id, variables }) => {\n            return {\n                data: {},\n            };\n        },\n    };\n\n    window.__refineAuthStatus = true;\n\n    const authProvider = {\n        login: async () => {\n            return {\n                success: true,\n                redirectTo: "/",\n            };\n        },\n        register: async () => {\n            return {\n                success: true,\n            };\n        },\n        forgotPassword: async () => {\n            return {\n                success: true,\n            };\n        },\n        updatePassword: async () => {\n            return {\n                success: true,\n            };\n        },\n        logout: async () => {\n            window.__refineAuthStatus = false;\n            return {\n                success: true,\n                redirectTo: "/",\n            };\n        },\n        check: async () => ({\n            authenticated: window.__refineAuthStatus ? true : false,\n            redirectTo: window.__refineAuthStatus ? undefined : "/login",\n        }),\n        onError: async (error) => {\n            console.error(error);\n            return { error };\n        },\n        getPermissions: async () => ["admin"],\n        getIdentity: async () => null,\n    };\n\n    return (\n        <Refine\n            legacyRouterProvider={routerProvider}\n            dataProvider={customDataProvider}\n            authProvider={authProvider}\n            resources={[\n                {\n                    name: "posts",\n                    edit: PostEdit,\n                    list: () => (\n                        <div>\n                            <p>This page is empty.</p>\n                            <EditButton recordItemId="123">\n                                Edit Item 123\n                            </EditButton>\n                        </div>\n                    ),\n                },\n            ]}\n        />\n    );\n};\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/auth/usePermissions"},"Refer to the ",(0,i.kt)("inlineCode",{parentName:"a"},"usePermission")," documentation for detailed usage. ","\u2192")),(0,i.kt)("h3",{id:"resource"},(0,i.kt)("inlineCode",{parentName:"h3"},"resource")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"<Edit>")," component reads the ",(0,i.kt)("inlineCode",{parentName:"p"},"resource")," information from the route by default. If you want to use a custom resource for the ",(0,i.kt)("inlineCode",{parentName:"p"},"<Edit>")," component, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"resource")," prop."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/custom/23 previewHeight=280px",live:!0,url:"http://localhost:3000/custom/23",previewHeight:"280px"},'setInitialRoutes(["/custom/23"]);\n\nimport { Refine } from "@refinedev/core";\nimport { Layout } from "@refinedev/mantine";\nimport routerProvider from "@refinedev/react-router-v6/legacy";\nimport dataProvider from "@refinedev/simple-rest";\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\n\nconst CustomPage: React.FC = () => {\n    return (\n        /* highlight-next-line */\n        <Edit resource="categories">\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nconst App: React.FC = () => {\n    return (\n        <Refine\n            legacyRouterProvider={{\n                ...routerProvider,\n                // highlight-start\n                routes: [\n                    {\n                        element: <CustomPage />,\n                        path: "/custom/:id",\n                    },\n                ],\n                // highlight-end\n            }}\n            Layout={Layout}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            resources={[{ name: "posts" }]}\n        />\n    );\n};\n\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,i.kt)("h3",{id:"recorditemid"},(0,i.kt)("inlineCode",{parentName:"h3"},"recordItemId")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"<Edit>")," component reads the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," information from the route by default. ",(0,i.kt)("inlineCode",{parentName:"p"},"recordItemId")," is used when it cannot read from the URL(when used on a custom page, modal or drawer)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=350px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"350px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@refinedev/core";\nimport { EditButton } from "@refinedev/mantine";\nimport routerProvider from "@refinedev/react-router-v6/legacy";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Edit, useModalForm } from "@refinedev/mantine";\nimport { Modal, Button } from "@mantine/core";\n\nconst PostEdit: React.FC = () => {\n    const {\n        modal: { visible, close, show },\n        id,\n    } = useModalForm({\n        action: "edit",\n    });\n\n    return (\n        <div>\n            <Button onClick={() => show()}>Edit Button</Button>\n            <Modal\n                opened={visible}\n                onClose={close}\n                // hide-start\n                size={700}\n                withCloseButton={false}\n                // hide-end\n            >\n                {/* highlight-next-line */}\n                <Edit recordItemId={id}>\n                    <p>Rest of your page here</p>\n                </Edit>\n            </Modal>\n        </div>\n    );\n};\n// visible-block-end\n\nconst App = () => {\n    return (\n        <Refine\n            legacyRouterProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            resources={[\n                {\n                    name: "posts",\n                    edit: PostEdit,\n                    list: () => (\n                        <div>\n                            <p>This page is empty.</p>\n                            <EditButton recordItemId="23">\n                                Edit Item 23\n                            </EditButton>\n                        </div>\n                    ),\n                },\n            ]}\n        />\n    );\n};\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"<Edit>")," component needs the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," information for the ",(0,i.kt)("inlineCode",{parentName:"p"},"<RefreshButton>")," to work properly.")),(0,i.kt)("h3",{id:"mutationmode"},(0,i.kt)("inlineCode",{parentName:"h3"},"mutationMode")),(0,i.kt)("p",null,"Determines which mode mutation will have while executing ",(0,i.kt)("inlineCode",{parentName:"p"},"<DeleteButton>"),"."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/advanced-tutorials/mutation-mode"},"Refer to the mutation mode docs for further information. ","\u2192")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@refinedev/core";\nimport { EditButton } from "@refinedev/mantine";\nimport routerProvider from "@refinedev/react-router-v6/legacy";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Edit, useForm } from "@refinedev/mantine";\nimport { TextInput } from "@mantine/core";\n\nconst PostEdit: React.FC = () => {\n    const { saveButtonProps, getInputProps } = useForm<IPost>({\n        initialValues: {\n            title: "",\n        },\n        validate: {\n            title: (value) => (value.length < 2 ? "Too short title" : null),\n        },\n    });\n\n    return (\n        <Edit\n            //highlight-next-line\n            mutationMode="undoable"\n            canDelete\n            saveButtonProps={saveButtonProps}\n        >\n            <form>\n                <TextInput\n                    mt={8}\n                    label="Title"\n                    placeholder="Title"\n                    {...getInputProps("title")}\n                />\n            </form>\n        </Edit>\n    );\n};\n// visible-block-end\n\nconst App = () => {\n    return (\n        <Refine\n            legacyRouterProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            resources={[\n                {\n                    name: "posts",\n                    edit: PostEdit,\n                    list: () => (\n                        <div>\n                            <p>This page is empty.</p>\n                            <EditButton recordItemId="123">\n                                Edit Item 123\n                            </EditButton>\n                        </div>\n                    ),\n                },\n            ]}\n        />\n    );\n};\n\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,i.kt)("h3",{id:"dataprovidername"},(0,i.kt)("inlineCode",{parentName:"h3"},"dataProviderName")),(0,i.kt)("p",null,"If not specified, Refine will use the default data provider. If you have multiple data providers and want to use a different one, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"dataProviderName")," property."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { Edit } from "@refinedev/mantine";\n\n// highlight-start\nconst PostEdit = () => {\n    return <Edit dataProviderName="other">...</Edit>;\n};\n// highlight-end\n\nexport const App: React.FC = () => {\n    return (\n        <Refine\n            // highlight-start\n            dataProvider={{\n                default: dataProvider("https://api.fake-rest.refine.dev/"),\n                other: dataProvider("https://other-api.fake-rest.refine.dev/"),\n            }}\n            // highlight-end\n        >\n            {/* ... */}\n        </Refine>\n    );\n};\n')),(0,i.kt)("h3",{id:"goback"},(0,i.kt)("inlineCode",{parentName:"h3"},"goBack")),(0,i.kt)("p",null,"To customize the back button or to disable it, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"goBack")," property. You can pass ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," to hide the back button."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@refinedev/core";\nimport { EditButton } from "@refinedev/mantine";\nimport routerProvider from "@refinedev/react-router-v6/legacy";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\n\nconst PostEdit: React.FC = () => {\n    return (\n        /* highlight-next-line */\n        <Edit goBack="\ud83d\ude0a">\n            <p>Rest of your page here 2</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nconst App = () => {\n    return (\n        <Refine\n            legacyRouterProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            resources={[\n                {\n                    name: "posts",\n                    edit: PostEdit,\n                    list: () => (\n                        <div>\n                            <p>This page is empty.</p>\n                            <EditButton recordItemId="123">\n                                Edit Item 123\n                            </EditButton>\n                        </div>\n                    ),\n                },\n            ]}\n        />\n    );\n};\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,i.kt)("h3",{id:"isloading"},(0,i.kt)("inlineCode",{parentName:"h3"},"isLoading")),(0,i.kt)("p",null,"To toggle the loading state of the ",(0,i.kt)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"isLoading")," property."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@refinedev/core";\nimport { EditButton } from "@refinedev/mantine";\nimport routerProvider from "@refinedev/react-router-v6/legacy";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\n\nconst PostEdit: React.FC = () => {\n    return (\n        /* highlight-next-line */\n        <Edit isLoading={true}>\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nconst App = () => {\n    return (\n        <Refine\n            legacyRouterProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            resources={[\n                {\n                    name: "posts",\n                    edit: PostEdit,\n                    list: () => (\n                        <div>\n                            <p>This page is empty.</p>\n                            <EditButton recordItemId="123">\n                                Edit Item 123\n                            </EditButton>\n                        </div>\n                    ),\n                },\n            ]}\n        />\n    );\n};\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,i.kt)("h3",{id:"breadcrumb"},(0,i.kt)("inlineCode",{parentName:"h3"},"breadcrumb")),(0,i.kt)("p",null,"To customize or disable the breadcrumb, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"breadcrumb")," property. By default it uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"Breadcrumb")," component from ",(0,i.kt)("inlineCode",{parentName:"p"},"@refinedev/mantine")," package."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/api-reference/mantine/components/breadcrumb"},"Refer to the ",(0,i.kt)("inlineCode",{parentName:"a"},"Breadcrumb")," documentation for detailed usage. ","\u2192")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"This feature can be managed globally via the ",(0,i.kt)("inlineCode",{parentName:"p"},"<Refine>")," component's ",(0,i.kt)("a",{parentName:"p",href:"/docs/api-reference/core/components/refine-config/#breadcrumb"},"options"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@refinedev/core";\nimport { EditButton } from "@refinedev/mantine";\nimport routerProvider from "@refinedev/react-router-v6/legacy";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Edit, Breadcrumb } from "@refinedev/mantine";\n\nconst PostEdit: React.FC = () => {\n    return (\n        <Edit\n            // highlight-start\n            breadcrumb={\n                <div\n                    style={{\n                        padding: "3px 6px",\n                        border: "2px dashed cornflowerblue",\n                    }}\n                >\n                    <Breadcrumb />\n                </div>\n            }\n            // highlight-end\n        >\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nconst App = () => {\n    return (\n        <Refine\n            legacyRouterProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            resources={[\n                {\n                    name: "posts",\n                    edit: PostEdit,\n                    list: () => (\n                        <div>\n                            <p>This page is empty.</p>\n                            <EditButton recordItemId="123">\n                                Edit Item 123\n                            </EditButton>\n                        </div>\n                    ),\n                },\n            ]}\n        />\n    );\n};\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,i.kt)("h3",{id:"wrapperprops"},(0,i.kt)("inlineCode",{parentName:"h3"},"wrapperProps")),(0,i.kt)("p",null,"If you want to customize the wrapper of the ",(0,i.kt)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"wrapperProps")," property. For ",(0,i.kt)("inlineCode",{parentName:"p"},"@refinedev/mantine")," wrapper element is ",(0,i.kt)("inlineCode",{parentName:"p"},"<Card>"),"s and ",(0,i.kt)("inlineCode",{parentName:"p"},"wrapperProps")," can get every attribute that ",(0,i.kt)("inlineCode",{parentName:"p"},"<Card>")," can get."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://mantine.dev/core/card/"},"Refer to the ",(0,i.kt)("inlineCode",{parentName:"a"},"Card")," documentation from Mantine for detailed usage. ","\u2192")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@refinedev/core";\nimport { EditButton } from "@refinedev/mantine";\nimport routerProvider from "@refinedev/react-router-v6/legacy";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\n\nconst PostEdit: React.FC = () => {\n    return (\n        <Edit\n            // highlight-start\n            wrapperProps={{\n                style: {\n                    border: "2px dashed cornflowerblue",\n                    padding: "16px",\n                },\n            }}\n            // highlight-end\n        >\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nconst App = () => {\n    return (\n        <Refine\n            legacyRouterProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            resources={[\n                {\n                    name: "posts",\n                    edit: PostEdit,\n                    list: () => (\n                        <div>\n                            <p>This page is empty.</p>\n                            <EditButton recordItemId="123">\n                                Edit Item 123\n                            </EditButton>\n                        </div>\n                    ),\n                },\n            ]}\n        />\n    );\n};\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,i.kt)("h3",{id:"headerprops"},(0,i.kt)("inlineCode",{parentName:"h3"},"headerProps")),(0,i.kt)("p",null,"If you want to customize the header of the ",(0,i.kt)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"headerProps")," property."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://mantine.dev/core/group/"},"Refer to the ",(0,i.kt)("inlineCode",{parentName:"a"},"Group")," documentation from Mantine for detailed usage. ","\u2192")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@refinedev/core";\nimport { EditButton } from "@refinedev/mantine";\nimport routerProvider from "@refinedev/react-router-v6/legacy";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\n\nconst PostEdit: React.FC = () => {\n    return (\n        <Edit\n            // highlight-start\n            headerProps={{\n                style: {\n                    border: "2px dashed cornflowerblue",\n                    padding: "16px",\n                },\n            }}\n            // highlight-end\n        >\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nconst App = () => {\n    return (\n        <Refine\n            legacyRouterProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            resources={[\n                {\n                    name: "posts",\n                    edit: PostEdit,\n                    list: () => (\n                        <div>\n                            <p>This page is empty.</p>\n                            <EditButton recordItemId="123">\n                                Edit Item 123\n                            </EditButton>\n                        </div>\n                    ),\n                },\n            ]}\n        />\n    );\n};\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,i.kt)("h3",{id:"contentprops"},(0,i.kt)("inlineCode",{parentName:"h3"},"contentProps")),(0,i.kt)("p",null,"If you want to customize the content of the ",(0,i.kt)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"contentProps")," property."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://mantine.dev/core/box/"},"Refer to the ",(0,i.kt)("inlineCode",{parentName:"a"},"Box")," documentation from Mantine for detailed usage. ","\u2192")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@refinedev/core";\nimport { EditButton } from "@refinedev/mantine";\nimport routerProvider from "@refinedev/react-router-v6/legacy";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\n\nconst PostEdit: React.FC = () => {\n    return (\n        <Edit\n            // highlight-start\n            contentProps={{\n                style: {\n                    border: "2px dashed cornflowerblue",\n                    padding: "16px",\n                },\n            }}\n            // highlight-end\n        >\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nconst App = () => {\n    return (\n        <Refine\n            legacyRouterProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            resources={[\n                {\n                    name: "posts",\n                    edit: PostEdit,\n                    list: () => (\n                        <div>\n                            <p>This page is empty.</p>\n                            <EditButton recordItemId="123">\n                                Edit Item 123\n                            </EditButton>\n                        </div>\n                    ),\n                },\n            ]}\n        />\n    );\n};\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,i.kt)("h3",{id:"headerbuttons"},(0,i.kt)("inlineCode",{parentName:"h3"},"headerButtons")),(0,i.kt)("p",null,"You can customize the buttons at the header by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"headerButtons")," property. It accepts ",(0,i.kt)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,i.kt)("inlineCode",{parentName:"p"},"({ defaultButtons }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@refinedev/core";\nimport { EditButton } from "@refinedev/mantine";\nimport routerProvider from "@refinedev/react-router-v6/legacy";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\nimport { Button } from "@mantine/core";\n\nconst PostEdit: React.FC = () => {\n    return (\n        <Edit\n            // highlight-start\n            headerButtons={({ defaultButtons }) => (\n                <>\n                    {defaultButtons}\n                    <Button variant="outline" type="primary">\n                        Custom Button\n                    </Button>\n                </>\n            )}\n            // highlight-end\n        >\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nconst App = () => {\n    return (\n        <Refine\n            legacyRouterProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            resources={[\n                {\n                    name: "posts",\n                    edit: PostEdit,\n                    list: () => (\n                        <div>\n                            <p>This page is empty.</p>\n                            <EditButton recordItemId="123">\n                                Edit Item 123\n                            </EditButton>\n                        </div>\n                    ),\n                },\n            ]}\n        />\n    );\n};\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,i.kt)("h3",{id:"headerbuttonprops"},(0,i.kt)("inlineCode",{parentName:"h3"},"headerButtonProps")),(0,i.kt)("p",null,"You can customize the wrapper element of the buttons at the header by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"headerButtonProps")," property."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://mantine.dev/core/group/"},"Refer to the ",(0,i.kt)("inlineCode",{parentName:"a"},"Group")," documentation from Mantine for detailed usage. ","\u2192")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@refinedev/core";\nimport { EditButton } from "@refinedev/mantine";\nimport routerProvider from "@refinedev/react-router-v6/legacy";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\nimport { Modal, Button } from "@mantine/core";\n\nconst PostEdit: React.FC = () => {\n    return (\n        <Edit\n            // highlight-start\n            headerButtonProps={{\n                style: {\n                    border: "2px dashed cornflowerblue",\n                    padding: "16px",\n                },\n            }}\n            // highlight-end\n            headerButtons={\n                <Button variant="outline" type="primary">\n                    Custom Button\n                </Button>\n            }\n        >\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nconst App = () => {\n    return (\n        <Refine\n            legacyRouterProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            resources={[\n                {\n                    name: "posts",\n                    edit: PostEdit,\n                    list: () => (\n                        <div>\n                            <p>This page is empty.</p>\n                            <EditButton recordItemId="123">\n                                Edit Item 123\n                            </EditButton>\n                        </div>\n                    ),\n                },\n            ]}\n        />\n    );\n};\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,i.kt)("h3",{id:"footerbuttons"},(0,i.kt)("inlineCode",{parentName:"h3"},"footerButtons")),(0,i.kt)("p",null,"You can customize the buttons at the footer by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"footerButtons")," property. It accepts ",(0,i.kt)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,i.kt)("inlineCode",{parentName:"p"},"({ defaultButtons }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@refinedev/core";\nimport { EditButton } from "@refinedev/mantine";\nimport routerProvider from "@refinedev/react-router-v6/legacy";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\nimport { Button } from "@mantine/core";\n\nconst PostEdit: React.FC = () => {\n    return (\n        <Edit\n            // highlight-start\n            footerButtons={({ defaultButtons }) => (\n                <>\n                    {defaultButtons}\n                    <Button variant="gradient">Custom Button</Button>\n                </>\n            )}\n            // highlight-end\n        >\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nconst App = () => {\n    return (\n        <Refine\n            legacyRouterProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            resources={[\n                {\n                    name: "posts",\n                    edit: PostEdit,\n                    list: () => (\n                        <div>\n                            <p>This page is empty.</p>\n                            <EditButton recordItemId="123">\n                                Edit Item 123\n                            </EditButton>\n                        </div>\n                    ),\n                },\n            ]}\n        />\n    );\n};\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,i.kt)("h3",{id:"footerbuttonprops"},(0,i.kt)("inlineCode",{parentName:"h3"},"footerButtonProps")),(0,i.kt)("p",null,"You can customize the wrapper element of the buttons at the footer by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"footerButtonProps")," property."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://ant.design/components/space/"},"Refer to the ",(0,i.kt)("inlineCode",{parentName:"a"},"Space")," documentation from Ant Design for detailed usage. ","\u2192")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@refinedev/core";\nimport { EditButton } from "@refinedev/mantine";\nimport routerProvider from "@refinedev/react-router-v6/legacy";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\n\nconst PostEdit: React.FC = () => {\n    return (\n        <Edit\n            // highlight-start\n            footerButtonProps={{\n                style: {\n                    // hide-start\n                    float: "right",\n                    marginRight: 24,\n                    // hide-end\n                    border: "2px dashed cornflowerblue",\n                    padding: "16px",\n                },\n            }}\n            // highlight-end\n        >\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nconst App = () => {\n    return (\n        <Refine\n            legacyRouterProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            resources={[\n                {\n                    name: "posts",\n                    edit: PostEdit,\n                    list: () => (\n                        <div>\n                            <p>This page is empty.</p>\n                            <EditButton recordItemId="123">\n                                Edit Item 123\n                            </EditButton>\n                        </div>\n                    ),\n                },\n            ]}\n        />\n    );\n};\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,i.kt)("h2",{id:"api-reference"},"API Reference"),(0,i.kt)("h3",{id:"props"},"Props"),(0,i.kt)(l,{module:"@refinedev/mantine/Edit","goBack-default":"`<IconArrowLeft />`","title-default":"`<Title order={3}>Edit {resource.name}</Title>`",mdxType:"PropsTable"}))}v.isMDXComponent=!0}}]);